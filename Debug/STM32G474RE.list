
STM32G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae30  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800b008  0800b008  0001b008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b458  0800b458  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b458  0800b458  0001b458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b460  0800b460  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b460  0800b460  0001b460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b464  0800b464  0001b464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d8  20000070  0800b4d8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  0800b4d8  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b906  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000341f  00000000  00000000  0003b9a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001750  00000000  00000000  0003edc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015e0  00000000  00000000  00040518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029dfc  00000000  00000000  00041af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3d3  00000000  00000000  0006b8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115897  00000000  00000000  00087cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019d55e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066a8  00000000  00000000  0019d5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800aff0 	.word	0x0800aff0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	0800aff0 	.word	0x0800aff0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <cfPhaseLockedLoop>:

#include <stdint.h>
#include "main.h"
#include "ControlFunctions.h"

float cfPhaseLockedLoop(float ElectAngleErr, float Kp_PLL, float Ki_PLL, float *Integral_ElectAngleErr_Ki){
 800051c:	b480      	push	{r7}
 800051e:	b087      	sub	sp, #28
 8000520:	af00      	add	r7, sp, #0
 8000522:	ed87 0a03 	vstr	s0, [r7, #12]
 8000526:	edc7 0a02 	vstr	s1, [r7, #8]
 800052a:	ed87 1a01 	vstr	s2, [r7, #4]
 800052e:	6038      	str	r0, [r7, #0]
	float ElectAngVeloEstimate;


	*Integral_ElectAngleErr_Ki += ElectAngleErr * Ki_PLL;
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	ed93 7a00 	vldr	s14, [r3]
 8000536:	edd7 6a03 	vldr	s13, [r7, #12]
 800053a:	edd7 7a01 	vldr	s15, [r7, #4]
 800053e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	edc3 7a00 	vstr	s15, [r3]
	ElectAngVeloEstimate = Kp_PLL * ElectAngleErr + *Integral_ElectAngleErr_Ki;
 800054c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000550:	edd7 7a03 	vldr	s15, [r7, #12]
 8000554:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	edd3 7a00 	vldr	s15, [r3]
 800055e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000562:	edc7 7a05 	vstr	s15, [r7, #20]

	return ElectAngVeloEstimate;
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	ee07 3a90 	vmov	s15, r3
}
 800056c:	eeb0 0a67 	vmov.f32	s0, s15
 8000570:	371c      	adds	r7, #28
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <gfDivideAvoidZero>:
#include <math.h>
#include "main.h"
#include "GeneralFunctions.h"
#include "GlobalConstants.h"

float gfDivideAvoidZero(float num, float den, float  threshold){
 800057a:	b480      	push	{r7}
 800057c:	b087      	sub	sp, #28
 800057e:	af00      	add	r7, sp, #0
 8000580:	ed87 0a03 	vstr	s0, [r7, #12]
 8000584:	edc7 0a02 	vstr	s1, [r7, #8]
 8000588:	ed87 1a01 	vstr	s2, [r7, #4]
	float result;
	if ( den >= 0 && den < threshold )
 800058c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000590:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000598:	db0b      	blt.n	80005b2 <gfDivideAvoidZero+0x38>
 800059a:	ed97 7a02 	vldr	s14, [r7, #8]
 800059e:	edd7 7a01 	vldr	s15, [r7, #4]
 80005a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005aa:	d502      	bpl.n	80005b2 <gfDivideAvoidZero+0x38>
		den = threshold;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	e017      	b.n	80005e2 <gfDivideAvoidZero+0x68>
	else if( den < 0 && den > -threshold)
 80005b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80005b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80005ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005be:	d510      	bpl.n	80005e2 <gfDivideAvoidZero+0x68>
 80005c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80005c4:	eef1 7a67 	vneg.f32	s15, s15
 80005c8:	ed97 7a02 	vldr	s14, [r7, #8]
 80005cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005d4:	dd05      	ble.n	80005e2 <gfDivideAvoidZero+0x68>
		den = -threshold;
 80005d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80005da:	eef1 7a67 	vneg.f32	s15, s15
 80005de:	edc7 7a02 	vstr	s15, [r7, #8]

	result = num / den;
 80005e2:	edd7 6a03 	vldr	s13, [r7, #12]
 80005e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80005ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005ee:	edc7 7a05 	vstr	s15, [r7, #20]
	return result;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	ee07 3a90 	vmov	s15, r3
}
 80005f8:	eeb0 0a67 	vmov.f32	s0, s15
 80005fc:	371c      	adds	r7, #28
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
	...

08000608 <gfWrapTheta>:

float gfWrapTheta(float theta){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWOPI);
 8000612:	eddf 0a19 	vldr	s1, [pc, #100]	; 8000678 <gfWrapTheta+0x70>
 8000616:	ed97 0a01 	vldr	s0, [r7, #4]
 800061a:	f009 fd9b 	bl	800a154 <fmodf>
 800061e:	ed87 0a01 	vstr	s0, [r7, #4]
	if( theta > PI)
 8000622:	edd7 7a01 	vldr	s15, [r7, #4]
 8000626:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800067c <gfWrapTheta+0x74>
 800062a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800062e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000632:	dd08      	ble.n	8000646 <gfWrapTheta+0x3e>
		theta -= TWOPI;
 8000634:	edd7 7a01 	vldr	s15, [r7, #4]
 8000638:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000678 <gfWrapTheta+0x70>
 800063c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000640:	edc7 7a01 	vstr	s15, [r7, #4]
 8000644:	e010      	b.n	8000668 <gfWrapTheta+0x60>
	else if( theta < -PI)
 8000646:	edd7 7a01 	vldr	s15, [r7, #4]
 800064a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000680 <gfWrapTheta+0x78>
 800064e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000656:	d507      	bpl.n	8000668 <gfWrapTheta+0x60>
		theta += TWOPI;
 8000658:	edd7 7a01 	vldr	s15, [r7, #4]
 800065c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000678 <gfWrapTheta+0x70>
 8000660:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000664:	edc7 7a01 	vstr	s15, [r7, #4]

	return theta;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	ee07 3a90 	vmov	s15, r3
}
 800066e:	eeb0 0a67 	vmov.f32	s0, s15
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40c90fdb 	.word	0x40c90fdb
 800067c:	40490fdb 	.word	0x40490fdb
 8000680:	c0490fdb 	.word	0xc0490fdb

08000684 <gUpperLowerLimit>:
	*theta += omega * Ts;
	wrapTheta = gfWrapTheta(*theta);
	*theta = wrapTheta;
}

float gUpperLowerLimit(float input, float Upper, float Lower){
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	ed87 0a03 	vstr	s0, [r7, #12]
 800068e:	edc7 0a02 	vstr	s1, [r7, #8]
 8000692:	ed87 1a01 	vstr	s2, [r7, #4]
	if(input > Upper) input = Upper;
 8000696:	ed97 7a03 	vldr	s14, [r7, #12]
 800069a:	edd7 7a02 	vldr	s15, [r7, #8]
 800069e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006a6:	dd01      	ble.n	80006ac <gUpperLowerLimit+0x28>
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60fb      	str	r3, [r7, #12]
	if(input < Lower) input = Lower;
 80006ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80006b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80006b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006bc:	d501      	bpl.n	80006c2 <gUpperLowerLimit+0x3e>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	60fb      	str	r3, [r7, #12]
	return input;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	ee07 3a90 	vmov	s15, r3
}
 80006c8:	eeb0 0a67 	vmov.f32	s0, s15
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <gOffDuty>:

void gOffDuty(float* Duty, int8_t* outputMode){
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	6039      	str	r1, [r7, #0]
	outputMode[0] = OUTPUTMODE_OPEN;
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_OPEN;
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	3301      	adds	r3, #1
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_OPEN;
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	3302      	adds	r3, #2
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
	Duty[0] = 0.0f;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f04f 0200 	mov.w	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
	Duty[1] = 0.0f;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	3304      	adds	r3, #4
 8000702:	f04f 0200 	mov.w	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
	Duty[2] = 0.0f;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	3308      	adds	r3, #8
 800070c:	f04f 0200 	mov.w	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr

0800071e <gLPF>:

void gLPF(float r, float wc, float Ts, float *y){
 800071e:	b480      	push	{r7}
 8000720:	b087      	sub	sp, #28
 8000722:	af00      	add	r7, sp, #0
 8000724:	ed87 0a03 	vstr	s0, [r7, #12]
 8000728:	edc7 0a02 	vstr	s1, [r7, #8]
 800072c:	ed87 1a01 	vstr	s2, [r7, #4]
 8000730:	6038      	str	r0, [r7, #0]
	// Under approximation  1/wc >> Ts
	// time constant tau = 1/wc
	float gainLPF;
	float yn_1;

	gainLPF = wc * Ts;
 8000732:	ed97 7a02 	vldr	s14, [r7, #8]
 8000736:	edd7 7a01 	vldr	s15, [r7, #4]
 800073a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800073e:	edc7 7a05 	vstr	s15, [r7, #20]
	yn_1 = *y;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	613b      	str	r3, [r7, #16]

	*y = (1 - gainLPF) * yn_1 + gainLPF * r;
 8000748:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800074c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000750:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000754:	edd7 7a04 	vldr	s15, [r7, #16]
 8000758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800075c:	edd7 6a05 	vldr	s13, [r7, #20]
 8000760:	edd7 7a03 	vldr	s15, [r7, #12]
 8000764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	edc3 7a00 	vstr	s15, [r3]
}
 8000772:	bf00      	nop
 8000774:	371c      	adds	r7, #28
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
	...

08000780 <Sequence>:
static void slctPosModeForSensorless(uint8_t button, uint8_t* posMode);
static void slctDrvModeForSensorless(uint8_t button, uint8_t* drvMode);
static void slctElectAngleFromPosMode(uint8_t posMode, float *electAngle, float *electAngVelo);
static void slctCntlFromDrvMode(uint8_t drvMode, float* Duty, int8_t* outputMode);

void Sequence(void){
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	//read IO signals
	gButton1 = readButton1();
 8000784:	f000 fa66 	bl	8000c54 <readButton1>
 8000788:	4603      	mov	r3, r0
 800078a:	461a      	mov	r2, r3
 800078c:	4b4c      	ldr	r3, [pc, #304]	; (80008c0 <Sequence+0x140>)
 800078e:	701a      	strb	r2, [r3, #0]
	gVolume = readVolume();
 8000790:	f000 fac8 	bl	8000d24 <readVolume>
 8000794:	eef0 7a40 	vmov.f32	s15, s0
 8000798:	4b4a      	ldr	r3, [pc, #296]	; (80008c4 <Sequence+0x144>)
 800079a:	edc3 7a00 	vstr	s15, [r3]
	readCurrent(gIuvw_AD, gIuvw);
 800079e:	494a      	ldr	r1, [pc, #296]	; (80008c8 <Sequence+0x148>)
 80007a0:	484a      	ldr	r0, [pc, #296]	; (80008cc <Sequence+0x14c>)
 80007a2:	f000 fb0b 	bl	8000dbc <readCurrent>

	gVdc = readVdc();
 80007a6:	f000 fae9 	bl	8000d7c <readVdc>
 80007aa:	eef0 7a40 	vmov.f32	s15, s0
 80007ae:	4b48      	ldr	r3, [pc, #288]	; (80008d0 <Sequence+0x150>)
 80007b0:	edc3 7a00 	vstr	s15, [r3]
	gTwoDivVdc = gfDivideAvoidZero(2.0f, gVdc, 1.0f);
 80007b4:	4b46      	ldr	r3, [pc, #280]	; (80008d0 <Sequence+0x150>)
 80007b6:	edd3 7a00 	vldr	s15, [r3]
 80007ba:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80007be:	eef0 0a67 	vmov.f32	s1, s15
 80007c2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80007c6:	f7ff fed8 	bl	800057a <gfDivideAvoidZero>
 80007ca:	eef0 7a40 	vmov.f32	s15, s0
 80007ce:	4b41      	ldr	r3, [pc, #260]	; (80008d4 <Sequence+0x154>)
 80007d0:	edc3 7a00 	vstr	s15, [r3]
	readHallSignal(gHall);
 80007d4:	4840      	ldr	r0, [pc, #256]	; (80008d8 <Sequence+0x158>)
 80007d6:	f000 fb53 	bl	8000e80 <readHallSignal>
	readElectFreqFromHallSignal(&gElectFreq);
 80007da:	4840      	ldr	r0, [pc, #256]	; (80008dc <Sequence+0x15c>)
 80007dc:	f000 fb76 	bl	8000ecc <readElectFreqFromHallSignal>

	readCurrent(gIuvw_AD, sSensData.Iuvw);
 80007e0:	493f      	ldr	r1, [pc, #252]	; (80008e0 <Sequence+0x160>)
 80007e2:	483a      	ldr	r0, [pc, #232]	; (80008cc <Sequence+0x14c>)
 80007e4:	f000 faea 	bl	8000dbc <readCurrent>
	sSensData.Vdc = gVdc;
 80007e8:	4b39      	ldr	r3, [pc, #228]	; (80008d0 <Sequence+0x150>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a3d      	ldr	r2, [pc, #244]	; (80008e4 <Sequence+0x164>)
 80007ee:	6153      	str	r3, [r2, #20]
	sSensData.twoDivVdc = gfDivideAvoidZero(2.0f, sSensData.Vdc, 1.0f);;
 80007f0:	4b3c      	ldr	r3, [pc, #240]	; (80008e4 <Sequence+0x164>)
 80007f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80007f6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80007fa:	eef0 0a67 	vmov.f32	s1, s15
 80007fe:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8000802:	f7ff feba 	bl	800057a <gfDivideAvoidZero>
 8000806:	eef0 7a40 	vmov.f32	s15, s0
 800080a:	4b36      	ldr	r3, [pc, #216]	; (80008e4 <Sequence+0x164>)
 800080c:	edc3 7a06 	vstr	s15, [r3, #24]

	if(sInitCnt < 500){
 8000810:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <Sequence+0x168>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000818:	d210      	bcs.n	800083c <Sequence+0xbc>
		sInitCnt++;
 800081a:	4b33      	ldr	r3, [pc, #204]	; (80008e8 <Sequence+0x168>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	3301      	adds	r3, #1
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b31      	ldr	r3, [pc, #196]	; (80008e8 <Sequence+0x168>)
 8000824:	801a      	strh	r2, [r3, #0]
		sPosMode = POSMODE_HALL;
 8000826:	4b31      	ldr	r3, [pc, #196]	; (80008ec <Sequence+0x16c>)
 8000828:	2202      	movs	r2, #2
 800082a:	701a      	strb	r2, [r3, #0]
		sDrvMode = DRVMODE_OFFDUTY;
 800082c:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <Sequence+0x170>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
		sElectAngVeloRefRateLimit = 0;
 8000832:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <Sequence+0x174>)
 8000834:	f04f 0200 	mov.w	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	e01d      	b.n	8000878 <Sequence+0xf8>
	}
	else {
	//slctPosMode(gElectFreq, &sPosMode);
	//slctDrvMode(gElectFreq, &sDrvMode);

	sElectAngVeloRef = 200.0f * gVolume;
 800083c:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <Sequence+0x144>)
 800083e:	edd3 7a00 	vldr	s15, [r3]
 8000842:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80008f8 <Sequence+0x178>
 8000846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800084a:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <Sequence+0x17c>)
 800084c:	edc3 7a00 	vstr	s15, [r3]
	//gRateLimit(sElectAngVeloRef, 100.0f, CARRIERCYCLE, &sElectAngVeloRefRateLimit);
	sElectAngVeloRefRateLimit = sElectAngVeloRef;
 8000850:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <Sequence+0x17c>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a27      	ldr	r2, [pc, #156]	; (80008f4 <Sequence+0x174>)
 8000856:	6013      	str	r3, [r2, #0]


	slctPosMode(gElectFreq, &sPosMode);
 8000858:	4b20      	ldr	r3, [pc, #128]	; (80008dc <Sequence+0x15c>)
 800085a:	edd3 7a00 	vldr	s15, [r3]
 800085e:	4823      	ldr	r0, [pc, #140]	; (80008ec <Sequence+0x16c>)
 8000860:	eeb0 0a67 	vmov.f32	s0, s15
 8000864:	f000 f858 	bl	8000918 <slctPosMode>
	slctDrvMode(gElectFreq, &sDrvMode);
 8000868:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <Sequence+0x15c>)
 800086a:	edd3 7a00 	vldr	s15, [r3]
 800086e:	4820      	ldr	r0, [pc, #128]	; (80008f0 <Sequence+0x170>)
 8000870:	eeb0 0a67 	vmov.f32	s0, s15
 8000874:	f000 f888 	bl	8000988 <slctDrvMode>
	}

	slctElectAngleFromPosMode(sPosMode, &sElectAngle, &sElectAngVelo);
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <Sequence+0x16c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4a20      	ldr	r2, [pc, #128]	; (8000900 <Sequence+0x180>)
 800087e:	4921      	ldr	r1, [pc, #132]	; (8000904 <Sequence+0x184>)
 8000880:	4618      	mov	r0, r3
 8000882:	f000 f8bb 	bl	80009fc <slctElectAngleFromPosMode>
	//slctElectAngleFromPosMode(POSMODE_FREERUN, &sElectAngle, &sElectAngVelo);
	sSensData.electAngle = sElectAngle;
 8000886:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <Sequence+0x184>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <Sequence+0x164>)
 800088c:	6013      	str	r3, [r2, #0]
	sSensData.electAngVelo = sElectAngVelo;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <Sequence+0x180>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <Sequence+0x164>)
 8000894:	6053      	str	r3, [r2, #4]

	gTheta = sElectAngle;
 8000896:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <Sequence+0x184>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a1b      	ldr	r2, [pc, #108]	; (8000908 <Sequence+0x188>)
 800089c:	6013      	str	r3, [r2, #0]
	gElectAngVelo = sElectAngVelo;
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <Sequence+0x180>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a1a      	ldr	r2, [pc, #104]	; (800090c <Sequence+0x18c>)
 80008a4:	6013      	str	r3, [r2, #0]

	slctCntlFromDrvMode(sDrvMode, sDuty, sOutputMode);
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <Sequence+0x170>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4a19      	ldr	r2, [pc, #100]	; (8000910 <Sequence+0x190>)
 80008ac:	4919      	ldr	r1, [pc, #100]	; (8000914 <Sequence+0x194>)
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f942 	bl	8000b38 <slctCntlFromDrvMode>
	//slctCntlFromDrvMode(DRVMODE_VECTORCONTROL, sDuty, sOutputMode);
	//slctCntlFromDrvMode(DRVMODE_OPENLOOP, sDuty, sOutputMode);

	writeOutputMode(sOutputMode);
 80008b4:	4816      	ldr	r0, [pc, #88]	; (8000910 <Sequence+0x190>)
 80008b6:	f000 fb5f 	bl	8000f78 <writeOutputMode>
	// call writeDuty in VectorControl for Debug.
	//writeDuty(sDuty);
	//writeDuty8(sDuty);

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000093 	.word	0x20000093
 80008c4:	200000a8 	.word	0x200000a8
 80008c8:	200000ac 	.word	0x200000ac
 80008cc:	200000b8 	.word	0x200000b8
 80008d0:	200000a0 	.word	0x200000a0
 80008d4:	200000a4 	.word	0x200000a4
 80008d8:	20000090 	.word	0x20000090
 80008dc:	20000094 	.word	0x20000094
 80008e0:	200000f0 	.word	0x200000f0
 80008e4:	200000e8 	.word	0x200000e8
 80008e8:	200000c0 	.word	0x200000c0
 80008ec:	200000be 	.word	0x200000be
 80008f0:	200000bf 	.word	0x200000bf
 80008f4:	200000d4 	.word	0x200000d4
 80008f8:	43480000 	.word	0x43480000
 80008fc:	200000d0 	.word	0x200000d0
 8000900:	200000cc 	.word	0x200000cc
 8000904:	200000c4 	.word	0x200000c4
 8000908:	20000098 	.word	0x20000098
 800090c:	2000009c 	.word	0x2000009c
 8000910:	200000d8 	.word	0x200000d8
 8000914:	200000dc 	.word	0x200000dc

08000918 <slctPosMode>:

void slctPosMode(float electFreq, uint8_t* posMode){
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000922:	6038      	str	r0, [r7, #0]

	*posMode = POSMODE_FREERUN;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]

	if(*posMode != POSMODE_HALL_PLL){
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b03      	cmp	r3, #3
 8000930:	d010      	beq.n	8000954 <slctPosMode+0x3c>
		if (electFreq > ELECTFREQ_VALIDPLL)
 8000932:	edd7 7a01 	vldr	s15, [r7, #4]
 8000936:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800093a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800093e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000942:	dd03      	ble.n	800094c <slctPosMode+0x34>
			*posMode = POSMODE_HALL_PLL;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	2203      	movs	r2, #3
 8000948:	701a      	strb	r2, [r3, #0]
			*posMode = POSMODE_HALL;
		else
			*posMode = POSMODE_HALL_PLL;
	}

}
 800094a:	e017      	b.n	800097c <slctPosMode+0x64>
			*posMode = POSMODE_HALL;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	2202      	movs	r2, #2
 8000950:	701a      	strb	r2, [r3, #0]
}
 8000952:	e013      	b.n	800097c <slctPosMode+0x64>
	else if(*posMode == POSMODE_HALL_PLL){
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b03      	cmp	r3, #3
 800095a:	d10f      	bne.n	800097c <slctPosMode+0x64>
		if (electFreq < ELECTFREQ_INVALIDPLL)
 800095c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000960:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8000964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096c:	d503      	bpl.n	8000976 <slctPosMode+0x5e>
			*posMode = POSMODE_HALL;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2202      	movs	r2, #2
 8000972:	701a      	strb	r2, [r3, #0]
}
 8000974:	e002      	b.n	800097c <slctPosMode+0x64>
			*posMode = POSMODE_HALL_PLL;
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	2203      	movs	r2, #3
 800097a:	701a      	strb	r2, [r3, #0]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <slctDrvMode>:

void slctDrvMode(float electFreq, uint8_t* drvMode){
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000992:	6038      	str	r0, [r7, #0]

	if(*drvMode != DRVMODE_VECTORCONTROL){
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b04      	cmp	r3, #4
 800099a:	d010      	beq.n	80009be <slctDrvMode+0x36>
		if (electFreq > ELECTFREQ_OPENLOOP2VECTORCONTROL)
 800099c:	edd7 7a01 	vldr	s15, [r7, #4]
 80009a0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80009f4 <slctDrvMode+0x6c>
 80009a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ac:	dd03      	ble.n	80009b6 <slctDrvMode+0x2e>
			*drvMode = DRVMODE_VECTORCONTROL;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	2204      	movs	r2, #4
 80009b2:	701a      	strb	r2, [r3, #0]
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
			*drvMode = DRVMODE_OPENLOOP;
		else
			*drvMode = DRVMODE_VECTORCONTROL;
	}
}
 80009b4:	e017      	b.n	80009e6 <slctDrvMode+0x5e>
			*drvMode = DRVMODE_OPENLOOP;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	2202      	movs	r2, #2
 80009ba:	701a      	strb	r2, [r3, #0]
}
 80009bc:	e013      	b.n	80009e6 <slctDrvMode+0x5e>
	else if(*drvMode == DRVMODE_VECTORCONTROL){
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	d10f      	bne.n	80009e6 <slctDrvMode+0x5e>
		if (electFreq < ELECTFREQ_VECTORCONTROL2OPENLOOP)
 80009c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80009ca:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80009f8 <slctDrvMode+0x70>
 80009ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d6:	d503      	bpl.n	80009e0 <slctDrvMode+0x58>
			*drvMode = DRVMODE_OPENLOOP;
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	2202      	movs	r2, #2
 80009dc:	701a      	strb	r2, [r3, #0]
}
 80009de:	e002      	b.n	80009e6 <slctDrvMode+0x5e>
			*drvMode = DRVMODE_VECTORCONTROL;
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	2204      	movs	r2, #4
 80009e4:	701a      	strb	r2, [r3, #0]
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	42480000 	.word	0x42480000
 80009f8:	42200000 	.word	0x42200000

080009fc <slctElectAngleFromPosMode>:
		*drvMode = DRVMODE_OPENLOOP_SENSORLESS;
	else
		*drvMode = DRVMODE_VECTORCONTROL;
}

void slctElectAngleFromPosMode(uint8_t posMode, float *electAngle, float *electAngVelo){
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
 8000a08:	73fb      	strb	r3, [r7, #15]
	uint8_t flgPLL;

	switch(posMode){
 8000a0a:	7bfb      	ldrb	r3, [r7, #15]
 8000a0c:	2b04      	cmp	r3, #4
 8000a0e:	d878      	bhi.n	8000b02 <slctElectAngleFromPosMode+0x106>
 8000a10:	a201      	add	r2, pc, #4	; (adr r2, 8000a18 <slctElectAngleFromPosMode+0x1c>)
 8000a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a16:	bf00      	nop
 8000a18:	08000a2d 	.word	0x08000a2d
 8000a1c:	08000a47 	.word	0x08000a47
 8000a20:	08000a87 	.word	0x08000a87
 8000a24:	08000aa3 	.word	0x08000aa3
 8000a28:	08000abf 	.word	0x08000abf
	case POSMODE_STOP:
		*electAngle = 0.0f;
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	f04f 0200 	mov.w	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
		*electAngVelo = 0.0f;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f04f 0200 	mov.w	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
		sElectAngVeloRef = 0.0f;
 8000a3c:	4b37      	ldr	r3, [pc, #220]	; (8000b1c <slctElectAngleFromPosMode+0x120>)
 8000a3e:	f04f 0200 	mov.w	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
		break;
 8000a44:	e066      	b.n	8000b14 <slctElectAngleFromPosMode+0x118>

	case POSMODE_FREERUN:
		*electAngVelo = sElectAngVeloRefRateLimit;
 8000a46:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <slctElectAngleFromPosMode+0x124>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	601a      	str	r2, [r3, #0]
		sElectAngleFreerun = sElectAngleFreerun + sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 8000a4e:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <slctElectAngleFromPosMode+0x124>)
 8000a50:	edd3 7a00 	vldr	s15, [r3]
 8000a54:	eddf 6a33 	vldr	s13, [pc, #204]	; 8000b24 <slctElectAngleFromPosMode+0x128>
 8000a58:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a5c:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <slctElectAngleFromPosMode+0x12c>)
 8000a5e:	edd3 7a00 	vldr	s15, [r3]
 8000a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a66:	4b30      	ldr	r3, [pc, #192]	; (8000b28 <slctElectAngleFromPosMode+0x12c>)
 8000a68:	edc3 7a00 	vstr	s15, [r3]
		*electAngle = gfWrapTheta(sElectAngleFreerun);
 8000a6c:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <slctElectAngleFromPosMode+0x12c>)
 8000a6e:	edd3 7a00 	vldr	s15, [r3]
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	f7ff fdc7 	bl	8000608 <gfWrapTheta>
 8000a7a:	eef0 7a40 	vmov.f32	s15, s0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	edc3 7a00 	vstr	s15, [r3]
		break;
 8000a84:	e046      	b.n	8000b14 <slctElectAngleFromPosMode+0x118>
	case POSMODE_HALL:
		flgPLL = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	75fb      	strb	r3, [r7, #23]
		calcElectAngle(gHall, gElectFreq, flgPLL, electAngle, electAngVelo);
 8000a8a:	4b28      	ldr	r3, [pc, #160]	; (8000b2c <slctElectAngleFromPosMode+0x130>)
 8000a8c:	edd3 7a00 	vldr	s15, [r3]
 8000a90:	7df9      	ldrb	r1, [r7, #23]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	68ba      	ldr	r2, [r7, #8]
 8000a96:	eeb0 0a67 	vmov.f32	s0, s15
 8000a9a:	4825      	ldr	r0, [pc, #148]	; (8000b30 <slctElectAngleFromPosMode+0x134>)
 8000a9c:	f000 faf0 	bl	8001080 <calcElectAngle>
		break;
 8000aa0:	e038      	b.n	8000b14 <slctElectAngleFromPosMode+0x118>
	case POSMODE_HALL_PLL:
		flgPLL = 1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	75fb      	strb	r3, [r7, #23]
		calcElectAngle(gHall, gElectFreq, flgPLL, electAngle, electAngVelo);
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <slctElectAngleFromPosMode+0x130>)
 8000aa8:	edd3 7a00 	vldr	s15, [r3]
 8000aac:	7df9      	ldrb	r1, [r7, #23]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	68ba      	ldr	r2, [r7, #8]
 8000ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab6:	481e      	ldr	r0, [pc, #120]	; (8000b30 <slctElectAngleFromPosMode+0x134>)
 8000ab8:	f000 fae2 	bl	8001080 <calcElectAngle>
		break;
 8000abc:	e02a      	b.n	8000b14 <slctElectAngleFromPosMode+0x118>
	case POSMODE_SENSORLESS:
		flgPLL = 1;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	75fb      	strb	r3, [r7, #23]
		*electAngVelo = sElectAngVeloRefRateLimit;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <slctElectAngleFromPosMode+0x124>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
		sElectAngle = sElectAngle + sElectAngVeloRefRateLimit * CARRIERCYCLE ;
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <slctElectAngleFromPosMode+0x124>)
 8000acc:	edd3 7a00 	vldr	s15, [r3]
 8000ad0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000b24 <slctElectAngleFromPosMode+0x128>
 8000ad4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000ad8:	4b16      	ldr	r3, [pc, #88]	; (8000b34 <slctElectAngleFromPosMode+0x138>)
 8000ada:	edd3 7a00 	vldr	s15, [r3]
 8000ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <slctElectAngleFromPosMode+0x138>)
 8000ae4:	edc3 7a00 	vstr	s15, [r3]
		*electAngle = gfWrapTheta(sElectAngle);
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <slctElectAngleFromPosMode+0x138>)
 8000aea:	edd3 7a00 	vldr	s15, [r3]
 8000aee:	eeb0 0a67 	vmov.f32	s0, s15
 8000af2:	f7ff fd89 	bl	8000608 <gfWrapTheta>
 8000af6:	eef0 7a40 	vmov.f32	s15, s0
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	edc3 7a00 	vstr	s15, [r3]

		break;
 8000b00:	e008      	b.n	8000b14 <slctElectAngleFromPosMode+0x118>
	default:
		*electAngle = 0;
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	f04f 0200 	mov.w	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
		*electAngVelo = 0;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f04f 0200 	mov.w	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
		break;
 8000b12:	bf00      	nop
	}
}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200000d0 	.word	0x200000d0
 8000b20:	200000d4 	.word	0x200000d4
 8000b24:	4684d000 	.word	0x4684d000
 8000b28:	200000c8 	.word	0x200000c8
 8000b2c:	20000094 	.word	0x20000094
 8000b30:	20000090 	.word	0x20000090
 8000b34:	200000c4 	.word	0x200000c4

08000b38 <slctCntlFromDrvMode>:

void slctCntlFromDrvMode(uint8_t drvMode, float* Duty, int8_t* outputMode){
 8000b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3a:	b08f      	sub	sp, #60	; 0x3c
 8000b3c:	af08      	add	r7, sp, #32
 8000b3e:	4603      	mov	r3, r0
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	73fb      	strb	r3, [r7, #15]

	float Idq_ref[2];
	Idq_ref[0] = 0.0f;//gVolume * 2;//-0.0f;//gVolume;//0.05f;
 8000b46:	f04f 0300 	mov.w	r3, #0
 8000b4a:	613b      	str	r3, [r7, #16]
	Idq_ref[1] = IQREFMAX * gVolume;
 8000b4c:	4b3c      	ldr	r3, [pc, #240]	; (8000c40 <slctCntlFromDrvMode+0x108>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	617b      	str	r3, [r7, #20]

	switch(drvMode){
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	d86a      	bhi.n	8000c2e <slctCntlFromDrvMode+0xf6>
 8000b58:	a201      	add	r2, pc, #4	; (adr r2, 8000b60 <slctCntlFromDrvMode+0x28>)
 8000b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5e:	bf00      	nop
 8000b60:	08000b75 	.word	0x08000b75
 8000b64:	08000c2f 	.word	0x08000c2f
 8000b68:	08000b7f 	.word	0x08000b7f
 8000b6c:	08000bdb 	.word	0x08000bdb
 8000b70:	08000c05 	.word	0x08000c05
		case DRVMODE_OFFDUTY:
			gOffDuty(Duty, outputMode);
 8000b74:	6879      	ldr	r1, [r7, #4]
 8000b76:	68b8      	ldr	r0, [r7, #8]
 8000b78:	f7ff fdad 	bl	80006d6 <gOffDuty>
			break;
 8000b7c:	e05c      	b.n	8000c38 <slctCntlFromDrvMode+0x100>
		case DRVMODE_OPENLOOP:
			sVectorControlData.Vdq[1] = gVdc * SQRT3DIV2_DIV2 * gVolume;
 8000b7e:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <slctCntlFromDrvMode+0x10c>)
 8000b80:	edd3 7a00 	vldr	s15, [r3]
 8000b84:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000c48 <slctCntlFromDrvMode+0x110>
 8000b88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <slctCntlFromDrvMode+0x108>)
 8000b8e:	edd3 7a00 	vldr	s15, [r3]
 8000b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b96:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <slctCntlFromDrvMode+0x114>)
 8000b98:	edc3 7a03 	vstr	s15, [r3, #12]
			OpenLoopTasks(gVdc * SQRT3DIV2_DIV2 * gVolume, sSensData, &sVectorControlData, Duty, outputMode);
 8000b9c:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <slctCntlFromDrvMode+0x10c>)
 8000b9e:	edd3 7a00 	vldr	s15, [r3]
 8000ba2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000c48 <slctCntlFromDrvMode+0x110>
 8000ba6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <slctCntlFromDrvMode+0x108>)
 8000bac:	edd3 7a00 	vldr	s15, [r3]
 8000bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bb4:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <slctCntlFromDrvMode+0x118>)
 8000bb6:	687a      	ldr	r2, [r7, #4]
 8000bb8:	9205      	str	r2, [sp, #20]
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	9204      	str	r2, [sp, #16]
 8000bbe:	4a23      	ldr	r2, [pc, #140]	; (8000c4c <slctCntlFromDrvMode+0x114>)
 8000bc0:	9203      	str	r2, [sp, #12]
 8000bc2:	466c      	mov	r4, sp
 8000bc4:	f103 0210 	add.w	r2, r3, #16
 8000bc8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000bce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd4:	f000 fd04 	bl	80015e0 <OpenLoopTasks>
			break;
 8000bd8:	e02e      	b.n	8000c38 <slctCntlFromDrvMode+0x100>
		case DRVMODE_OPENLOOP_SENSORLESS:
			VectorControlTasks(Idq_ref, sSensData, &sVectorControlData, Duty, outputMode);
 8000bda:	4c1d      	ldr	r4, [pc, #116]	; (8000c50 <slctCntlFromDrvMode+0x118>)
 8000bdc:	f107 0610 	add.w	r6, r7, #16
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	9306      	str	r3, [sp, #24]
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	9305      	str	r3, [sp, #20]
 8000be8:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <slctCntlFromDrvMode+0x114>)
 8000bea:	9304      	str	r3, [sp, #16]
 8000bec:	466d      	mov	r5, sp
 8000bee:	f104 030c 	add.w	r3, r4, #12
 8000bf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bf4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000bf8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	f000 fc25 	bl	800144c <VectorControlTasks>
			break;
 8000c02:	e019      	b.n	8000c38 <slctCntlFromDrvMode+0x100>
		case DRVMODE_VECTORCONTROL:
			VectorControlTasks(Idq_ref, sSensData, &sVectorControlData, Duty, outputMode);
 8000c04:	4c12      	ldr	r4, [pc, #72]	; (8000c50 <slctCntlFromDrvMode+0x118>)
 8000c06:	f107 0610 	add.w	r6, r7, #16
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	9306      	str	r3, [sp, #24]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	9305      	str	r3, [sp, #20]
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <slctCntlFromDrvMode+0x114>)
 8000c14:	9304      	str	r3, [sp, #16]
 8000c16:	466d      	mov	r5, sp
 8000c18:	f104 030c 	add.w	r3, r4, #12
 8000c1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c1e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000c22:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000c26:	4630      	mov	r0, r6
 8000c28:	f000 fc10 	bl	800144c <VectorControlTasks>
			break;
 8000c2c:	e004      	b.n	8000c38 <slctCntlFromDrvMode+0x100>
		default :
			gOffDuty(Duty, outputMode);
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	68b8      	ldr	r0, [r7, #8]
 8000c32:	f7ff fd50 	bl	80006d6 <gOffDuty>
	}
}
 8000c36:	bf00      	nop
 8000c38:	bf00      	nop
 8000c3a:	371c      	adds	r7, #28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c40:	200000a8 	.word	0x200000a8
 8000c44:	200000a0 	.word	0x200000a0
 8000c48:	3f1cc471 	.word	0x3f1cc471
 8000c4c:	20000104 	.word	0x20000104
 8000c50:	200000e8 	.word	0x200000e8

08000c54 <readButton1>:
static uint32_t sInputCaptureCnt_pre;


uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
	volatile uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8000c5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <readButton1+0x20>)
 8000c60:	f005 fd96 	bl	8006790 <HAL_GPIO_ReadPin>
 8000c64:	4603      	mov	r3, r0
 8000c66:	71fb      	strb	r3, [r7, #7]
	return B1;
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	b2db      	uxtb	r3, r3
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	48000800 	.word	0x48000800

08000c78 <readInputCaptureCnt>:

uint32_t readInputCaptureCnt(void){
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
	// Read Input Capture Count of GPIO
	// CCR1:TIM2 Channel1 = H1, CCR2:Channel2 = H2, CCR3:Channel3 = H3
	volatile uint32_t inputCaptureCnt;

	inputCaptureCnt = TIM2 -> CCR1;
 8000c7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c84:	607b      	str	r3, [r7, #4]

	return inputCaptureCnt;
 8000c86:	687b      	ldr	r3, [r7, #4]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <readTimeInterval>:

float readTimeInterval(uint32_t inputCaptureCnt, uint32_t inputCaptureCnt_pre){
 8000c94:	b480      	push	{r7}
 8000c96:	b087      	sub	sp, #28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
	float timeInterval;
	uint32_t inputCaptureCntMax;
	uint32_t inputCaptureCntHalf;

	// TIM2 -> ARR Means Counter Period of TIM2
	inputCaptureCntMax = TIM2 -> ARR;
 8000c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca4:	613b      	str	r3, [r7, #16]
	inputCaptureCntHalf = (inputCaptureCntMax + 1) >> 1;
 8000ca6:	693b      	ldr	r3, [r7, #16]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	085b      	lsrs	r3, r3, #1
 8000cac:	60fb      	str	r3, [r7, #12]


	inputCaptureCntDiff = (float)inputCaptureCnt - (float)inputCaptureCnt_pre;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	ee07 3a90 	vmov	s15, r3
 8000cb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	ee07 3a90 	vmov	s15, r3
 8000cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cc6:	edc7 7a05 	vstr	s15, [r7, #20]

	if( inputCaptureCntDiff < - (float)inputCaptureCntHalf)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	ee07 3a90 	vmov	s15, r3
 8000cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd4:	eef1 7a67 	vneg.f32	s15, s15
 8000cd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce4:	d50a      	bpl.n	8000cfc <readTimeInterval+0x68>
	  inputCaptureCntDiff += (float)inputCaptureCntMax;
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	ee07 3a90 	vmov	s15, r3
 8000cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cf0:	ed97 7a05 	vldr	s14, [r7, #20]
 8000cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cf8:	edc7 7a05 	vstr	s15, [r7, #20]

	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;
 8000cfc:	ed97 7a05 	vldr	s14, [r7, #20]
 8000d00:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000d20 <readTimeInterval+0x8c>
 8000d04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d08:	edc7 7a02 	vstr	s15, [r7, #8]

	return timeInterval;
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	ee07 3a90 	vmov	s15, r3
}
 8000d12:	eeb0 0a67 	vmov.f32	s0, s15
 8000d16:	371c      	adds	r7, #28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	4d221fe8 	.word	0x4d221fe8

08000d24 <readVolume>:

float readVolume(void){
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <readVolume+0x50>)
 8000d2c:	885b      	ldrh	r3, [r3, #2]
 8000d2e:	807b      	strh	r3, [r7, #2]

	Volume = ((int16_t)Volume_ad - 99)* 0.0002442f;
 8000d30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000d34:	3b63      	subs	r3, #99	; 0x63
 8000d36:	ee07 3a90 	vmov	s15, r3
 8000d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d3e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000d78 <readVolume+0x54>
 8000d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d46:	edc7 7a01 	vstr	s15, [r7, #4]
	//Volume = ((int16_t)Volume_ad - 950) * 0.000573394f;
	if( Volume < 0) Volume = 0;
 8000d4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d56:	d502      	bpl.n	8000d5e <readVolume+0x3a>
 8000d58:	f04f 0300 	mov.w	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
	return Volume;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	ee07 3a90 	vmov	s15, r3
}
 8000d64:	eeb0 0a67 	vmov.f32	s0, s15
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	2000008c 	.word	0x2000008c
 8000d78:	398007f8 	.word	0x398007f8

08000d7c <readVdc>:

float readVdc(void){
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Vdc is connected to PA1(ADC2)
	float Vdc;
	uint16_t Vdc_ad = gAdcValue[0];
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <readVdc+0x38>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	80fb      	strh	r3, [r7, #6]
	Vdc = Vdc_ad * AD2VOLTAGE;
 8000d88:	88fb      	ldrh	r3, [r7, #6]
 8000d8a:	ee07 3a90 	vmov	s15, r3
 8000d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d92:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000db8 <readVdc+0x3c>
 8000d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d9a:	edc7 7a00 	vstr	s15, [r7]
	return Vdc;
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	ee07 3a90 	vmov	s15, r3
}
 8000da4:	eeb0 0a67 	vmov.f32	s0, s15
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	2000008c 	.word	0x2000008c
 8000db8:	3c7cd035 	.word	0x3c7cd035

08000dbc <readCurrent>:

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw){
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 8000dc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dce:	b29a      	uxth	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 8000dd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000dd8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3302      	adds	r3, #2
 8000de0:	b292      	uxth	r2, r2
 8000de2:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000de4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000de8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3304      	adds	r3, #4
 8000df0:	b292      	uxth	r2, r2
 8000df2:	801a      	strh	r2, [r3, #0]

	Iuvw[0] = ((float)Iuvw_AD[0] - IU_ADOffSET) * AD2CURRENT;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e00:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000e70 <readCurrent+0xb4>
 8000e04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e08:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000e74 <readCurrent+0xb8>
 8000e0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[1] = ((float)Iuvw_AD[1] - IV_ADOffSET) * AD2CURRENT;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3302      	adds	r3, #2
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	ee07 3a90 	vmov	s15, r3
 8000e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e24:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000e78 <readCurrent+0xbc>
 8000e28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	3304      	adds	r3, #4
 8000e30:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000e74 <readCurrent+0xb8>
 8000e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e38:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[2] = ((float)Iuvw_AD[2] - IW_ADOffSET) * AD2CURRENT;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3304      	adds	r3, #4
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e4a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000e7c <readCurrent+0xc0>
 8000e4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	3308      	adds	r3, #8
 8000e56:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000e74 <readCurrent+0xb8>
 8000e5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e5e:	edc3 7a00 	vstr	s15, [r3]
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	44ee0000 	.word	0x44ee0000
 8000e74:	bafdbcc5 	.word	0xbafdbcc5
 8000e78:	44efe000 	.word	0x44efe000
 8000e7c:	44ef8000 	.word	0x44ef8000

08000e80 <readHallSignal>:

void readHallSignal(uint8_t* Hall){
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	//Hall[0] = u, Hall[1] = v, Hall[2] = w
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
 8000e88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e90:	f005 fc7e 	bl	8006790 <HAL_GPIO_ReadPin>
 8000e94:	4603      	mov	r3, r0
 8000e96:	461a      	mov	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	701a      	strb	r2, [r3, #0]
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	1c5c      	adds	r4, r3, #1
 8000ea0:	2108      	movs	r1, #8
 8000ea2:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <readHallSignal+0x48>)
 8000ea4:	f005 fc74 	bl	8006790 <HAL_GPIO_ReadPin>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	7023      	strb	r3, [r4, #0]
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	1c9c      	adds	r4, r3, #2
 8000eb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000eb4:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <readHallSignal+0x48>)
 8000eb6:	f005 fc6b 	bl	8006790 <HAL_GPIO_ReadPin>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	7023      	strb	r3, [r4, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd90      	pop	{r4, r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	48000400 	.word	0x48000400

08000ecc <readElectFreqFromHallSignal>:

void readElectFreqFromHallSignal(float* electFreq){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	float timeInterval;

	// Hold & Read Input Capture Count
	sInputCaptureCnt_pre = sInputCaptureCnt;
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <readElectFreqFromHallSignal+0x98>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <readElectFreqFromHallSignal+0x9c>)
 8000eda:	6013      	str	r3, [r2, #0]
	sInputCaptureCnt = readInputCaptureCnt();
 8000edc:	f7ff fecc 	bl	8000c78 <readInputCaptureCnt>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a20      	ldr	r2, [pc, #128]	; (8000f64 <readElectFreqFromHallSignal+0x98>)
 8000ee4:	6013      	str	r3, [r2, #0]

	// Calculate Electrical Freq From Input Capture Count
	if(sInputCaptureCnt != sInputCaptureCnt_pre){
 8000ee6:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <readElectFreqFromHallSignal+0x98>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <readElectFreqFromHallSignal+0x9c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d023      	beq.n	8000f3a <readElectFreqFromHallSignal+0x6e>
		timeInterval = readTimeInterval(sInputCaptureCnt, sInputCaptureCnt_pre);
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <readElectFreqFromHallSignal+0x98>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <readElectFreqFromHallSignal+0x9c>)
 8000ef8:	6812      	ldr	r2, [r2, #0]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fec9 	bl	8000c94 <readTimeInterval>
 8000f02:	ed87 0a03 	vstr	s0, [r7, #12]
		if( timeInterval > 0.0001f)
 8000f06:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f0a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000f6c <readElectFreqFromHallSignal+0xa0>
 8000f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f16:	dd0c      	ble.n	8000f32 <readElectFreqFromHallSignal+0x66>
			*electFreq = gfDivideAvoidZero(1.0f, timeInterval, SYSTEMCLOCKCYCLE);
 8000f18:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8000f70 <readElectFreqFromHallSignal+0xa4>
 8000f1c:	edd7 0a03 	vldr	s1, [r7, #12]
 8000f20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f24:	f7ff fb29 	bl	800057a <gfDivideAvoidZero>
 8000f28:	eef0 7a40 	vmov.f32	s15, s0
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	edc3 7a00 	vstr	s15, [r3]

		sNoInputCaptureCnt = 0;
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <readElectFreqFromHallSignal+0xa8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	801a      	strh	r2, [r3, #0]
	}
	else if(sNoInputCaptureCnt < 2000)
		sNoInputCaptureCnt ++;
	else
		*electFreq = 0;
}
 8000f38:	e00f      	b.n	8000f5a <readElectFreqFromHallSignal+0x8e>
	else if(sNoInputCaptureCnt < 2000)
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <readElectFreqFromHallSignal+0xa8>)
 8000f3c:	881b      	ldrh	r3, [r3, #0]
 8000f3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f42:	d206      	bcs.n	8000f52 <readElectFreqFromHallSignal+0x86>
		sNoInputCaptureCnt ++;
 8000f44:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <readElectFreqFromHallSignal+0xa8>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <readElectFreqFromHallSignal+0xa8>)
 8000f4e:	801a      	strh	r2, [r3, #0]
}
 8000f50:	e003      	b.n	8000f5a <readElectFreqFromHallSignal+0x8e>
		*electFreq = 0;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000120 	.word	0x20000120
 8000f68:	20000124 	.word	0x20000124
 8000f6c:	38d1b717 	.word	0x38d1b717
 8000f70:	31ca1db9 	.word	0x31ca1db9
 8000f74:	2000011c 	.word	0x2000011c

08000f78 <writeOutputMode>:
	Iuvw[1] = ((float)Iuvw_AD[1] - IV2_ADOffSET) * AD2CURRENT;
	Iuvw[2] = ((float)Iuvw_AD[2] - IW2_ADOffSET) * AD2CURRENT;
}
*/

void writeOutputMode(int8_t* outputMode){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f993 3000 	ldrsb.w	r3, [r3]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d106      	bne.n	8000f98 <writeOutputMode+0x20>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f90:	4819      	ldr	r0, [pc, #100]	; (8000ff8 <writeOutputMode+0x80>)
 8000f92:	f005 fc15 	bl	80067c0 <HAL_GPIO_WritePin>
 8000f96:	e005      	b.n	8000fa4 <writeOutputMode+0x2c>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9e:	4816      	ldr	r0, [pc, #88]	; (8000ff8 <writeOutputMode+0x80>)
 8000fa0:	f005 fc0e 	bl	80067c0 <HAL_GPIO_WritePin>

	if(outputMode[1] == OUTPUTMODE_OPEN )
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	f993 3000 	ldrsb.w	r3, [r3]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d106      	bne.n	8000fbe <writeOutputMode+0x46>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb6:	4810      	ldr	r0, [pc, #64]	; (8000ff8 <writeOutputMode+0x80>)
 8000fb8:	f005 fc02 	bl	80067c0 <HAL_GPIO_WritePin>
 8000fbc:	e005      	b.n	8000fca <writeOutputMode+0x52>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <writeOutputMode+0x80>)
 8000fc6:	f005 fbfb 	bl	80067c0 <HAL_GPIO_WritePin>

	if(outputMode[2] == OUTPUTMODE_OPEN )
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3302      	adds	r3, #2
 8000fce:	f993 3000 	ldrsb.w	r3, [r3]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d106      	bne.n	8000fe4 <writeOutputMode+0x6c>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fdc:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <writeOutputMode+0x80>)
 8000fde:	f005 fbef 	bl	80067c0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 8000fe2:	e005      	b.n	8000ff0 <writeOutputMode+0x78>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fea:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <writeOutputMode+0x80>)
 8000fec:	f005 fbe8 	bl	80067c0 <HAL_GPIO_WritePin>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	48000800 	.word	0x48000800

08000ffc <writeDuty>:

void writeDuty(float* Duty){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	ed93 7a00 	vldr	s14, [r3]
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <writeDuty+0x80>)
 800100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100e:	ee07 3a90 	vmov	s15, r3
 8001012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <writeDuty+0x80>)
 800101c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001020:	ee17 2a90 	vmov	r2, s15
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3304      	adds	r3, #4
 800102a:	ed93 7a00 	vldr	s14, [r3]
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <writeDuty+0x80>)
 8001030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001032:	ee07 3a90 	vmov	s15, r3
 8001036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800103a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <writeDuty+0x80>)
 8001040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001044:	ee17 2a90 	vmov	r2, s15
 8001048:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3308      	adds	r3, #8
 800104e:	ed93 7a00 	vldr	s14, [r3]
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <writeDuty+0x80>)
 8001054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800105e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <writeDuty+0x80>)
 8001064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001068:	ee17 2a90 	vmov	r2, s15
 800106c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800106e:	bf00      	nop
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40012c00 	.word	0x40012c00

08001080 <calcElectAngle>:
	outputMode[1] = sOutputMode[1];
	outputMode[2] = sOutputMode[2];

}

void calcElectAngle(uint8_t* hall, float electFreq, uint8_t flgPLL, float* electAngle, float* electAngVelo){
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	; 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6178      	str	r0, [r7, #20]
 8001088:	ed87 0a04 	vstr	s0, [r7, #16]
 800108c:	60ba      	str	r2, [r7, #8]
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	73fb      	strb	r3, [r7, #15]
	float Kp_PLL;
	float Ki_PLL;
	float Ts_PLL;

	// Calculate PLL Gain based on Electrical Angle Velocity
	wc_PLL = sElectAngVeloEstimate * 0.5f;
 8001094:	4b76      	ldr	r3, [pc, #472]	; (8001270 <calcElectAngle+0x1f0>)
 8001096:	edd3 7a00 	vldr	s15, [r3]
 800109a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800109e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	wc_PLL = gUpperLowerLimit(wc_PLL, 500.0f, 0.0f);
 80010a6:	ed9f 1a73 	vldr	s2, [pc, #460]	; 8001274 <calcElectAngle+0x1f4>
 80010aa:	eddf 0a73 	vldr	s1, [pc, #460]	; 8001278 <calcElectAngle+0x1f8>
 80010ae:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80010b2:	f7ff fae7 	bl	8000684 <gUpperLowerLimit>
 80010b6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	Ts_PLL = 1.0f / (sElectAngVeloEstimate * ONEDIVTWOPI * 6.0f);
 80010ba:	4b6d      	ldr	r3, [pc, #436]	; (8001270 <calcElectAngle+0x1f0>)
 80010bc:	edd3 7a00 	vldr	s15, [r3]
 80010c0:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800127c <calcElectAngle+0x1fc>
 80010c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80010cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010d8:	edc7 7a08 	vstr	s15, [r7, #32]
	Kp_PLL = wc_PLL;
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	61fb      	str	r3, [r7, #28]
	Ki_PLL = 0.2f * wc_PLL * wc_PLL * Ts_PLL;
 80010e0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010e4:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001280 <calcElectAngle+0x200>
 80010e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80010ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80010f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fc:	edc7 7a06 	vstr	s15, [r7, #24]


	// Hold & Calculate Voltage Mode Based on Hall Signals
	sVoltageMode_pre = sVoltageMode;
 8001100:	4b60      	ldr	r3, [pc, #384]	; (8001284 <calcElectAngle+0x204>)
 8001102:	781a      	ldrb	r2, [r3, #0]
 8001104:	4b60      	ldr	r3, [pc, #384]	; (8001288 <calcElectAngle+0x208>)
 8001106:	701a      	strb	r2, [r3, #0]
	sVoltageMode = calcVoltageMode(hall);
 8001108:	6978      	ldr	r0, [r7, #20]
 800110a:	f000 f8d3 	bl	80012b4 <calcVoltageMode>
 800110e:	4603      	mov	r3, r0
 8001110:	461a      	mov	r2, r3
 8001112:	4b5c      	ldr	r3, [pc, #368]	; (8001284 <calcElectAngle+0x204>)
 8001114:	701a      	strb	r2, [r3, #0]


	// Hold & Read Actual Electrical Angle Based on Voltage Mode (Consider with Rotational Direction)
	sElectAngleActual_pre = sElectAngleActual;
 8001116:	4b5d      	ldr	r3, [pc, #372]	; (800128c <calcElectAngle+0x20c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a5d      	ldr	r2, [pc, #372]	; (8001290 <calcElectAngle+0x210>)
 800111c:	6013      	str	r3, [r2, #0]
	calcRotDirFromVoltageMode(sVoltageMode_pre, sVoltageMode, &sRotDir);
 800111e:	4b5a      	ldr	r3, [pc, #360]	; (8001288 <calcElectAngle+0x208>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4a58      	ldr	r2, [pc, #352]	; (8001284 <calcElectAngle+0x204>)
 8001124:	7811      	ldrb	r1, [r2, #0]
 8001126:	4a5b      	ldr	r2, [pc, #364]	; (8001294 <calcElectAngle+0x214>)
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f909 	bl	8001340 <calcRotDirFromVoltageMode>
	sElectAngleActual = calcElectAngleFromVoltageMode(sVoltageMode, sRotDir);
 800112e:	4b55      	ldr	r3, [pc, #340]	; (8001284 <calcElectAngle+0x204>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	4a58      	ldr	r2, [pc, #352]	; (8001294 <calcElectAngle+0x214>)
 8001134:	f992 2000 	ldrsb.w	r2, [r2]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f92c 	bl	8001398 <calcElectAngleFromVoltageMode>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
 8001144:	4b51      	ldr	r3, [pc, #324]	; (800128c <calcElectAngle+0x20c>)
 8001146:	edc3 7a00 	vstr	s15, [r3]
	sElectAngleActual = gfWrapTheta(sElectAngleActual);
 800114a:	4b50      	ldr	r3, [pc, #320]	; (800128c <calcElectAngle+0x20c>)
 800114c:	edd3 7a00 	vldr	s15, [r3]
 8001150:	eeb0 0a67 	vmov.f32	s0, s15
 8001154:	f7ff fa58 	bl	8000608 <gfWrapTheta>
 8001158:	eef0 7a40 	vmov.f32	s15, s0
 800115c:	4b4b      	ldr	r3, [pc, #300]	; (800128c <calcElectAngle+0x20c>)
 800115e:	edc3 7a00 	vstr	s15, [r3]

	// Hold & Calculate Whether to Use Lead Angle Control Mode.
	sFlgPLL_pre = sFlgPLL;
 8001162:	4b4d      	ldr	r3, [pc, #308]	; (8001298 <calcElectAngle+0x218>)
 8001164:	781a      	ldrb	r2, [r3, #0]
 8001166:	4b4d      	ldr	r3, [pc, #308]	; (800129c <calcElectAngle+0x21c>)
 8001168:	701a      	strb	r2, [r3, #0]
	sFlgPLL = flgPLL;
 800116a:	4a4b      	ldr	r2, [pc, #300]	; (8001298 <calcElectAngle+0x218>)
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	7013      	strb	r3, [r2, #0]

	if(flgPLL == 1){
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d163      	bne.n	800123e <calcElectAngle+0x1be>
		// Six Step Control using Electrical Angle Consider with Lead Angle
		// Reset EstOmega
		if ( sFlgPLL_pre == 0 ){
 8001176:	4b49      	ldr	r3, [pc, #292]	; (800129c <calcElectAngle+0x21c>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d110      	bne.n	80011a0 <calcElectAngle+0x120>
			sElectAngVeloEstimate = electFreq * TWOPI;
 800117e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001182:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80012a0 <calcElectAngle+0x220>
 8001186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118a:	4b39      	ldr	r3, [pc, #228]	; (8001270 <calcElectAngle+0x1f0>)
 800118c:	edc3 7a00 	vstr	s15, [r3]
			sIntegral_ElectAngleErr_Ki = sElectAngVeloEstimate;
 8001190:	4b37      	ldr	r3, [pc, #220]	; (8001270 <calcElectAngle+0x1f0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a43      	ldr	r2, [pc, #268]	; (80012a4 <calcElectAngle+0x224>)
 8001196:	6013      	str	r3, [r2, #0]
			sElectAngleEstimate = sElectAngleActual;
 8001198:	4b3c      	ldr	r3, [pc, #240]	; (800128c <calcElectAngle+0x20c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a42      	ldr	r2, [pc, #264]	; (80012a8 <calcElectAngle+0x228>)
 800119e:	6013      	str	r3, [r2, #0]
		}

		// Estimate Electrical Angle & Velocity using PLL
		sElectAngleEstimate += sElectAngVeloEstimate * CARRIERCYCLE;
 80011a0:	4b33      	ldr	r3, [pc, #204]	; (8001270 <calcElectAngle+0x1f0>)
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	eddf 6a41 	vldr	s13, [pc, #260]	; 80012ac <calcElectAngle+0x22c>
 80011aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80011ae:	4b3e      	ldr	r3, [pc, #248]	; (80012a8 <calcElectAngle+0x228>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b8:	4b3b      	ldr	r3, [pc, #236]	; (80012a8 <calcElectAngle+0x228>)
 80011ba:	edc3 7a00 	vstr	s15, [r3]
		sElectAngleEstimate = gfWrapTheta(sElectAngleEstimate);
 80011be:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <calcElectAngle+0x228>)
 80011c0:	edd3 7a00 	vldr	s15, [r3]
 80011c4:	eeb0 0a67 	vmov.f32	s0, s15
 80011c8:	f7ff fa1e 	bl	8000608 <gfWrapTheta>
 80011cc:	eef0 7a40 	vmov.f32	s15, s0
 80011d0:	4b35      	ldr	r3, [pc, #212]	; (80012a8 <calcElectAngle+0x228>)
 80011d2:	edc3 7a00 	vstr	s15, [r3]

		if( sElectAngleActual != sElectAngleActual_pre){
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <calcElectAngle+0x20c>)
 80011d8:	ed93 7a00 	vldr	s14, [r3]
 80011dc:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <calcElectAngle+0x210>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	eeb4 7a67 	vcmp.f32	s14, s15
 80011e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ea:	d035      	beq.n	8001258 <calcElectAngle+0x1d8>
			sElectAngleErr = sElectAngleActual - sElectAngleEstimate;
 80011ec:	4b27      	ldr	r3, [pc, #156]	; (800128c <calcElectAngle+0x20c>)
 80011ee:	ed93 7a00 	vldr	s14, [r3]
 80011f2:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <calcElectAngle+0x228>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fc:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <calcElectAngle+0x230>)
 80011fe:	edc3 7a00 	vstr	s15, [r3]

			// wrap Electrical Angle Err
			sElectAngleErr = gfWrapTheta(sElectAngleErr);
 8001202:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <calcElectAngle+0x230>)
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	eeb0 0a67 	vmov.f32	s0, s15
 800120c:	f7ff f9fc 	bl	8000608 <gfWrapTheta>
 8001210:	eef0 7a40 	vmov.f32	s15, s0
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <calcElectAngle+0x230>)
 8001216:	edc3 7a00 	vstr	s15, [r3]

			//PLL
			sElectAngVeloEstimate = cfPhaseLockedLoop(sElectAngleErr, Kp_PLL, Ki_PLL, &sIntegral_ElectAngleErr_Ki);
 800121a:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <calcElectAngle+0x230>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	4820      	ldr	r0, [pc, #128]	; (80012a4 <calcElectAngle+0x224>)
 8001222:	ed97 1a06 	vldr	s2, [r7, #24]
 8001226:	edd7 0a07 	vldr	s1, [r7, #28]
 800122a:	eeb0 0a67 	vmov.f32	s0, s15
 800122e:	f7ff f975 	bl	800051c <cfPhaseLockedLoop>
 8001232:	eef0 7a40 	vmov.f32	s15, s0
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <calcElectAngle+0x1f0>)
 8001238:	edc3 7a00 	vstr	s15, [r3]
 800123c:	e00c      	b.n	8001258 <calcElectAngle+0x1d8>
		}
	}
	else{
		sElectAngleEstimate = sElectAngleActual;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <calcElectAngle+0x20c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a19      	ldr	r2, [pc, #100]	; (80012a8 <calcElectAngle+0x228>)
 8001244:	6013      	str	r3, [r2, #0]
		sElectAngVeloEstimate = electFreq * TWOPI;
 8001246:	edd7 7a04 	vldr	s15, [r7, #16]
 800124a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80012a0 <calcElectAngle+0x220>
 800124e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <calcElectAngle+0x1f0>)
 8001254:	edc3 7a00 	vstr	s15, [r3]
	}

	*electAngle = sElectAngleEstimate;
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <calcElectAngle+0x228>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	601a      	str	r2, [r3, #0]
	*electAngVelo = sElectAngVeloEstimate;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <calcElectAngle+0x1f0>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	601a      	str	r2, [r3, #0]


}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000140 	.word	0x20000140
 8001274:	00000000 	.word	0x00000000
 8001278:	43fa0000 	.word	0x43fa0000
 800127c:	3e22f983 	.word	0x3e22f983
 8001280:	3e4ccccd 	.word	0x3e4ccccd
 8001284:	20000128 	.word	0x20000128
 8001288:	20000129 	.word	0x20000129
 800128c:	20000130 	.word	0x20000130
 8001290:	20000134 	.word	0x20000134
 8001294:	2000012a 	.word	0x2000012a
 8001298:	2000012b 	.word	0x2000012b
 800129c:	2000012c 	.word	0x2000012c
 80012a0:	40c90fdb 	.word	0x40c90fdb
 80012a4:	2000013c 	.word	0x2000013c
 80012a8:	20000138 	.word	0x20000138
 80012ac:	4684d000 	.word	0x4684d000
 80012b0:	20000144 	.word	0x20000144

080012b4 <calcVoltageMode>:
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

}*/

//static uint8_t calcVoltageMode(uint8_t* Hall){
uint8_t calcVoltageMode(uint8_t* Hall){
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

	uint8_t hallInput;
	uint8_t voltageMode = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	73fb      	strb	r3, [r7, #15]

	// Convert hall input to digital signal
	hallInput = (Hall[2] << 2) + (Hall[1] << 1) + Hall[0];
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3302      	adds	r3, #2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3301      	adds	r3, #1
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	4413      	add	r3, r2
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	73bb      	strb	r3, [r7, #14]

	// Decode digital signal to voltage mode
	switch(hallInput){
 80012e0:	7bbb      	ldrb	r3, [r7, #14]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	2b05      	cmp	r3, #5
 80012e6:	d821      	bhi.n	800132c <calcVoltageMode+0x78>
 80012e8:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <calcVoltageMode+0x3c>)
 80012ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ee:	bf00      	nop
 80012f0:	08001327 	.word	0x08001327
 80012f4:	0800130f 	.word	0x0800130f
 80012f8:	08001309 	.word	0x08001309
 80012fc:	0800131b 	.word	0x0800131b
 8001300:	08001321 	.word	0x08001321
 8001304:	08001315 	.word	0x08001315
	  case 3:
		voltageMode = 3;
 8001308:	2303      	movs	r3, #3
 800130a:	73fb      	strb	r3, [r7, #15]
		break;
 800130c:	e011      	b.n	8001332 <calcVoltageMode+0x7e>
	  case 2:
		voltageMode = 4;
 800130e:	2304      	movs	r3, #4
 8001310:	73fb      	strb	r3, [r7, #15]
		break;
 8001312:	e00e      	b.n	8001332 <calcVoltageMode+0x7e>
	  case 6:
		voltageMode = 5;
 8001314:	2305      	movs	r3, #5
 8001316:	73fb      	strb	r3, [r7, #15]
		break;
 8001318:	e00b      	b.n	8001332 <calcVoltageMode+0x7e>
	  case 4:
		voltageMode = 6;
 800131a:	2306      	movs	r3, #6
 800131c:	73fb      	strb	r3, [r7, #15]
		break;
 800131e:	e008      	b.n	8001332 <calcVoltageMode+0x7e>
	  case 5:
		voltageMode = 1;
 8001320:	2301      	movs	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
		break;
 8001324:	e005      	b.n	8001332 <calcVoltageMode+0x7e>
	  case 1:
		voltageMode = 2;
 8001326:	2302      	movs	r3, #2
 8001328:	73fb      	strb	r3, [r7, #15]
		break;
 800132a:	e002      	b.n	8001332 <calcVoltageMode+0x7e>
	  default :
		voltageMode = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	73fb      	strb	r3, [r7, #15]
	  break;
 8001330:	bf00      	nop
	}
	return voltageMode;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <calcRotDirFromVoltageMode>:

static void calcRotDirFromVoltageMode(uint8_t voltageMode_pre, uint8_t voltageMode, int8_t* rotDir){
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	603a      	str	r2, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	460b      	mov	r3, r1
 800134e:	71bb      	strb	r3, [r7, #6]
	int8_t voltageMode_Diff;

	voltageMode_Diff = (int8_t)voltageMode - (int8_t)voltageMode_pre;
 8001350:	79ba      	ldrb	r2, [r7, #6]
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	73fb      	strb	r3, [r7, #15]

	// Limit voltageMode_Diff minus1-prus1
	if(voltageMode_Diff > 1)
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	2b01      	cmp	r3, #1
 8001360:	dd04      	ble.n	800136c <calcRotDirFromVoltageMode+0x2c>
		voltageMode_Diff -= 6;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	3b06      	subs	r3, #6
 8001366:	b2db      	uxtb	r3, r3
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	e008      	b.n	800137e <calcRotDirFromVoltageMode+0x3e>
	else if(voltageMode_Diff < -1)
 800136c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001374:	da03      	bge.n	800137e <calcRotDirFromVoltageMode+0x3e>
		voltageMode_Diff += 6;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	3306      	adds	r3, #6
 800137a:	b2db      	uxtb	r3, r3
 800137c:	73fb      	strb	r3, [r7, #15]

	// if voltageMode changed, Calculate Rotation direction
	if(voltageMode_Diff != 0)
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <calcRotDirFromVoltageMode+0x4c>
		*rotDir = voltageMode_Diff;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	701a      	strb	r2, [r3, #0]

}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <calcElectAngleFromVoltageMode>:

static float calcElectAngleFromVoltageMode(uint8_t voltageMode, int8_t rotDir){
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	460a      	mov	r2, r1
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	4613      	mov	r3, r2
 80013a6:	71bb      	strb	r3, [r7, #6]
		// Calculate ElectAngle in consideration of rotation direction
		float electAngle;
		float electAngle_Center;

		// Calculate Center ElectAngle of the Area
		switch(voltageMode){
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	2b05      	cmp	r3, #5
 80013ae:	d822      	bhi.n	80013f6 <calcElectAngleFromVoltageMode+0x5e>
 80013b0:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <calcElectAngleFromVoltageMode+0x20>)
 80013b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b6:	bf00      	nop
 80013b8:	080013eb 	.word	0x080013eb
 80013bc:	080013f1 	.word	0x080013f1
 80013c0:	080013d1 	.word	0x080013d1
 80013c4:	080013d9 	.word	0x080013d9
 80013c8:	080013df 	.word	0x080013df
 80013cc:	080013e5 	.word	0x080013e5
		  case 3:
			  electAngle_Center = 0.0f;
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
			break;
 80013d6:	e012      	b.n	80013fe <calcElectAngleFromVoltageMode+0x66>
		  case 4:
			  electAngle_Center = PIDIV3;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <calcElectAngleFromVoltageMode+0x9c>)
 80013da:	60fb      	str	r3, [r7, #12]
			break;
 80013dc:	e00f      	b.n	80013fe <calcElectAngleFromVoltageMode+0x66>
		  case 5:
			  electAngle_Center = PIDIV3 * 2.0f;
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <calcElectAngleFromVoltageMode+0xa0>)
 80013e0:	60fb      	str	r3, [r7, #12]
			break;
 80013e2:	e00c      	b.n	80013fe <calcElectAngleFromVoltageMode+0x66>
		  case 6:
			  electAngle_Center = PI;
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <calcElectAngleFromVoltageMode+0xa4>)
 80013e6:	60fb      	str	r3, [r7, #12]
			break;
 80013e8:	e009      	b.n	80013fe <calcElectAngleFromVoltageMode+0x66>
		  case 1:
			  electAngle_Center = -PIDIV3 * 2.0f;
 80013ea:	4b15      	ldr	r3, [pc, #84]	; (8001440 <calcElectAngleFromVoltageMode+0xa8>)
 80013ec:	60fb      	str	r3, [r7, #12]
			break;
 80013ee:	e006      	b.n	80013fe <calcElectAngleFromVoltageMode+0x66>
		  case 2:
			  electAngle_Center = -PIDIV3;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <calcElectAngleFromVoltageMode+0xac>)
 80013f2:	60fb      	str	r3, [r7, #12]
			break;
 80013f4:	e003      	b.n	80013fe <calcElectAngleFromVoltageMode+0x66>
		  default :
			  electAngle_Center = 0.0f;
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
		  break;
 80013fc:	bf00      	nop
		}

		electAngle = electAngle_Center - PIDIV6 * (float)rotDir;
 80013fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001402:	ee07 3a90 	vmov	s15, r3
 8001406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001448 <calcElectAngleFromVoltageMode+0xb0>
 800140e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001412:	ed97 7a03 	vldr	s14, [r7, #12]
 8001416:	ee77 7a67 	vsub.f32	s15, s14, s15
 800141a:	edc7 7a02 	vstr	s15, [r7, #8]

		return electAngle;
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	ee07 3a90 	vmov	s15, r3
}
 8001424:	eeb0 0a67 	vmov.f32	s0, s15
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	3f860a92 	.word	0x3f860a92
 8001438:	40060a92 	.word	0x40060a92
 800143c:	40490fdb 	.word	0x40490fdb
 8001440:	c0060a92 	.word	0xc0060a92
 8001444:	bf860a92 	.word	0xbf860a92
 8001448:	3f060a92 	.word	0x3f060a92

0800144c <VectorControlTasks>:
static inline void Vuvw2DutyforOpenWinding(float twoDivVdc, float *Vuvw, float *Duty);
static inline void CurrentFbControl(float *Igd_ref, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Vamp);
static inline float FluxObserver(float* Igd, float* Vgd, float electAngVelo, float* Egd);
static inline void calcElectAngleEstimate(uint8_t flgPLL, float electAngle, float electAngVelo, float *electAngleEstimate, float *electAngVeloEstimate);

void VectorControlTasks(float *Idq_ref, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 800144c:	b084      	sub	sp, #16
 800144e:	b590      	push	{r4, r7, lr}
 8001450:	b08b      	sub	sp, #44	; 0x2c
 8001452:	af06      	add	r7, sp, #24
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800145a:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	outputMode[0] = OUTPUTMODE_POSITIVE;
 800145e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001460:	2201      	movs	r2, #1
 8001462:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 8001464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001466:	3301      	adds	r3, #1
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 800146c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800146e:	3302      	adds	r3, #2
 8001470:	2201      	movs	r2, #1
 8001472:	701a      	strb	r2, [r3, #0]

	//calcElectAngleEstimate(flgPLL, electAngle, electAngVelo, &sElectAngleEstimate, &sElectAngVeloEstimate);

	//theta = sElectAngleEstimate;
	//omega = sElectAngVeloEstimate;
	theta = sensData.electAngle;
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	60fb      	str	r3, [r7, #12]
	omega = sensData.electAngVelo;
 8001478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147a:	60bb      	str	r3, [r7, #8]


	uvw2ab(sensData.Iuvw, sIab);
 800147c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001480:	3308      	adds	r3, #8
 8001482:	494a      	ldr	r1, [pc, #296]	; (80015ac <VectorControlTasks+0x160>)
 8001484:	4618      	mov	r0, r3
 8001486:	f000 f91b 	bl	80016c0 <uvw2ab>
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 800148a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800148e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001490:	4619      	mov	r1, r3
 8001492:	4846      	ldr	r0, [pc, #280]	; (80015ac <VectorControlTasks+0x160>)
 8001494:	eeb0 0a67 	vmov.f32	s0, s15
 8001498:	f000 f9b4 	bl	8001804 <ab2dq>

	gLPF(Idq_ref[1], 62.8f, CARRIERCYCLE, &sIq_ref_LPF);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3304      	adds	r3, #4
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	4842      	ldr	r0, [pc, #264]	; (80015b0 <VectorControlTasks+0x164>)
 80014a6:	ed9f 1a43 	vldr	s2, [pc, #268]	; 80015b4 <VectorControlTasks+0x168>
 80014aa:	eddf 0a43 	vldr	s1, [pc, #268]	; 80015b8 <VectorControlTasks+0x16c>
 80014ae:	eeb0 0a67 	vmov.f32	s0, s15
 80014b2:	f7ff f934 	bl	800071e <gLPF>
	Idq_ref[1] = sIq_ref_LPF; // zanteisyori
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3304      	adds	r3, #4
 80014ba:	4a3d      	ldr	r2, [pc, #244]	; (80015b0 <VectorControlTasks+0x164>)
 80014bc:	6812      	ldr	r2, [r2, #0]
 80014be:	601a      	str	r2, [r3, #0]
	CurrentFbControl(Idq_ref, sensData, vectorControlData, &sVamp);
 80014c0:	4b3e      	ldr	r3, [pc, #248]	; (80015bc <VectorControlTasks+0x170>)
 80014c2:	9305      	str	r3, [sp, #20]
 80014c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014c6:	9304      	str	r3, [sp, #16]
 80014c8:	466c      	mov	r4, sp
 80014ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 fb58 	bl	8001b90 <CurrentFbControl>
	sMod = calcModFromVamp(sVamp, sensData.twoDivVdc);
 80014e0:	4b36      	ldr	r3, [pc, #216]	; (80015bc <VectorControlTasks+0x170>)
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80014ea:	eef0 0a47 	vmov.f32	s1, s14
 80014ee:	eeb0 0a67 	vmov.f32	s0, s15
 80014f2:	f000 f9f1 	bl	80018d8 <calcModFromVamp>
 80014f6:	eef0 7a40 	vmov.f32	s15, s0
 80014fa:	4b31      	ldr	r3, [pc, #196]	; (80015c0 <VectorControlTasks+0x174>)
 80014fc:	edc3 7a00 	vstr	s15, [r3]
	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 8001500:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001506:	3308      	adds	r3, #8
 8001508:	492e      	ldr	r1, [pc, #184]	; (80015c4 <VectorControlTasks+0x178>)
 800150a:	4618      	mov	r0, r3
 800150c:	eeb0 0a67 	vmov.f32	s0, s15
 8001510:	f000 fa02 	bl	8001918 <dq2ab>
	ab2uvw(sVab, sVuvw);
 8001514:	492c      	ldr	r1, [pc, #176]	; (80015c8 <VectorControlTasks+0x17c>)
 8001516:	482b      	ldr	r0, [pc, #172]	; (80015c4 <VectorControlTasks+0x178>)
 8001518:	f000 f932 	bl	8001780 <ab2uvw>

	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 800151c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001520:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001522:	4829      	ldr	r0, [pc, #164]	; (80015c8 <VectorControlTasks+0x17c>)
 8001524:	eeb0 0a67 	vmov.f32	s0, s15
 8001528:	f000 fa36 	bl	8001998 <Vuvw2Duty>
	// for Debug
		writeDuty(Duty);
 800152c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800152e:	f7ff fd65 	bl	8000ffc <writeDuty>

	sIdq_ref_1000[0] = Idq_ref[0] * 1000.0f;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	edd3 7a00 	vldr	s15, [r3]
 8001538:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80015cc <VectorControlTasks+0x180>
 800153c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001540:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <VectorControlTasks+0x184>)
 8001542:	edc3 7a00 	vstr	s15, [r3]
	sIdq_ref_1000[1] = Idq_ref[1] * 1000.0f;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	3304      	adds	r3, #4
 800154a:	edd3 7a00 	vldr	s15, [r3]
 800154e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80015cc <VectorControlTasks+0x180>
 8001552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001556:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <VectorControlTasks+0x184>)
 8001558:	edc3 7a01 	vstr	s15, [r3, #4]
	sIdq_1000[0] = vectorControlData->Idq[0] * 1000.0f;
 800155c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80015cc <VectorControlTasks+0x180>
 8001566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <VectorControlTasks+0x188>)
 800156c:	edc3 7a00 	vstr	s15, [r3]
	sIdq_1000[1] = vectorControlData->Idq[1] * 1000.0f;
 8001570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001572:	edd3 7a01 	vldr	s15, [r3, #4]
 8001576:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80015cc <VectorControlTasks+0x180>
 800157a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <VectorControlTasks+0x188>)
 8001580:	edc3 7a01 	vstr	s15, [r3, #4]

	gLPF(vectorControlData->Idq[1], 125.6f, CARRIERCYCLE, &sIq_LPF);
 8001584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001586:	edd3 7a01 	vldr	s15, [r3, #4]
 800158a:	4813      	ldr	r0, [pc, #76]	; (80015d8 <VectorControlTasks+0x18c>)
 800158c:	ed9f 1a09 	vldr	s2, [pc, #36]	; 80015b4 <VectorControlTasks+0x168>
 8001590:	eddf 0a12 	vldr	s1, [pc, #72]	; 80015dc <VectorControlTasks+0x190>
 8001594:	eeb0 0a67 	vmov.f32	s0, s15
 8001598:	f7ff f8c1 	bl	800071e <gLPF>

}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80015a6:	b004      	add	sp, #16
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000148 	.word	0x20000148
 80015b0:	20000160 	.word	0x20000160
 80015b4:	3876b949 	.word	0x3876b949
 80015b8:	427b3333 	.word	0x427b3333
 80015bc:	20000188 	.word	0x20000188
 80015c0:	2000018c 	.word	0x2000018c
 80015c4:	20000174 	.word	0x20000174
 80015c8:	2000017c 	.word	0x2000017c
 80015cc:	447a0000 	.word	0x447a0000
 80015d0:	20000164 	.word	0x20000164
 80015d4:	2000016c 	.word	0x2000016c
 80015d8:	2000015c 	.word	0x2000015c
 80015dc:	42fb3333 	.word	0x42fb3333

080015e0 <OpenLoopTasks>:

void OpenLoopTasks(float VamRef, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Duty, int8_t* outputMode){
 80015e0:	b084      	sub	sp, #16
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	ed87 0a01 	vstr	s0, [r7, #4]
 80015ec:	f107 0c10 	add.w	ip, r7, #16
 80015f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	outputMode[0] = OUTPUTMODE_POSITIVE;
 80015f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f6:	2201      	movs	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 80015fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fc:	3301      	adds	r3, #1
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 8001602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001604:	3302      	adds	r3, #2
 8001606:	2201      	movs	r2, #1
 8001608:	701a      	strb	r2, [r3, #0]

	uvw2ab(sensData.Iuvw, sIab);
 800160a:	f107 0318 	add.w	r3, r7, #24
 800160e:	4926      	ldr	r1, [pc, #152]	; (80016a8 <OpenLoopTasks+0xc8>)
 8001610:	4618      	mov	r0, r3
 8001612:	f000 f855 	bl	80016c0 <uvw2ab>
	ab2dq(sensData.electAngle, sIab, vectorControlData->Idq);
 8001616:	edd7 7a04 	vldr	s15, [r7, #16]
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	4619      	mov	r1, r3
 800161e:	4822      	ldr	r0, [pc, #136]	; (80016a8 <OpenLoopTasks+0xc8>)
 8001620:	eeb0 0a67 	vmov.f32	s0, s15
 8001624:	f000 f8ee 	bl	8001804 <ab2dq>
	vectorControlData->Vdq[0] = 0.0f;
 8001628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
	//vectorControlData.Vdq[1] = VamRef;
	vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0];
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001636:	611a      	str	r2, [r3, #16]
	vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1];
 8001638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163a:	68da      	ldr	r2, [r3, #12]
 800163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163e:	615a      	str	r2, [r3, #20]

	dq2ab(sensData.electAngle, vectorControlData->Vdq, sVab);
 8001640:	edd7 7a04 	vldr	s15, [r7, #16]
 8001644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001646:	3308      	adds	r3, #8
 8001648:	4918      	ldr	r1, [pc, #96]	; (80016ac <OpenLoopTasks+0xcc>)
 800164a:	4618      	mov	r0, r3
 800164c:	eeb0 0a67 	vmov.f32	s0, s15
 8001650:	f000 f962 	bl	8001918 <dq2ab>
	ab2uvw(sVab, sVuvw);
 8001654:	4916      	ldr	r1, [pc, #88]	; (80016b0 <OpenLoopTasks+0xd0>)
 8001656:	4815      	ldr	r0, [pc, #84]	; (80016ac <OpenLoopTasks+0xcc>)
 8001658:	f000 f892 	bl	8001780 <ab2uvw>
	Vuvw2Duty(sensData.twoDivVdc, sVuvw, Duty);
 800165c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001660:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001662:	4813      	ldr	r0, [pc, #76]	; (80016b0 <OpenLoopTasks+0xd0>)
 8001664:	eeb0 0a67 	vmov.f32	s0, s15
 8001668:	f000 f996 	bl	8001998 <Vuvw2Duty>
	// for Debug
	writeDuty(Duty);
 800166c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800166e:	f7ff fcc5 	bl	8000ffc <writeDuty>


	sIdq_1000[0] = sIdq[0] * 1000.0f;
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <OpenLoopTasks+0xd4>)
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80016b8 <OpenLoopTasks+0xd8>
 800167c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <OpenLoopTasks+0xdc>)
 8001682:	edc3 7a00 	vstr	s15, [r3]
	sIdq_1000[1] = sIdq[1] * 1000.0f;
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <OpenLoopTasks+0xd4>)
 8001688:	edd3 7a01 	vldr	s15, [r3, #4]
 800168c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80016b8 <OpenLoopTasks+0xd8>
 8001690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <OpenLoopTasks+0xdc>)
 8001696:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016a4:	b004      	add	sp, #16
 80016a6:	4770      	bx	lr
 80016a8:	20000148 	.word	0x20000148
 80016ac:	20000174 	.word	0x20000174
 80016b0:	2000017c 	.word	0x2000017c
 80016b4:	20000154 	.word	0x20000154
 80016b8:	447a0000 	.word	0x447a0000
 80016bc:	2000016c 	.word	0x2000016c

080016c0 <uvw2ab>:

static void uvw2ab(float* uvw, float* ab){
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	ed93 7a00 	vldr	s14, [r3]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3304      	adds	r3, #4
 80016d4:	edd3 7a00 	vldr	s15, [r3]
 80016d8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80016dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3308      	adds	r3, #8
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80016f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001774 <uvw2ab+0xb4>
 80016fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	3304      	adds	r3, #4
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001778 <uvw2ab+0xb8>
 8001712:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3308      	adds	r3, #8
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001778 <uvw2ab+0xb8>
 8001722:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001726:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	3304      	adds	r3, #4
 800172e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001774 <uvw2ab+0xb4>
 8001732:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001736:	edc3 7a00 	vstr	s15, [r3]
	ab[2] = SQRT_1DIV3 * ( uvw[0] + uvw[1] + uvw[2] );
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	ed93 7a00 	vldr	s14, [r3]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3304      	adds	r3, #4
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ee37 7a27 	vadd.f32	s14, s14, s15
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3308      	adds	r3, #8
 8001750:	edd3 7a00 	vldr	s15, [r3]
 8001754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	3308      	adds	r3, #8
 800175c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800177c <uvw2ab+0xbc>
 8001760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001764:	edc3 7a00 	vstr	s15, [r3]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	3f5105ec 	.word	0x3f5105ec
 8001778:	3f5db3d7 	.word	0x3f5db3d7
 800177c:	3f13cd3a 	.word	0x3f13cd3a

08001780 <ab2uvw>:

static void ab2uvw(float* ab, float* uvw){
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
	uvw[0] = SQRT_2DIV3 * ab[0];
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80017fc <ab2uvw+0x7c>
 8001794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	edc3 7a00 	vstr	s15, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	edd3 7a00 	vldr	s15, [r3]
 80017a4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80017a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3304      	adds	r3, #4
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8001800 <ab2uvw+0x80>
 80017b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	3304      	adds	r3, #4
 80017c4:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80017fc <ab2uvw+0x7c>
 80017c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017cc:	edc3 7a00 	vstr	s15, [r3]
	uvw[2] = - uvw[0] - uvw[1];
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	edd3 7a00 	vldr	s15, [r3]
 80017d6:	eeb1 7a67 	vneg.f32	s14, s15
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	3304      	adds	r3, #4
 80017de:	edd3 7a00 	vldr	s15, [r3]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	3308      	adds	r3, #8
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ea:	edc3 7a00 	vstr	s15, [r3]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	3f5105ec 	.word	0x3f5105ec
 8001800:	3f5db3d7 	.word	0x3f5db3d7

08001804 <ab2dq>:

static void ab2dq(float theta, float* ab, float* dq){
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	ed87 0a03 	vstr	s0, [r7, #12]
 800180e:	60b8      	str	r0, [r7, #8]
 8001810:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8001812:	ed97 0a03 	vldr	s0, [r7, #12]
 8001816:	f008 fc55 	bl	800a0c4 <sinf>
 800181a:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 800181e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001822:	f008 fc0b 	bl	800a03c <cosf>
 8001826:	ed87 0a04 	vstr	s0, [r7, #16]
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	ed93 7a00 	vldr	s14, [r3]
 8001830:	edd7 7a04 	vldr	s15, [r7, #16]
 8001834:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	3304      	adds	r3, #4
 800183c:	edd3 6a00 	vldr	s13, [r3]
 8001840:	edd7 7a05 	vldr	s15, [r7, #20]
 8001844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	edc3 7a00 	vstr	s15, [r3]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	eeb1 7a67 	vneg.f32	s14, s15
 800185c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001860:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	3304      	adds	r3, #4
 8001868:	edd3 6a00 	vldr	s13, [r3]
 800186c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3304      	adds	r3, #4
 8001878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187c:	edc3 7a00 	vstr	s15, [r3]
}
 8001880:	bf00      	nop
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <calcAmpFromVect>:

static float calcAmpFromVect(float* Vect){
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	float amp;
	float sumOfSquares;

	sumOfSquares = Vect[0] * Vect[0] + Vect[1] * Vect[1];
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	ed93 7a00 	vldr	s14, [r3]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	edd3 7a00 	vldr	s15, [r3]
 800189c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3304      	adds	r3, #4
 80018a4:	edd3 6a00 	vldr	s13, [r3]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3304      	adds	r3, #4
 80018ac:	edd3 7a00 	vldr	s15, [r3]
 80018b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b8:	edc7 7a03 	vstr	s15, [r7, #12]
	amp = sqrtf(sumOfSquares);
 80018bc:	ed97 0a03 	vldr	s0, [r7, #12]
 80018c0:	f008 fc68 	bl	800a194 <sqrtf>
 80018c4:	ed87 0a02 	vstr	s0, [r7, #8]
	return amp;
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	ee07 3a90 	vmov	s15, r3
}
 80018ce:	eeb0 0a67 	vmov.f32	s0, s15
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <calcModFromVamp>:

static float calcModFromVamp(float Vamp, float twoDivVdc){
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	ed87 0a01 	vstr	s0, [r7, #4]
 80018e2:	edc7 0a00 	vstr	s1, [r7]
	float mod;

	mod = Vamp * twoDivVdc * SQRT_2DIV3;
 80018e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80018ea:	edd7 7a00 	vldr	s15, [r7]
 80018ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001914 <calcModFromVamp+0x3c>
 80018f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018fa:	edc7 7a03 	vstr	s15, [r7, #12]
	return mod;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	ee07 3a90 	vmov	s15, r3
}
 8001904:	eeb0 0a67 	vmov.f32	s0, s15
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	3f5105ec 	.word	0x3f5105ec

08001918 <dq2ab>:

static void dq2ab(float theta, float* dq, float* ab){
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001922:	60b8      	str	r0, [r7, #8]
 8001924:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8001926:	ed97 0a03 	vldr	s0, [r7, #12]
 800192a:	f008 fbcb 	bl	800a0c4 <sinf>
 800192e:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8001932:	ed97 0a03 	vldr	s0, [r7, #12]
 8001936:	f008 fb81 	bl	800a03c <cosf>
 800193a:	ed87 0a04 	vstr	s0, [r7, #16]
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	ed93 7a00 	vldr	s14, [r3]
 8001944:	edd7 7a04 	vldr	s15, [r7, #16]
 8001948:	ee27 7a27 	vmul.f32	s14, s14, s15
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	3304      	adds	r3, #4
 8001950:	edd3 6a00 	vldr	s13, [r3]
 8001954:	edd7 7a05 	vldr	s15, [r7, #20]
 8001958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	ed93 7a00 	vldr	s14, [r3]
 800196c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001970:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	3304      	adds	r3, #4
 8001978:	edd3 6a00 	vldr	s13, [r3]
 800197c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3304      	adds	r3, #4
 8001988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800198c:	edc3 7a00 	vstr	s15, [r3]
}
 8001990:	bf00      	nop
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <Vuvw2Duty>:

static void Vuvw2Duty(float twoDivVdc, float* Vuvw, float* Duty){
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b089      	sub	sp, #36	; 0x24
 800199c:	af00      	add	r7, sp, #0
 800199e:	ed87 0a03 	vstr	s0, [r7, #12]
 80019a2:	60b8      	str	r0, [r7, #8]
 80019a4:	6079      	str	r1, [r7, #4]
	float max;
	float min;
	float vo;

	// third-harmonic injection
	max = Vuvw[0];
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	61fb      	str	r3, [r7, #28]
	if(Vuvw[1] > max)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	3304      	adds	r3, #4
 80019b0:	edd3 7a00 	vldr	s15, [r3]
 80019b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80019b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c0:	d502      	bpl.n	80019c8 <Vuvw2Duty+0x30>
		max = Vuvw[1];
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	61fb      	str	r3, [r7, #28]
	if(Vuvw[2] > max)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	3308      	adds	r3, #8
 80019cc:	edd3 7a00 	vldr	s15, [r3]
 80019d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80019d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019dc:	d502      	bpl.n	80019e4 <Vuvw2Duty+0x4c>
		max = Vuvw[2];
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	61fb      	str	r3, [r7, #28]

	min = Vuvw[0];
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	61bb      	str	r3, [r7, #24]
	if(Vuvw[1] < min)
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	3304      	adds	r3, #4
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	ed97 7a06 	vldr	s14, [r7, #24]
 80019f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fe:	dd02      	ble.n	8001a06 <Vuvw2Duty+0x6e>
		min = Vuvw[1];
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	61bb      	str	r3, [r7, #24]
	if(Vuvw[2] < min)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3308      	adds	r3, #8
 8001a0a:	edd3 7a00 	vldr	s15, [r3]
 8001a0e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1a:	dd02      	ble.n	8001a22 <Vuvw2Duty+0x8a>
		min = Vuvw[2];
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	61bb      	str	r3, [r7, #24]

	vo = (max + min) * 0.5f;
 8001a22:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a26:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a36:	edc7 7a05 	vstr	s15, [r7, #20]

	Vuvw[0] = Vuvw[0] - vo;
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	ed93 7a00 	vldr	s14, [r3]
 8001a40:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	edc3 7a00 	vstr	s15, [r3]
	Vuvw[1] = Vuvw[1] - vo;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	3304      	adds	r3, #4
 8001a52:	ed93 7a00 	vldr	s14, [r3]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a62:	edc3 7a00 	vstr	s15, [r3]
	Vuvw[2] = Vuvw[2] - vo;
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	3308      	adds	r3, #8
 8001a6a:	ed93 7a00 	vldr	s14, [r3]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	3308      	adds	r3, #8
 8001a72:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a7a:	edc3 7a00 	vstr	s15, [r3]



	Duty[0] = (Vuvw[0] * twoDivVdc);
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	ed93 7a00 	vldr	s14, [r3]
 8001a84:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (Vuvw[1] * twoDivVdc);
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3304      	adds	r3, #4
 8001a96:	ed93 7a00 	vldr	s14, [r3]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa6:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = (Vuvw[2] * twoDivVdc);//-Duty[0] - Duty[1];
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	3308      	adds	r3, #8
 8001aae:	ed93 7a00 	vldr	s14, [r3]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3308      	adds	r3, #8
 8001ab6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abe:	edc3 7a00 	vstr	s15, [r3]

	Duty[0] = gUpperLowerLimit(Duty[0], DUTYUPPER, DUTYLOWER);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001acc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad4:	f7fe fdd6 	bl	8000684 <gUpperLowerLimit>
 8001ad8:	eef0 7a40 	vmov.f32	s15, s0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = gUpperLowerLimit(Duty[1], DUTYUPPER, DUTYLOWER);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	edd3 7a00 	vldr	s15, [r3]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	1d1c      	adds	r4, r3, #4
 8001aee:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001af2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001af6:	eeb0 0a67 	vmov.f32	s0, s15
 8001afa:	f7fe fdc3 	bl	8000684 <gUpperLowerLimit>
 8001afe:	eef0 7a40 	vmov.f32	s15, s0
 8001b02:	edc4 7a00 	vstr	s15, [r4]
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3308      	adds	r3, #8
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f103 0408 	add.w	r4, r3, #8
 8001b14:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8001b18:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b20:	f7fe fdb0 	bl	8000684 <gUpperLowerLimit>
 8001b24:	eef0 7a40 	vmov.f32	s15, s0
 8001b28:	edc4 7a00 	vstr	s15, [r4]

	//50% CENTER
	Duty[0] = Duty[0] * 0.5f + 0.5f;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	edd3 7a00 	vldr	s15, [r3]
 8001b32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = Duty[1] * 0.5f + 0.5f;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b64:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = Duty[2] * 0.5f + 0.5f;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3308      	adds	r3, #8
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3308      	adds	r3, #8
 8001b7c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001b80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b84:	edc3 7a00 	vstr	s15, [r3]

}
 8001b88:	bf00      	nop
 8001b8a:	3724      	adds	r7, #36	; 0x24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}

08001b90 <CurrentFbControl>:
	Duty[2] = gUpperLowerLimit(Duty[2], DUTYUPPER, DUTYLOWER);

}


static void CurrentFbControl(float *Igd_ref, struct SensorData sensData, struct VectorControlData *vectorControlData, float* Vamp){
 8001b90:	b084      	sub	sp, #16
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b08a      	sub	sp, #40	; 0x28
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001b9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	float Kid;
	float VampLimit;
	float Vphase;
	float wc;

	wc = 10.0f * TWOPI;
 8001ba2:	4b5e      	ldr	r3, [pc, #376]	; (8001d1c <CurrentFbControl+0x18c>)
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24

	Kp = La * wc;
 8001ba6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001baa:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001d20 <CurrentFbControl+0x190>
 8001bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb2:	edc7 7a08 	vstr	s15, [r7, #32]
	Kig = Ra * wc * CARRIERCYCLE;
 8001bb6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bba:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001d24 <CurrentFbControl+0x194>
 8001bbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bc2:	eddf 6a59 	vldr	s13, [pc, #356]	; 8001d28 <CurrentFbControl+0x198>
 8001bc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bca:	edc7 7a07 	vstr	s15, [r7, #28]
	Kid = Kig;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	61bb      	str	r3, [r7, #24]

	Ierr[0] = Igd_ref[0] - vectorControlData->Idq[0];
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	ed93 7a00 	vldr	s14, [r3]
 8001bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bda:	edd3 7a00 	vldr	s15, [r3]
 8001bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be2:	edc7 7a02 	vstr	s15, [r7, #8]
	Ierr[1] = Igd_ref[1] - vectorControlData->Idq[1];
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3304      	adds	r3, #4
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bf0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf8:	edc7 7a03 	vstr	s15, [r7, #12]

	vectorControlData->Vdq_i[0] += Kig * Ierr[0];
 8001bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bfe:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c02:	edd7 6a02 	vldr	s13, [r7, #8]
 8001c06:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c14:	edc3 7a04 	vstr	s15, [r3, #16]
	vectorControlData->Vdq_i[1] += Kid * Ierr[1];
 8001c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c1a:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c1e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001c22:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c30:	edc3 7a05 	vstr	s15, [r3, #20]

	vectorControlData->Vdq[0] = Kp * Ierr[0] + vectorControlData->Vdq_i[0];
 8001c34:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c38:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c42:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c4c:	edc3 7a02 	vstr	s15, [r3, #8]
	vectorControlData->Vdq[1] = Kp * Ierr[1] + vectorControlData->Vdq_i[1];// + Ke * electAngVelo;// + Vgd[1] + Kid * Ierr[1] + ;
 8001c50:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c54:	edd7 7a08 	vldr	s15, [r7, #32]
 8001c58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c5e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c68:	edc3 7a03 	vstr	s15, [r3, #12]

	Vphase = atan2f(vectorControlData->Vdq[1], vectorControlData->Vdq[0]);
 8001c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c74:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c78:	eef0 0a47 	vmov.f32	s1, s14
 8001c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c80:	f008 fa66 	bl	800a150 <atan2f>
 8001c84:	ed87 0a05 	vstr	s0, [r7, #20]

	*Vamp = calcAmpFromVect(vectorControlData->Vdq);
 8001c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c8a:	3308      	adds	r3, #8
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fdfb 	bl	8001888 <calcAmpFromVect>
 8001c92:	eef0 7a40 	vmov.f32	s15, s0
 8001c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c98:	edc3 7a00 	vstr	s15, [r3]

	VampLimit = sensData.Vdc * SQRT3DIV2_DIV2 * 1.15f;
 8001c9c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ca0:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001d2c <CurrentFbControl+0x19c>
 8001ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001d30 <CurrentFbControl+0x1a0>
 8001cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cb0:	edc7 7a04 	vstr	s15, [r7, #16]
	if( *Vamp > VampLimit ){
 8001cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc6:	d400      	bmi.n	8001cca <CurrentFbControl+0x13a>
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0];
		vectorControlData->Vdq[1] = VampLimit * sinf(Vphase);
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1];// -  Ke * sensData.electAngVelo;

	}
}
 8001cc8:	e021      	b.n	8001d0e <CurrentFbControl+0x17e>
		vectorControlData->Vdq[0] = VampLimit * cosf(Vphase);
 8001cca:	ed97 0a05 	vldr	s0, [r7, #20]
 8001cce:	f008 f9b5 	bl	800a03c <cosf>
 8001cd2:	eeb0 7a40 	vmov.f32	s14, s0
 8001cd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce0:	edc3 7a02 	vstr	s15, [r3, #8]
		vectorControlData->Vdq_i[0] = vectorControlData->Vdq[0];
 8001ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cea:	611a      	str	r2, [r3, #16]
		vectorControlData->Vdq[1] = VampLimit * sinf(Vphase);
 8001cec:	ed97 0a05 	vldr	s0, [r7, #20]
 8001cf0:	f008 f9e8 	bl	800a0c4 <sinf>
 8001cf4:	eeb0 7a40 	vmov.f32	s14, s0
 8001cf8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d02:	edc3 7a03 	vstr	s15, [r3, #12]
		vectorControlData->Vdq_i[1] = vectorControlData->Vdq[1];// -  Ke * sensData.electAngVelo;
 8001d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d0c:	615a      	str	r2, [r3, #20]
}
 8001d0e:	bf00      	nop
 8001d10:	3728      	adds	r7, #40	; 0x28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d18:	b004      	add	sp, #16
 8001d1a:	4770      	bx	lr
 8001d1c:	427b53d2 	.word	0x427b53d2
 8001d20:	39fba882 	.word	0x39fba882
 8001d24:	3fd71dc9 	.word	0x3fd71dc9
 8001d28:	4684d000 	.word	0x4684d000
 8001d2c:	3f1cc471 	.word	0x3f1cc471
 8001d30:	3f933333 	.word	0x3f933333

08001d34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d3a:	f000 ffcc 	bl	8002cd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d3e:	f000 f8a3 	bl	8001e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d42:	f000 fbd9 	bl	80024f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d46:	f000 fba5 	bl	8002494 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001d4a:	f000 f9ff 	bl	800214c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001d4e:	f000 f8e7 	bl	8001f20 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001d52:	f000 fa45 	bl	80021e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d56:	f000 fafd 	bl	8002354 <MX_TIM2_Init>
  MX_DAC1_Init();
 8001d5a:	f000 f9bd 	bl	80020d8 <MX_DAC1_Init>
  MX_TIM7_Init();
 8001d5e:	f000 fb63 	bl	8002428 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001d62:	4841      	ldr	r0, [pc, #260]	; (8001e68 <main+0x134>)
 8001d64:	f005 fe80 	bl	8007a68 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8001d68:	4840      	ldr	r0, [pc, #256]	; (8001e6c <main+0x138>)
 8001d6a:	f002 fe5d 	bl	8004a28 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d74:	483e      	ldr	r0, [pc, #248]	; (8001e70 <main+0x13c>)
 8001d76:	f004 fd23 	bl	80067c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d80:	483b      	ldr	r0, [pc, #236]	; (8001e70 <main+0x13c>)
 8001d82:	f004 fd1d 	bl	80067c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8001d86:	2201      	movs	r2, #1
 8001d88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d8c:	4838      	ldr	r0, [pc, #224]	; (8001e70 <main+0x13c>)
 8001d8e:	f004 fd17 	bl	80067c0 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d92:	2100      	movs	r1, #0
 8001d94:	4834      	ldr	r0, [pc, #208]	; (8001e68 <main+0x134>)
 8001d96:	f005 ff37 	bl	8007c08 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4832      	ldr	r0, [pc, #200]	; (8001e68 <main+0x134>)
 8001d9e:	f007 f8e7 	bl	8008f70 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001da2:	2104      	movs	r1, #4
 8001da4:	4830      	ldr	r0, [pc, #192]	; (8001e68 <main+0x134>)
 8001da6:	f005 ff2f 	bl	8007c08 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8001daa:	2104      	movs	r1, #4
 8001dac:	482e      	ldr	r0, [pc, #184]	; (8001e68 <main+0x134>)
 8001dae:	f007 f8df 	bl	8008f70 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001db2:	2108      	movs	r1, #8
 8001db4:	482c      	ldr	r0, [pc, #176]	; (8001e68 <main+0x134>)
 8001db6:	f005 ff27 	bl	8007c08 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001dba:	2108      	movs	r1, #8
 8001dbc:	482a      	ldr	r0, [pc, #168]	; (8001e68 <main+0x134>)
 8001dbe:	f007 f8d7 	bl	8008f70 <HAL_TIMEx_PWMN_Start>

  // Set Duty Output Delay to Constant
  // https://digitalservo.jp/blogs/posts/2022/12/stm32-pwm-setting/
  TIM1 -> RCR = 1;
 8001dc2:	4b2c      	ldr	r3, [pc, #176]	; (8001e74 <main+0x140>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
  TIM1 -> EGR  |= TIM_EGR_UG;
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <main+0x140>)
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	4a29      	ldr	r2, [pc, #164]	; (8001e74 <main+0x140>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6153      	str	r3, [r2, #20]
  TIM1 -> CNT = TIM1 -> ARR;
 8001dd4:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <main+0x140>)
 8001dd6:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <main+0x140>)
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	6253      	str	r3, [r2, #36]	; 0x24
  TIM1 -> CR1 &= ~(TIM_CR1_CMS);
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <main+0x140>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <main+0x140>)
 8001de2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001de6:	6013      	str	r3, [r2, #0]
  TIM1 -> CR1 |= TIM_CR1_DIR;
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <main+0x140>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a21      	ldr	r2, [pc, #132]	; (8001e74 <main+0x140>)
 8001dee:	f043 0310 	orr.w	r3, r3, #16
 8001df2:	6013      	str	r3, [r2, #0]
  TIM1 -> CR1 |= TIM_CR1_CMS;
 8001df4:	4b1f      	ldr	r3, [pc, #124]	; (8001e74 <main+0x140>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1e      	ldr	r2, [pc, #120]	; (8001e74 <main+0x140>)
 8001dfa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dfe:	6013      	str	r3, [r2, #0]

  TIM1 -> CCR4 = (TIM1 -> ARR) - 40;//for Carrier Top Interrupt
 8001e00:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <main+0x140>)
 8001e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e04:	4a1b      	ldr	r2, [pc, #108]	; (8001e74 <main+0x140>)
 8001e06:	3b28      	subs	r3, #40	; 0x28
 8001e08:	6413      	str	r3, [r2, #64]	; 0x40

  // Start TIM2 Input Capture
  HAL_TIM_Base_Start_IT(&htim2);
 8001e0a:	481b      	ldr	r0, [pc, #108]	; (8001e78 <main+0x144>)
 8001e0c:	f005 fe2c 	bl	8007a68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001e10:	2100      	movs	r1, #0
 8001e12:	4819      	ldr	r0, [pc, #100]	; (8001e78 <main+0x144>)
 8001e14:	f006 f862 	bl	8007edc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001e18:	2104      	movs	r1, #4
 8001e1a:	4817      	ldr	r0, [pc, #92]	; (8001e78 <main+0x144>)
 8001e1c:	f006 f85e 	bl	8007edc <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001e20:	2108      	movs	r1, #8
 8001e22:	4815      	ldr	r0, [pc, #84]	; (8001e78 <main+0x144>)
 8001e24:	f006 f85a 	bl	8007edc <HAL_TIM_IC_Start_IT>

  // Start TIM7 for DAC
  HAL_TIM_Base_Start(&htim7);
 8001e28:	4814      	ldr	r0, [pc, #80]	; (8001e7c <main+0x148>)
 8001e2a:	f005 fdad 	bl	8007988 <HAL_TIM_Base_Start>
  HAL_TIM_GenerateEvent(&htim7, TIM_EVENTSOURCE_UPDATE);
 8001e2e:	2101      	movs	r1, #1
 8001e30:	4812      	ldr	r0, [pc, #72]	; (8001e7c <main+0x148>)
 8001e32:	f006 fb53 	bl	80084dc <HAL_TIM_GenerateEvent>

  // Start DMA (This function needs to be called after Starting TIM1 & TIM2)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gAdcValue, 2);
 8001e36:	2202      	movs	r2, #2
 8001e38:	4911      	ldr	r1, [pc, #68]	; (8001e80 <main+0x14c>)
 8001e3a:	480c      	ldr	r0, [pc, #48]	; (8001e6c <main+0x138>)
 8001e3c:	f001 fbe4 	bl	8003608 <HAL_ADC_Start_DMA>
  uint16_t data = 2048;
 8001e40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e44:	80fb      	strh	r3, [r7, #6]
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001e46:	2100      	movs	r1, #0
 8001e48:	480e      	ldr	r0, [pc, #56]	; (8001e84 <main+0x150>)
 8001e4a:	f003 fe8a 	bl	8005b62 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	2200      	movs	r2, #0
 8001e52:	2100      	movs	r1, #0
 8001e54:	480b      	ldr	r0, [pc, #44]	; (8001e84 <main+0x150>)
 8001e56:	f003 fed7 	bl	8005c08 <HAL_DAC_SetValue>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4808      	ldr	r0, [pc, #32]	; (8001e84 <main+0x150>)
 8001e62:	f003 fed1 	bl	8005c08 <HAL_DAC_SetValue>
 8001e66:	e7f8      	b.n	8001e5a <main+0x126>
 8001e68:	20000360 	.word	0x20000360
 8001e6c:	20000190 	.word	0x20000190
 8001e70:	48000800 	.word	0x48000800
 8001e74:	40012c00 	.word	0x40012c00
 8001e78:	200003ac 	.word	0x200003ac
 8001e7c:	200003f8 	.word	0x200003f8
 8001e80:	2000008c 	.word	0x2000008c
 8001e84:	2000025c 	.word	0x2000025c

08001e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b094      	sub	sp, #80	; 0x50
 8001e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8e:	f107 0318 	add.w	r3, r7, #24
 8001e92:	2238      	movs	r2, #56	; 0x38
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f008 f8c8 	bl	800a02c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f004 fcde 	bl	800686c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eba:	2340      	movs	r3, #64	; 0x40
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001eca:	2355      	movs	r3, #85	; 0x55
 8001ecc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eda:	f107 0318 	add.w	r3, r7, #24
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 fd78 	bl	80069d4 <HAL_RCC_OscConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001eea:	f000 fb89 	bl	8002600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eee:	230f      	movs	r3, #15
 8001ef0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	2104      	movs	r1, #4
 8001f06:	4618      	mov	r0, r3
 8001f08:	f005 f87c 	bl	8007004 <HAL_RCC_ClockConfig>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001f12:	f000 fb75 	bl	8002600 <Error_Handler>
  }
}
 8001f16:	bf00      	nop
 8001f18:	3750      	adds	r7, #80	; 0x50
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b09a      	sub	sp, #104	; 0x68
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001f26:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f36:	2220      	movs	r2, #32
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f008 f876 	bl	800a02c <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001f40:	463b      	mov	r3, r7
 8001f42:	223c      	movs	r2, #60	; 0x3c
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f008 f870 	bl	800a02c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f4c:	4b5c      	ldr	r3, [pc, #368]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001f4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f54:	4b5a      	ldr	r3, [pc, #360]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001f56:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f5c:	4b58      	ldr	r3, [pc, #352]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f62:	4b57      	ldr	r3, [pc, #348]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001f68:	4b55      	ldr	r3, [pc, #340]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f6e:	4b54      	ldr	r3, [pc, #336]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f74:	4b52      	ldr	r3, [pc, #328]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001f76:	2204      	movs	r2, #4
 8001f78:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f7a:	4b51      	ldr	r3, [pc, #324]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f80:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8001f86:	4b4e      	ldr	r3, [pc, #312]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001f88:	2202      	movs	r2, #2
 8001f8a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f8c:	4b4c      	ldr	r3, [pc, #304]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f94:	4b4a      	ldr	r3, [pc, #296]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f9a:	4b49      	ldr	r3, [pc, #292]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001fa0:	4b47      	ldr	r3, [pc, #284]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fa8:	4b45      	ldr	r3, [pc, #276]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001fae:	4b44      	ldr	r3, [pc, #272]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001fb6:	4842      	ldr	r0, [pc, #264]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001fb8:	f001 f964 	bl	8003284 <HAL_ADC_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001fc2:	f000 fb1d 	bl	8002600 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001fca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fce:	4619      	mov	r1, r3
 8001fd0:	483b      	ldr	r0, [pc, #236]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8001fd2:	f003 fb8d 	bl	80056f0 <HAL_ADCEx_MultiModeConfigChannel>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001fdc:	f000 fb10 	bl	8002600 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001fe0:	4b38      	ldr	r3, [pc, #224]	; (80020c4 <MX_ADC1_Init+0x1a4>)
 8001fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001fe4:	2306      	movs	r3, #6
 8001fe6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001fec:	237f      	movs	r3, #127	; 0x7f
 8001fee:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ff8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4830      	ldr	r0, [pc, #192]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 8002000:	f001 fe5e 	bl	8003cc0 <HAL_ADC_ConfigChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800200a:	f000 faf9 	bl	8002600 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800200e:	4b2e      	ldr	r3, [pc, #184]	; (80020c8 <MX_ADC1_Init+0x1a8>)
 8002010:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002012:	230c      	movs	r3, #12
 8002014:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002016:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800201a:	4619      	mov	r1, r3
 800201c:	4828      	ldr	r0, [pc, #160]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 800201e:	f001 fe4f 	bl	8003cc0 <HAL_ADC_ConfigChannel>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8002028:	f000 faea 	bl	8002600 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800202c:	4b27      	ldr	r3, [pc, #156]	; (80020cc <MX_ADC1_Init+0x1ac>)
 800202e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002030:	2309      	movs	r3, #9
 8002032:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8002038:	237f      	movs	r3, #127	; 0x7f
 800203a:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800203c:	2304      	movs	r3, #4
 800203e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8002044:	2303      	movs	r3, #3
 8002046:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 800204e:	2300      	movs	r3, #0
 8002050:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002068:	463b      	mov	r3, r7
 800206a:	4619      	mov	r1, r3
 800206c:	4814      	ldr	r0, [pc, #80]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 800206e:	f002 fe13 	bl	8004c98 <HAL_ADCEx_InjectedConfigChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8002078:	f000 fac2 	bl	8002600 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <MX_ADC1_Init+0x1b0>)
 800207e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002080:	f240 130f 	movw	r3, #271	; 0x10f
 8002084:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002086:	463b      	mov	r3, r7
 8002088:	4619      	mov	r1, r3
 800208a:	480d      	ldr	r0, [pc, #52]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 800208c:	f002 fe04 	bl	8004c98 <HAL_ADCEx_InjectedConfigChannel>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8002096:	f000 fab3 	bl	8002600 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <MX_ADC1_Init+0x1b4>)
 800209c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800209e:	f240 2315 	movw	r3, #533	; 0x215
 80020a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80020a4:	463b      	mov	r3, r7
 80020a6:	4619      	mov	r1, r3
 80020a8:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_ADC1_Init+0x1a0>)
 80020aa:	f002 fdf5 	bl	8004c98 <HAL_ADCEx_InjectedConfigChannel>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_ADC1_Init+0x198>
  {
    Error_Handler();
 80020b4:	f000 faa4 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80020b8:	bf00      	nop
 80020ba:	3768      	adds	r7, #104	; 0x68
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000190 	.word	0x20000190
 80020c4:	08600004 	.word	0x08600004
 80020c8:	32601000 	.word	0x32601000
 80020cc:	04300002 	.word	0x04300002
 80020d0:	1d500080 	.word	0x1d500080
 80020d4:	19200040 	.word	0x19200040

080020d8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08c      	sub	sp, #48	; 0x30
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80020de:	463b      	mov	r3, r7
 80020e0:	2230      	movs	r2, #48	; 0x30
 80020e2:	2100      	movs	r1, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	f007 ffa1 	bl	800a02c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <MX_DAC1_Init+0x6c>)
 80020ec:	4a16      	ldr	r2, [pc, #88]	; (8002148 <MX_DAC1_Init+0x70>)
 80020ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80020f0:	4814      	ldr	r0, [pc, #80]	; (8002144 <MX_DAC1_Init+0x6c>)
 80020f2:	f003 fd14 	bl	8005b1e <HAL_DAC_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80020fc:	f000 fa80 	bl	8002600 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8002100:	2302      	movs	r3, #2
 8002102:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002104:	2300      	movs	r3, #0
 8002106:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800210c:	2300      	movs	r3, #0
 800210e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8002110:	2302      	movs	r3, #2
 8002112:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800211c:	2301      	movs	r3, #1
 800211e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002124:	463b      	mov	r3, r7
 8002126:	2200      	movs	r2, #0
 8002128:	4619      	mov	r1, r3
 800212a:	4806      	ldr	r0, [pc, #24]	; (8002144 <MX_DAC1_Init+0x6c>)
 800212c:	f003 fd94 	bl	8005c58 <HAL_DAC_ConfigChannel>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8002136:	f000 fa63 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	3730      	adds	r7, #48	; 0x30
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	2000025c 	.word	0x2000025c
 8002148:	50000800 	.word	0x50000800

0800214c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002150:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <MX_LPUART1_UART_Init+0x8c>)
 8002152:	4a22      	ldr	r2, [pc, #136]	; (80021dc <MX_LPUART1_UART_Init+0x90>)
 8002154:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <MX_LPUART1_UART_Init+0x8c>)
 8002158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800215c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <MX_LPUART1_UART_Init+0x8c>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002164:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <MX_LPUART1_UART_Init+0x8c>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800216a:	4b1b      	ldr	r3, [pc, #108]	; (80021d8 <MX_LPUART1_UART_Init+0x8c>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <MX_LPUART1_UART_Init+0x8c>)
 8002172:	220c      	movs	r2, #12
 8002174:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <MX_LPUART1_UART_Init+0x8c>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800217c:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <MX_LPUART1_UART_Init+0x8c>)
 800217e:	2200      	movs	r2, #0
 8002180:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <MX_LPUART1_UART_Init+0x8c>)
 8002184:	2200      	movs	r2, #0
 8002186:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <MX_LPUART1_UART_Init+0x8c>)
 800218a:	2200      	movs	r2, #0
 800218c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800218e:	4812      	ldr	r0, [pc, #72]	; (80021d8 <MX_LPUART1_UART_Init+0x8c>)
 8002190:	f007 f91d 	bl	80093ce <HAL_UART_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800219a:	f000 fa31 	bl	8002600 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800219e:	2100      	movs	r1, #0
 80021a0:	480d      	ldr	r0, [pc, #52]	; (80021d8 <MX_LPUART1_UART_Init+0x8c>)
 80021a2:	f007 fe4f 	bl	8009e44 <HAL_UARTEx_SetTxFifoThreshold>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80021ac:	f000 fa28 	bl	8002600 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021b0:	2100      	movs	r1, #0
 80021b2:	4809      	ldr	r0, [pc, #36]	; (80021d8 <MX_LPUART1_UART_Init+0x8c>)
 80021b4:	f007 fe84 	bl	8009ec0 <HAL_UARTEx_SetRxFifoThreshold>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80021be:	f000 fa1f 	bl	8002600 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <MX_LPUART1_UART_Init+0x8c>)
 80021c4:	f007 fe05 	bl	8009dd2 <HAL_UARTEx_DisableFifoMode>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80021ce:	f000 fa17 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200002d0 	.word	0x200002d0
 80021dc:	40008000 	.word	0x40008000

080021e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b098      	sub	sp, #96	; 0x60
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	611a      	str	r2, [r3, #16]
 8002202:	615a      	str	r2, [r3, #20]
 8002204:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	2234      	movs	r2, #52	; 0x34
 800220a:	2100      	movs	r1, #0
 800220c:	4618      	mov	r0, r3
 800220e:	f007 ff0d 	bl	800a02c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002212:	4b4e      	ldr	r3, [pc, #312]	; (800234c <MX_TIM1_Init+0x16c>)
 8002214:	4a4e      	ldr	r2, [pc, #312]	; (8002350 <MX_TIM1_Init+0x170>)
 8002216:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002218:	4b4c      	ldr	r3, [pc, #304]	; (800234c <MX_TIM1_Init+0x16c>)
 800221a:	2200      	movs	r2, #0
 800221c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800221e:	4b4b      	ldr	r3, [pc, #300]	; (800234c <MX_TIM1_Init+0x16c>)
 8002220:	2220      	movs	r2, #32
 8002222:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8002224:	4b49      	ldr	r3, [pc, #292]	; (800234c <MX_TIM1_Init+0x16c>)
 8002226:	f241 3287 	movw	r2, #4999	; 0x1387
 800222a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800222c:	4b47      	ldr	r3, [pc, #284]	; (800234c <MX_TIM1_Init+0x16c>)
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002232:	4b46      	ldr	r3, [pc, #280]	; (800234c <MX_TIM1_Init+0x16c>)
 8002234:	2200      	movs	r2, #0
 8002236:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002238:	4b44      	ldr	r3, [pc, #272]	; (800234c <MX_TIM1_Init+0x16c>)
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800223e:	4843      	ldr	r0, [pc, #268]	; (800234c <MX_TIM1_Init+0x16c>)
 8002240:	f005 fc8a 	bl	8007b58 <HAL_TIM_PWM_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800224a:	f000 f9d9 	bl	8002600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800224e:	2370      	movs	r3, #112	; 0x70
 8002250:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002252:	2300      	movs	r3, #0
 8002254:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800225a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800225e:	4619      	mov	r1, r3
 8002260:	483a      	ldr	r0, [pc, #232]	; (800234c <MX_TIM1_Init+0x16c>)
 8002262:	f006 ff47 	bl	80090f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800226c:	f000 f9c8 	bl	8002600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002270:	2360      	movs	r3, #96	; 0x60
 8002272:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002278:	2300      	movs	r3, #0
 800227a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800227c:	2300      	movs	r3, #0
 800227e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002280:	2300      	movs	r3, #0
 8002282:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002288:	2300      	movs	r3, #0
 800228a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800228c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002290:	2200      	movs	r2, #0
 8002292:	4619      	mov	r1, r3
 8002294:	482d      	ldr	r0, [pc, #180]	; (800234c <MX_TIM1_Init+0x16c>)
 8002296:	f006 f80d 	bl	80082b4 <HAL_TIM_PWM_ConfigChannel>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80022a0:	f000 f9ae 	bl	8002600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022a8:	2204      	movs	r2, #4
 80022aa:	4619      	mov	r1, r3
 80022ac:	4827      	ldr	r0, [pc, #156]	; (800234c <MX_TIM1_Init+0x16c>)
 80022ae:	f006 f801 	bl	80082b4 <HAL_TIM_PWM_ConfigChannel>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80022b8:	f000 f9a2 	bl	8002600 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022c0:	2208      	movs	r2, #8
 80022c2:	4619      	mov	r1, r3
 80022c4:	4821      	ldr	r0, [pc, #132]	; (800234c <MX_TIM1_Init+0x16c>)
 80022c6:	f005 fff5 	bl	80082b4 <HAL_TIM_PWM_ConfigChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80022d0:	f000 f996 	bl	8002600 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80022d4:	2370      	movs	r3, #112	; 0x70
 80022d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022dc:	220c      	movs	r2, #12
 80022de:	4619      	mov	r1, r3
 80022e0:	481a      	ldr	r0, [pc, #104]	; (800234c <MX_TIM1_Init+0x16c>)
 80022e2:	f005 ffe7 	bl	80082b4 <HAL_TIM_PWM_ConfigChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80022ec:	f000 f988 	bl	8002600 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 80022fc:	2364      	movs	r3, #100	; 0x64
 80022fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002308:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002316:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002320:	2300      	movs	r3, #0
 8002322:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	4619      	mov	r1, r3
 800232c:	4807      	ldr	r0, [pc, #28]	; (800234c <MX_TIM1_Init+0x16c>)
 800232e:	f006 ff77 	bl	8009220 <HAL_TIMEx_ConfigBreakDeadTime>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8002338:	f000 f962 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800233c:	4803      	ldr	r0, [pc, #12]	; (800234c <MX_TIM1_Init+0x16c>)
 800233e:	f000 fbaf 	bl	8002aa0 <HAL_TIM_MspPostInit>

}
 8002342:	bf00      	nop
 8002344:	3760      	adds	r7, #96	; 0x60
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000360 	.word	0x20000360
 8002350:	40012c00 	.word	0x40012c00

08002354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002372:	4b2c      	ldr	r3, [pc, #176]	; (8002424 <MX_TIM2_Init+0xd0>)
 8002374:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002378:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800237a:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <MX_TIM2_Init+0xd0>)
 800237c:	2200      	movs	r2, #0
 800237e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002380:	4b28      	ldr	r3, [pc, #160]	; (8002424 <MX_TIM2_Init+0xd0>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8002386:	4b27      	ldr	r3, [pc, #156]	; (8002424 <MX_TIM2_Init+0xd0>)
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238e:	4b25      	ldr	r3, [pc, #148]	; (8002424 <MX_TIM2_Init+0xd0>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002394:	4b23      	ldr	r3, [pc, #140]	; (8002424 <MX_TIM2_Init+0xd0>)
 8002396:	2200      	movs	r2, #0
 8002398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800239a:	4822      	ldr	r0, [pc, #136]	; (8002424 <MX_TIM2_Init+0xd0>)
 800239c:	f005 fd46 	bl	8007e2c <HAL_TIM_IC_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80023a6:	f000 f92b 	bl	8002600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	481a      	ldr	r0, [pc, #104]	; (8002424 <MX_TIM2_Init+0xd0>)
 80023ba:	f006 fe9b 	bl	80090f4 <HAL_TIMEx_MasterConfigSynchronization>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80023c4:	f000 f91c 	bl	8002600 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023c8:	2300      	movs	r3, #0
 80023ca:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023cc:	2301      	movs	r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 1;
 80023d4:	2301      	movs	r3, #1
 80023d6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	2200      	movs	r2, #0
 80023dc:	4619      	mov	r1, r3
 80023de:	4811      	ldr	r0, [pc, #68]	; (8002424 <MX_TIM2_Init+0xd0>)
 80023e0:	f005 fecc 	bl	800817c <HAL_TIM_IC_ConfigChannel>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80023ea:	f000 f909 	bl	8002600 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	2204      	movs	r2, #4
 80023f2:	4619      	mov	r1, r3
 80023f4:	480b      	ldr	r0, [pc, #44]	; (8002424 <MX_TIM2_Init+0xd0>)
 80023f6:	f005 fec1 	bl	800817c <HAL_TIM_IC_ConfigChannel>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002400:	f000 f8fe 	bl	8002600 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002404:	1d3b      	adds	r3, r7, #4
 8002406:	2208      	movs	r2, #8
 8002408:	4619      	mov	r1, r3
 800240a:	4806      	ldr	r0, [pc, #24]	; (8002424 <MX_TIM2_Init+0xd0>)
 800240c:	f005 feb6 	bl	800817c <HAL_TIM_IC_ConfigChannel>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002416:	f000 f8f3 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800241a:	bf00      	nop
 800241c:	3720      	adds	r7, #32
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200003ac 	.word	0x200003ac

08002428 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800242e:	1d3b      	adds	r3, r7, #4
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <MX_TIM7_Init+0x64>)
 800243a:	4a15      	ldr	r2, [pc, #84]	; (8002490 <MX_TIM7_Init+0x68>)
 800243c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <MX_TIM7_Init+0x64>)
 8002440:	2200      	movs	r2, #0
 8002442:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <MX_TIM7_Init+0x64>)
 8002446:	2200      	movs	r2, #0
 8002448:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4999;
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <MX_TIM7_Init+0x64>)
 800244c:	f241 3287 	movw	r2, #4999	; 0x1387
 8002450:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <MX_TIM7_Init+0x64>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002458:	480c      	ldr	r0, [pc, #48]	; (800248c <MX_TIM7_Init+0x64>)
 800245a:	f005 fa3d 	bl	80078d8 <HAL_TIM_Base_Init>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002464:	f000 f8cc 	bl	8002600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002468:	2320      	movs	r3, #32
 800246a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002470:	1d3b      	adds	r3, r7, #4
 8002472:	4619      	mov	r1, r3
 8002474:	4805      	ldr	r0, [pc, #20]	; (800248c <MX_TIM7_Init+0x64>)
 8002476:	f006 fe3d 	bl	80090f4 <HAL_TIMEx_MasterConfigSynchronization>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002480:	f000 f8be 	bl	8002600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	200003f8 	.word	0x200003f8
 8002490:	40001400 	.word	0x40001400

08002494 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800249a:	4b16      	ldr	r3, [pc, #88]	; (80024f4 <MX_DMA_Init+0x60>)
 800249c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249e:	4a15      	ldr	r2, [pc, #84]	; (80024f4 <MX_DMA_Init+0x60>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	6493      	str	r3, [r2, #72]	; 0x48
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <MX_DMA_Init+0x60>)
 80024a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <MX_DMA_Init+0x60>)
 80024b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b6:	4a0f      	ldr	r2, [pc, #60]	; (80024f4 <MX_DMA_Init+0x60>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	6493      	str	r3, [r2, #72]	; 0x48
 80024be:	4b0d      	ldr	r3, [pc, #52]	; (80024f4 <MX_DMA_Init+0x60>)
 80024c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2100      	movs	r1, #0
 80024ce:	200b      	movs	r0, #11
 80024d0:	f003 faf1 	bl	8005ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024d4:	200b      	movs	r0, #11
 80024d6:	f003 fb08 	bl	8005aea <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80024da:	2200      	movs	r2, #0
 80024dc:	2100      	movs	r1, #0
 80024de:	200c      	movs	r0, #12
 80024e0:	f003 fae9 	bl	8005ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80024e4:	200c      	movs	r0, #12
 80024e6:	f003 fb00 	bl	8005aea <HAL_NVIC_EnableIRQ>

}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000

080024f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	; 0x28
 80024fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
 800250a:	60da      	str	r2, [r3, #12]
 800250c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800250e:	4b3a      	ldr	r3, [pc, #232]	; (80025f8 <MX_GPIO_Init+0x100>)
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002512:	4a39      	ldr	r2, [pc, #228]	; (80025f8 <MX_GPIO_Init+0x100>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800251a:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <MX_GPIO_Init+0x100>)
 800251c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002526:	4b34      	ldr	r3, [pc, #208]	; (80025f8 <MX_GPIO_Init+0x100>)
 8002528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800252a:	4a33      	ldr	r2, [pc, #204]	; (80025f8 <MX_GPIO_Init+0x100>)
 800252c:	f043 0320 	orr.w	r3, r3, #32
 8002530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002532:	4b31      	ldr	r3, [pc, #196]	; (80025f8 <MX_GPIO_Init+0x100>)
 8002534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <MX_GPIO_Init+0x100>)
 8002540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002542:	4a2d      	ldr	r2, [pc, #180]	; (80025f8 <MX_GPIO_Init+0x100>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800254a:	4b2b      	ldr	r3, [pc, #172]	; (80025f8 <MX_GPIO_Init+0x100>)
 800254c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002556:	4b28      	ldr	r3, [pc, #160]	; (80025f8 <MX_GPIO_Init+0x100>)
 8002558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255a:	4a27      	ldr	r2, [pc, #156]	; (80025f8 <MX_GPIO_Init+0x100>)
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002562:	4b25      	ldr	r3, [pc, #148]	; (80025f8 <MX_GPIO_Init+0x100>)
 8002564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800256e:	2200      	movs	r2, #0
 8002570:	2120      	movs	r1, #32
 8002572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002576:	f004 f923 	bl	80067c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 800257a:	2200      	movs	r2, #0
 800257c:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8002580:	481e      	ldr	r0, [pc, #120]	; (80025fc <MX_GPIO_Init+0x104>)
 8002582:	f004 f91d 	bl	80067c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800258c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 0314 	add.w	r3, r7, #20
 800259a:	4619      	mov	r1, r3
 800259c:	4817      	ldr	r0, [pc, #92]	; (80025fc <MX_GPIO_Init+0x104>)
 800259e:	f003 ff75 	bl	800648c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80025a2:	2320      	movs	r3, #32
 80025a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a6:	2301      	movs	r3, #1
 80025a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025bc:	f003 ff66 	bl	800648c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 80025c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80025c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ce:	2300      	movs	r3, #0
 80025d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	4808      	ldr	r0, [pc, #32]	; (80025fc <MX_GPIO_Init+0x104>)
 80025da:	f003 ff57 	bl	800648c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	2100      	movs	r1, #0
 80025e2:	2028      	movs	r0, #40	; 0x28
 80025e4:	f003 fa67 	bl	8005ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025e8:	2028      	movs	r0, #40	; 0x28
 80025ea:	f003 fa7e 	bl	8005aea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80025ee:	bf00      	nop
 80025f0:	3728      	adds	r7, #40	; 0x28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40021000 	.word	0x40021000
 80025fc:	48000800 	.word	0x48000800

08002600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002604:	b672      	cpsid	i
}
 8002606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002608:	e7fe      	b.n	8002608 <Error_Handler+0x8>
	...

0800260c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <HAL_MspInit+0x44>)
 8002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002616:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <HAL_MspInit+0x44>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6613      	str	r3, [r2, #96]	; 0x60
 800261e:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <HAL_MspInit+0x44>)
 8002620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_MspInit+0x44>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	4a08      	ldr	r2, [pc, #32]	; (8002650 <HAL_MspInit+0x44>)
 8002630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002634:	6593      	str	r3, [r2, #88]	; 0x58
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_MspInit+0x44>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002642:	f004 f9b7 	bl	80069b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000

08002654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b0a0      	sub	sp, #128	; 0x80
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	605a      	str	r2, [r3, #4]
 8002666:	609a      	str	r2, [r3, #8]
 8002668:	60da      	str	r2, [r3, #12]
 800266a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800266c:	f107 0318 	add.w	r3, r7, #24
 8002670:	2254      	movs	r2, #84	; 0x54
 8002672:	2100      	movs	r1, #0
 8002674:	4618      	mov	r0, r3
 8002676:	f007 fcd9 	bl	800a02c <memset>
  if(hadc->Instance==ADC1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002682:	f040 8098 	bne.w	80027b6 <HAL_ADC_MspInit+0x162>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800268a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800268c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002690:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002692:	f107 0318 	add.w	r3, r7, #24
 8002696:	4618      	mov	r0, r3
 8002698:	f004 fed0 	bl	800743c <HAL_RCCEx_PeriphCLKConfig>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80026a2:	f7ff ffad 	bl	8002600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80026a6:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <HAL_ADC_MspInit+0x16c>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	4a45      	ldr	r2, [pc, #276]	; (80027c0 <HAL_ADC_MspInit+0x16c>)
 80026ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026b2:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <HAL_ADC_MspInit+0x16c>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026be:	4b40      	ldr	r3, [pc, #256]	; (80027c0 <HAL_ADC_MspInit+0x16c>)
 80026c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c2:	4a3f      	ldr	r2, [pc, #252]	; (80027c0 <HAL_ADC_MspInit+0x16c>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <HAL_ADC_MspInit+0x16c>)
 80026cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d6:	4b3a      	ldr	r3, [pc, #232]	; (80027c0 <HAL_ADC_MspInit+0x16c>)
 80026d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026da:	4a39      	ldr	r2, [pc, #228]	; (80027c0 <HAL_ADC_MspInit+0x16c>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e2:	4b37      	ldr	r3, [pc, #220]	; (80027c0 <HAL_ADC_MspInit+0x16c>)
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ee:	4b34      	ldr	r3, [pc, #208]	; (80027c0 <HAL_ADC_MspInit+0x16c>)
 80026f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f2:	4a33      	ldr	r2, [pc, #204]	; (80027c0 <HAL_ADC_MspInit+0x16c>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026fa:	4b31      	ldr	r3, [pc, #196]	; (80027c0 <HAL_ADC_MspInit+0x16c>)
 80026fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN8
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002706:	2307      	movs	r3, #7
 8002708:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800270a:	2303      	movs	r3, #3
 800270c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2300      	movs	r3, #0
 8002710:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002712:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002716:	4619      	mov	r1, r3
 8002718:	482a      	ldr	r0, [pc, #168]	; (80027c4 <HAL_ADC_MspInit+0x170>)
 800271a:	f003 feb7 	bl	800648c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800271e:	2303      	movs	r3, #3
 8002720:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002722:	2303      	movs	r3, #3
 8002724:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800272e:	4619      	mov	r1, r3
 8002730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002734:	f003 feaa 	bl	800648c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002738:	2302      	movs	r3, #2
 800273a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800273c:	2303      	movs	r3, #3
 800273e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002744:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002748:	4619      	mov	r1, r3
 800274a:	481f      	ldr	r0, [pc, #124]	; (80027c8 <HAL_ADC_MspInit+0x174>)
 800274c:	f003 fe9e 	bl	800648c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002750:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <HAL_ADC_MspInit+0x178>)
 8002752:	4a1f      	ldr	r2, [pc, #124]	; (80027d0 <HAL_ADC_MspInit+0x17c>)
 8002754:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002756:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <HAL_ADC_MspInit+0x178>)
 8002758:	2205      	movs	r2, #5
 800275a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800275c:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <HAL_ADC_MspInit+0x178>)
 800275e:	2200      	movs	r2, #0
 8002760:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002762:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <HAL_ADC_MspInit+0x178>)
 8002764:	2200      	movs	r2, #0
 8002766:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002768:	4b18      	ldr	r3, [pc, #96]	; (80027cc <HAL_ADC_MspInit+0x178>)
 800276a:	2280      	movs	r2, #128	; 0x80
 800276c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_ADC_MspInit+0x178>)
 8002770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002774:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <HAL_ADC_MspInit+0x178>)
 8002778:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800277c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <HAL_ADC_MspInit+0x178>)
 8002780:	2220      	movs	r2, #32
 8002782:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_ADC_MspInit+0x178>)
 8002786:	2200      	movs	r2, #0
 8002788:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800278a:	4810      	ldr	r0, [pc, #64]	; (80027cc <HAL_ADC_MspInit+0x178>)
 800278c:	f003 fc0c 	bl	8005fa8 <HAL_DMA_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 8002796:	f7ff ff33 	bl	8002600 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a0b      	ldr	r2, [pc, #44]	; (80027cc <HAL_ADC_MspInit+0x178>)
 800279e:	655a      	str	r2, [r3, #84]	; 0x54
 80027a0:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_ADC_MspInit+0x178>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80027a6:	2200      	movs	r2, #0
 80027a8:	2100      	movs	r1, #0
 80027aa:	2012      	movs	r0, #18
 80027ac:	f003 f983 	bl	8005ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80027b0:	2012      	movs	r0, #18
 80027b2:	f003 f99a 	bl	8005aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027b6:	bf00      	nop
 80027b8:	3780      	adds	r7, #128	; 0x80
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40021000 	.word	0x40021000
 80027c4:	48000800 	.word	0x48000800
 80027c8:	48000400 	.word	0x48000400
 80027cc:	200001fc 	.word	0x200001fc
 80027d0:	40020008 	.word	0x40020008

080027d4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08a      	sub	sp, #40	; 0x28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	605a      	str	r2, [r3, #4]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a2b      	ldr	r2, [pc, #172]	; (80028a0 <HAL_DAC_MspInit+0xcc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d14f      	bne.n	8002896 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80027f6:	4b2b      	ldr	r3, [pc, #172]	; (80028a4 <HAL_DAC_MspInit+0xd0>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	4a2a      	ldr	r2, [pc, #168]	; (80028a4 <HAL_DAC_MspInit+0xd0>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002802:	4b28      	ldr	r3, [pc, #160]	; (80028a4 <HAL_DAC_MspInit+0xd0>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	4b25      	ldr	r3, [pc, #148]	; (80028a4 <HAL_DAC_MspInit+0xd0>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	4a24      	ldr	r2, [pc, #144]	; (80028a4 <HAL_DAC_MspInit+0xd0>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800281a:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <HAL_DAC_MspInit+0xd0>)
 800281c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002826:	2310      	movs	r3, #16
 8002828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800282a:	2303      	movs	r3, #3
 800282c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002832:	f107 0314 	add.w	r3, r7, #20
 8002836:	4619      	mov	r1, r3
 8002838:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800283c:	f003 fe26 	bl	800648c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8002840:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <HAL_DAC_MspInit+0xd4>)
 8002842:	4a1a      	ldr	r2, [pc, #104]	; (80028ac <HAL_DAC_MspInit+0xd8>)
 8002844:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8002846:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <HAL_DAC_MspInit+0xd4>)
 8002848:	2206      	movs	r2, #6
 800284a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800284c:	4b16      	ldr	r3, [pc, #88]	; (80028a8 <HAL_DAC_MspInit+0xd4>)
 800284e:	2210      	movs	r2, #16
 8002850:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <HAL_DAC_MspInit+0xd4>)
 8002854:	2200      	movs	r2, #0
 8002856:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <HAL_DAC_MspInit+0xd4>)
 800285a:	2280      	movs	r2, #128	; 0x80
 800285c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800285e:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_DAC_MspInit+0xd4>)
 8002860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002864:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <HAL_DAC_MspInit+0xd4>)
 8002868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800286c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800286e:	4b0e      	ldr	r3, [pc, #56]	; (80028a8 <HAL_DAC_MspInit+0xd4>)
 8002870:	2220      	movs	r2, #32
 8002872:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <HAL_DAC_MspInit+0xd4>)
 8002876:	2200      	movs	r2, #0
 8002878:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800287a:	480b      	ldr	r0, [pc, #44]	; (80028a8 <HAL_DAC_MspInit+0xd4>)
 800287c:	f003 fb94 	bl	8005fa8 <HAL_DMA_Init>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8002886:	f7ff febb 	bl	8002600 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a06      	ldr	r2, [pc, #24]	; (80028a8 <HAL_DAC_MspInit+0xd4>)
 800288e:	609a      	str	r2, [r3, #8]
 8002890:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <HAL_DAC_MspInit+0xd4>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002896:	bf00      	nop
 8002898:	3728      	adds	r7, #40	; 0x28
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	50000800 	.word	0x50000800
 80028a4:	40021000 	.word	0x40021000
 80028a8:	20000270 	.word	0x20000270
 80028ac:	4002001c 	.word	0x4002001c

080028b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b09e      	sub	sp, #120	; 0x78
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	2254      	movs	r2, #84	; 0x54
 80028ce:	2100      	movs	r1, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f007 fbab 	bl	800a02c <memset>
  if(huart->Instance==LPUART1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1f      	ldr	r2, [pc, #124]	; (8002958 <HAL_UART_MspInit+0xa8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d136      	bne.n	800294e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80028e0:	2320      	movs	r3, #32
 80028e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80028e4:	2300      	movs	r3, #0
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028e8:	f107 0310 	add.w	r3, r7, #16
 80028ec:	4618      	mov	r0, r3
 80028ee:	f004 fda5 	bl	800743c <HAL_RCCEx_PeriphCLKConfig>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80028f8:	f7ff fe82 	bl	8002600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80028fc:	4b17      	ldr	r3, [pc, #92]	; (800295c <HAL_UART_MspInit+0xac>)
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	4a16      	ldr	r2, [pc, #88]	; (800295c <HAL_UART_MspInit+0xac>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <HAL_UART_MspInit+0xac>)
 800290a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <HAL_UART_MspInit+0xac>)
 8002916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002918:	4a10      	ldr	r2, [pc, #64]	; (800295c <HAL_UART_MspInit+0xac>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002920:	4b0e      	ldr	r3, [pc, #56]	; (800295c <HAL_UART_MspInit+0xac>)
 8002922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800292c:	230c      	movs	r3, #12
 800292e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002930:	2302      	movs	r3, #2
 8002932:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002938:	2300      	movs	r3, #0
 800293a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800293c:	230c      	movs	r3, #12
 800293e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002940:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002944:	4619      	mov	r1, r3
 8002946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800294a:	f003 fd9f 	bl	800648c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800294e:	bf00      	nop
 8002950:	3778      	adds	r7, #120	; 0x78
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40008000 	.word	0x40008000
 800295c:	40021000 	.word	0x40021000

08002960 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <HAL_TIM_PWM_MspInit+0x38>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d10b      	bne.n	800298a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002972:	4b0a      	ldr	r3, [pc, #40]	; (800299c <HAL_TIM_PWM_MspInit+0x3c>)
 8002974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002976:	4a09      	ldr	r2, [pc, #36]	; (800299c <HAL_TIM_PWM_MspInit+0x3c>)
 8002978:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800297c:	6613      	str	r3, [r2, #96]	; 0x60
 800297e:	4b07      	ldr	r3, [pc, #28]	; (800299c <HAL_TIM_PWM_MspInit+0x3c>)
 8002980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40012c00 	.word	0x40012c00
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c0:	d146      	bne.n	8002a50 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029c2:	4b25      	ldr	r3, [pc, #148]	; (8002a58 <HAL_TIM_IC_MspInit+0xb8>)
 80029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c6:	4a24      	ldr	r2, [pc, #144]	; (8002a58 <HAL_TIM_IC_MspInit+0xb8>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6593      	str	r3, [r2, #88]	; 0x58
 80029ce:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <HAL_TIM_IC_MspInit+0xb8>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029da:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <HAL_TIM_IC_MspInit+0xb8>)
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	4a1e      	ldr	r2, [pc, #120]	; (8002a58 <HAL_TIM_IC_MspInit+0xb8>)
 80029e0:	f043 0302 	orr.w	r3, r3, #2
 80029e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029e6:	4b1c      	ldr	r3, [pc, #112]	; (8002a58 <HAL_TIM_IC_MspInit+0xb8>)
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <HAL_TIM_IC_MspInit+0xb8>)
 80029f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f6:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <HAL_TIM_IC_MspInit+0xb8>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <HAL_TIM_IC_MspInit+0xb8>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 8002a0a:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a10:	2302      	movs	r3, #2
 8002a12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a20:	f107 0314 	add.w	r3, r7, #20
 8002a24:	4619      	mov	r1, r3
 8002a26:	480d      	ldr	r0, [pc, #52]	; (8002a5c <HAL_TIM_IC_MspInit+0xbc>)
 8002a28:	f003 fd30 	bl	800648c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin;
 8002a2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a32:	2302      	movs	r3, #2
 8002a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 8002a42:	f107 0314 	add.w	r3, r7, #20
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a4c:	f003 fd1e 	bl	800648c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a50:	bf00      	nop
 8002a52:	3728      	adds	r7, #40	; 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	48000400 	.word	0x48000400

08002a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_TIM_Base_MspInit+0x38>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10b      	bne.n	8002a8a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <HAL_TIM_Base_MspInit+0x3c>)
 8002a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a76:	4a09      	ldr	r2, [pc, #36]	; (8002a9c <HAL_TIM_Base_MspInit+0x3c>)
 8002a78:	f043 0320 	orr.w	r3, r3, #32
 8002a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <HAL_TIM_Base_MspInit+0x3c>)
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40001400 	.word	0x40001400
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 0314 	add.w	r3, r7, #20
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a36      	ldr	r2, [pc, #216]	; (8002b98 <HAL_TIM_MspPostInit+0xf8>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d166      	bne.n	8002b90 <HAL_TIM_MspPostInit+0xf0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ac2:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <HAL_TIM_MspPostInit+0xfc>)
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	4a35      	ldr	r2, [pc, #212]	; (8002b9c <HAL_TIM_MspPostInit+0xfc>)
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ace:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <HAL_TIM_MspPostInit+0xfc>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <HAL_TIM_MspPostInit+0xfc>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	4a2f      	ldr	r2, [pc, #188]	; (8002b9c <HAL_TIM_MspPostInit+0xfc>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae6:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <HAL_TIM_MspPostInit+0xfc>)
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	60fb      	str	r3, [r7, #12]
 8002af0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <HAL_TIM_MspPostInit+0xfc>)
 8002af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af6:	4a29      	ldr	r2, [pc, #164]	; (8002b9c <HAL_TIM_MspPostInit+0xfc>)
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002afe:	4b27      	ldr	r3, [pc, #156]	; (8002b9c <HAL_TIM_MspPostInit+0xfc>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PB9     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b0a:	2308      	movs	r3, #8
 8002b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0e:	2302      	movs	r3, #2
 8002b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b16:	2300      	movs	r3, #0
 8002b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b1e:	f107 0314 	add.w	r3, r7, #20
 8002b22:	4619      	mov	r1, r3
 8002b24:	481e      	ldr	r0, [pc, #120]	; (8002ba0 <HAL_TIM_MspPostInit+0x100>)
 8002b26:	f003 fcb1 	bl	800648c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002b2a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b30:	2302      	movs	r3, #2
 8002b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002b3c:	2306      	movs	r3, #6
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	4619      	mov	r1, r3
 8002b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b4a:	f003 fc9f 	bl	800648c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002b5e:	2306      	movs	r3, #6
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	480e      	ldr	r0, [pc, #56]	; (8002ba4 <HAL_TIM_MspPostInit+0x104>)
 8002b6a:	f003 fc8f 	bl	800648c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 8002b80:	230c      	movs	r3, #12
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4806      	ldr	r0, [pc, #24]	; (8002ba4 <HAL_TIM_MspPostInit+0x104>)
 8002b8c:	f003 fc7e 	bl	800648c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002b90:	bf00      	nop
 8002b92:	3728      	adds	r7, #40	; 0x28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40012c00 	.word	0x40012c00
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	48000800 	.word	0x48000800
 8002ba4:	48000400 	.word	0x48000400

08002ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bac:	e7fe      	b.n	8002bac <NMI_Handler+0x4>

08002bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bb2:	e7fe      	b.n	8002bb2 <HardFault_Handler+0x4>

08002bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb8:	e7fe      	b.n	8002bb8 <MemManage_Handler+0x4>

08002bba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bbe:	e7fe      	b.n	8002bbe <BusFault_Handler+0x4>

08002bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc4:	e7fe      	b.n	8002bc4 <UsageFault_Handler+0x4>

08002bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002be2:	b480      	push	{r7}
 8002be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bf4:	f000 f8c2 	bl	8002d7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c00:	4802      	ldr	r0, [pc, #8]	; (8002c0c <DMA1_Channel1_IRQHandler+0x10>)
 8002c02:	f003 faf4 	bl	80061ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200001fc 	.word	0x200001fc

08002c10 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002c14:	4802      	ldr	r0, [pc, #8]	; (8002c20 <DMA1_Channel2_IRQHandler+0x10>)
 8002c16:	f003 faea 	bl	80061ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	20000270 	.word	0x20000270

08002c24 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c28:	4808      	ldr	r0, [pc, #32]	; (8002c4c <ADC1_2_IRQHandler+0x28>)
 8002c2a:	f000 fdc1 	bl	80037b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002c2e:	2120      	movs	r1, #32
 8002c30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c34:	f003 fddc 	bl	80067f0 <HAL_GPIO_TogglePin>

	// Sequence Control
	Sequence();
 8002c38:	f7fd fda2 	bl	8000780 <Sequence>

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002c3c:	2120      	movs	r1, #32
 8002c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c42:	f003 fdd5 	bl	80067f0 <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000190 	.word	0x20000190

08002c50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002c54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c58:	f003 fde4 	bl	8006824 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <SystemInit+0x20>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6a:	4a05      	ldr	r2, [pc, #20]	; (8002c80 <SystemInit+0x20>)
 8002c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c84:	480d      	ldr	r0, [pc, #52]	; (8002cbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c88:	480d      	ldr	r0, [pc, #52]	; (8002cc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c8a:	490e      	ldr	r1, [pc, #56]	; (8002cc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <LoopForever+0xe>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002c90:	e002      	b.n	8002c98 <LoopCopyDataInit>

08002c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c96:	3304      	adds	r3, #4

08002c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c9c:	d3f9      	bcc.n	8002c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ca0:	4c0b      	ldr	r4, [pc, #44]	; (8002cd0 <LoopForever+0x16>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca4:	e001      	b.n	8002caa <LoopFillZerobss>

08002ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca8:	3204      	adds	r2, #4

08002caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cac:	d3fb      	bcc.n	8002ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002cae:	f7ff ffd7 	bl	8002c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cb2:	f007 f997 	bl	8009fe4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cb6:	f7ff f83d 	bl	8001d34 <main>

08002cba <LoopForever>:

LoopForever:
    b LoopForever
 8002cba:	e7fe      	b.n	8002cba <LoopForever>
  ldr   r0, =_estack
 8002cbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cc4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002cc8:	0800b468 	.word	0x0800b468
  ldr r2, =_sbss
 8002ccc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002cd0:	20000448 	.word	0x20000448

08002cd4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002cd4:	e7fe      	b.n	8002cd4 <ADC3_IRQHandler>

08002cd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	f002 fedd 	bl	8005aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f000 f80e 	bl	8002d08 <HAL_InitTick>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	71fb      	strb	r3, [r7, #7]
 8002cf6:	e001      	b.n	8002cfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cf8:	f7ff fc88 	bl	800260c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cfc:	79fb      	ldrb	r3, [r7, #7]

}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d14:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <HAL_InitTick+0x68>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d022      	beq.n	8002d62 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d1c:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <HAL_InitTick+0x6c>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <HAL_InitTick+0x68>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002d28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d30:	4618      	mov	r0, r3
 8002d32:	f002 fee8 	bl	8005b06 <HAL_SYSTICK_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10f      	bne.n	8002d5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b0f      	cmp	r3, #15
 8002d40:	d809      	bhi.n	8002d56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d42:	2200      	movs	r2, #0
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4a:	f002 feb4 	bl	8005ab6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <HAL_InitTick+0x70>)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	e007      	b.n	8002d66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	73fb      	strb	r3, [r7, #15]
 8002d5a:	e004      	b.n	8002d66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
 8002d60:	e001      	b.n	8002d66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20000008 	.word	0x20000008
 8002d74:	20000000 	.word	0x20000000
 8002d78:	20000004 	.word	0x20000004

08002d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_IncTick+0x1c>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_IncTick+0x20>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4413      	add	r3, r2
 8002d8a:	4a03      	ldr	r2, [pc, #12]	; (8002d98 <HAL_IncTick+0x1c>)
 8002d8c:	6013      	str	r3, [r2, #0]
}
 8002d8e:	bf00      	nop
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	20000444 	.word	0x20000444
 8002d9c:	20000008 	.word	0x20000008

08002da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return uwTick;
 8002da4:	4b03      	ldr	r3, [pc, #12]	; (8002db4 <HAL_GetTick+0x14>)
 8002da6:	681b      	ldr	r3, [r3, #0]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	20000444 	.word	0x20000444

08002db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc0:	f7ff ffee 	bl	8002da0 <HAL_GetTick>
 8002dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd0:	d004      	beq.n	8002ddc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dd2:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <HAL_Delay+0x40>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4413      	add	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ddc:	bf00      	nop
 8002dde:	f7ff ffdf 	bl	8002da0 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d8f7      	bhi.n	8002dde <HAL_Delay+0x26>
  {
  }
}
 8002dee:	bf00      	nop
 8002df0:	bf00      	nop
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	20000008 	.word	0x20000008

08002dfc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	609a      	str	r2, [r3, #8]
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
 8002e2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	609a      	str	r2, [r3, #8]
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3360      	adds	r3, #96	; 0x60
 8002e76:	461a      	mov	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <LL_ADC_SetOffset+0x44>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	4313      	orrs	r3, r2
 8002e94:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002e9c:	bf00      	nop
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	03fff000 	.word	0x03fff000

08002eac <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3360      	adds	r3, #96	; 0x60
 8002eba:	461a      	mov	r2, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	3360      	adds	r3, #96	; 0x60
 8002ee8:	461a      	mov	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f02:	bf00      	nop
 8002f04:	371c      	adds	r7, #28
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b087      	sub	sp, #28
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3360      	adds	r3, #96	; 0x60
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3360      	adds	r3, #96	; 0x60
 8002f54:	461a      	mov	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002f6e:	bf00      	nop
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	615a      	str	r2, [r3, #20]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b087      	sub	sp, #28
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3330      	adds	r3, #48	; 0x30
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	4413      	add	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	211f      	movs	r1, #31
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	0e9b      	lsrs	r3, r3, #26
 8002ffe:	f003 011f 	and.w	r1, r3, #31
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	431a      	orrs	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003012:	bf00      	nop
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3314      	adds	r3, #20
 8003054:	461a      	mov	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	0e5b      	lsrs	r3, r3, #25
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	4413      	add	r3, r2
 8003062:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	0d1b      	lsrs	r3, r3, #20
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	2107      	movs	r1, #7
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	401a      	ands	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	0d1b      	lsrs	r3, r3, #20
 800307e:	f003 031f 	and.w	r3, r3, #31
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	431a      	orrs	r2, r3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a0f      	ldr	r2, [pc, #60]	; (80030e8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d10a      	bne.n	80030c6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030bc:	431a      	orrs	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80030c4:	e00a      	b.n	80030dc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d2:	43db      	mvns	r3, r3
 80030d4:	401a      	ands	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	407f0000 	.word	0x407f0000

080030ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 031f 	and.w	r3, r3, #31
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003134:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6093      	str	r3, [r2, #8]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800315c:	d101      	bne.n	8003162 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003184:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031ac:	d101      	bne.n	80031b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e000      	b.n	80031b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031d4:	f043 0201 	orr.w	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <LL_ADC_IsEnabled+0x18>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <LL_ADC_IsEnabled+0x1a>
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800321e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003222:	f043 0204 	orr.w	r2, r3, #4
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b04      	cmp	r3, #4
 8003248:	d101      	bne.n	800324e <LL_ADC_REG_IsConversionOngoing+0x18>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b08      	cmp	r3, #8
 800326e:	d101      	bne.n	8003274 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b089      	sub	sp, #36	; 0x24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003290:	2300      	movs	r3, #0
 8003292:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e1af      	b.n	80035fe <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d109      	bne.n	80032c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7ff f9d1 	bl	8002654 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff3f 	bl	8003148 <LL_ADC_IsDeepPowerDownEnabled>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d004      	beq.n	80032da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff25 	bl	8003124 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff ff5a 	bl	8003198 <LL_ADC_IsInternalRegulatorEnabled>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d115      	bne.n	8003316 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff ff3e 	bl	8003170 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032f4:	4b9f      	ldr	r3, [pc, #636]	; (8003574 <HAL_ADC_Init+0x2f0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	099b      	lsrs	r3, r3, #6
 80032fa:	4a9f      	ldr	r2, [pc, #636]	; (8003578 <HAL_ADC_Init+0x2f4>)
 80032fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003300:	099b      	lsrs	r3, r3, #6
 8003302:	3301      	adds	r3, #1
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003308:	e002      	b.n	8003310 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	3b01      	subs	r3, #1
 800330e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f9      	bne.n	800330a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff3c 	bl	8003198 <LL_ADC_IsInternalRegulatorEnabled>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10d      	bne.n	8003342 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332a:	f043 0210 	orr.w	r2, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003336:	f043 0201 	orr.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff ff75 	bl	8003236 <LL_ADC_REG_IsConversionOngoing>
 800334c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 8148 	bne.w	80035ec <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 8144 	bne.w	80035ec <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003368:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800336c:	f043 0202 	orr.w	r2, r3, #2
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff35 	bl	80031e8 <LL_ADC_IsEnabled>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d141      	bne.n	8003408 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800338c:	d004      	beq.n	8003398 <HAL_ADC_Init+0x114>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a7a      	ldr	r2, [pc, #488]	; (800357c <HAL_ADC_Init+0x2f8>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d10f      	bne.n	80033b8 <HAL_ADC_Init+0x134>
 8003398:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800339c:	f7ff ff24 	bl	80031e8 <LL_ADC_IsEnabled>
 80033a0:	4604      	mov	r4, r0
 80033a2:	4876      	ldr	r0, [pc, #472]	; (800357c <HAL_ADC_Init+0x2f8>)
 80033a4:	f7ff ff20 	bl	80031e8 <LL_ADC_IsEnabled>
 80033a8:	4603      	mov	r3, r0
 80033aa:	4323      	orrs	r3, r4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	bf0c      	ite	eq
 80033b0:	2301      	moveq	r3, #1
 80033b2:	2300      	movne	r3, #0
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	e012      	b.n	80033de <HAL_ADC_Init+0x15a>
 80033b8:	4871      	ldr	r0, [pc, #452]	; (8003580 <HAL_ADC_Init+0x2fc>)
 80033ba:	f7ff ff15 	bl	80031e8 <LL_ADC_IsEnabled>
 80033be:	4604      	mov	r4, r0
 80033c0:	4870      	ldr	r0, [pc, #448]	; (8003584 <HAL_ADC_Init+0x300>)
 80033c2:	f7ff ff11 	bl	80031e8 <LL_ADC_IsEnabled>
 80033c6:	4603      	mov	r3, r0
 80033c8:	431c      	orrs	r4, r3
 80033ca:	486f      	ldr	r0, [pc, #444]	; (8003588 <HAL_ADC_Init+0x304>)
 80033cc:	f7ff ff0c 	bl	80031e8 <LL_ADC_IsEnabled>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4323      	orrs	r3, r4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf0c      	ite	eq
 80033d8:	2301      	moveq	r3, #1
 80033da:	2300      	movne	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d012      	beq.n	8003408 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033ea:	d004      	beq.n	80033f6 <HAL_ADC_Init+0x172>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a62      	ldr	r2, [pc, #392]	; (800357c <HAL_ADC_Init+0x2f8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_ADC_Init+0x176>
 80033f6:	4a65      	ldr	r2, [pc, #404]	; (800358c <HAL_ADC_Init+0x308>)
 80033f8:	e000      	b.n	80033fc <HAL_ADC_Init+0x178>
 80033fa:	4a65      	ldr	r2, [pc, #404]	; (8003590 <HAL_ADC_Init+0x30c>)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f7ff fcfa 	bl	8002dfc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	7f5b      	ldrb	r3, [r3, #29]
 800340c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003412:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003418:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800341e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003426:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003432:	2b01      	cmp	r3, #1
 8003434:	d106      	bne.n	8003444 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343a:	3b01      	subs	r3, #1
 800343c:	045b      	lsls	r3, r3, #17
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d009      	beq.n	8003460 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4313      	orrs	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	4b4b      	ldr	r3, [pc, #300]	; (8003594 <HAL_ADC_Init+0x310>)
 8003468:	4013      	ands	r3, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	69b9      	ldr	r1, [r7, #24]
 8003470:	430b      	orrs	r3, r1
 8003472:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	430a      	orrs	r2, r1
 8003488:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fed1 	bl	8003236 <LL_ADC_REG_IsConversionOngoing>
 8003494:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fede 	bl	800325c <LL_ADC_INJ_IsConversionOngoing>
 80034a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d17f      	bne.n	80035a8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d17c      	bne.n	80035a8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80034b2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034ba:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034ca:	f023 0302 	bic.w	r3, r3, #2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	69b9      	ldr	r1, [r7, #24]
 80034d4:	430b      	orrs	r3, r1
 80034d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d017      	beq.n	8003510 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80034ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80034f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80034fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6911      	ldr	r1, [r2, #16]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	430b      	orrs	r3, r1
 800350a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800350e:	e013      	b.n	8003538 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691a      	ldr	r2, [r3, #16]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800351e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6812      	ldr	r2, [r2, #0]
 800352c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003530:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003534:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800353e:	2b01      	cmp	r3, #1
 8003540:	d12a      	bne.n	8003598 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800354c:	f023 0304 	bic.w	r3, r3, #4
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003558:	4311      	orrs	r1, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800355e:	4311      	orrs	r1, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003564:	430a      	orrs	r2, r1
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	611a      	str	r2, [r3, #16]
 8003572:	e019      	b.n	80035a8 <HAL_ADC_Init+0x324>
 8003574:	20000000 	.word	0x20000000
 8003578:	053e2d63 	.word	0x053e2d63
 800357c:	50000100 	.word	0x50000100
 8003580:	50000400 	.word	0x50000400
 8003584:	50000500 	.word	0x50000500
 8003588:	50000600 	.word	0x50000600
 800358c:	50000300 	.word	0x50000300
 8003590:	50000700 	.word	0x50000700
 8003594:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691a      	ldr	r2, [r3, #16]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d10c      	bne.n	80035ca <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f023 010f 	bic.w	r1, r3, #15
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	1e5a      	subs	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	631a      	str	r2, [r3, #48]	; 0x30
 80035c8:	e007      	b.n	80035da <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 020f 	bic.w	r2, r2, #15
 80035d8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035de:	f023 0303 	bic.w	r3, r3, #3
 80035e2:	f043 0201 	orr.w	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80035ea:	e007      	b.n	80035fc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f0:	f043 0210 	orr.w	r2, r3, #16
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80035fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3724      	adds	r7, #36	; 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd90      	pop	{r4, r7, pc}
 8003606:	bf00      	nop

08003608 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800361c:	d004      	beq.n	8003628 <HAL_ADC_Start_DMA+0x20>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a5a      	ldr	r2, [pc, #360]	; (800378c <HAL_ADC_Start_DMA+0x184>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d101      	bne.n	800362c <HAL_ADC_Start_DMA+0x24>
 8003628:	4b59      	ldr	r3, [pc, #356]	; (8003790 <HAL_ADC_Start_DMA+0x188>)
 800362a:	e000      	b.n	800362e <HAL_ADC_Start_DMA+0x26>
 800362c:	4b59      	ldr	r3, [pc, #356]	; (8003794 <HAL_ADC_Start_DMA+0x18c>)
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fd5c 	bl	80030ec <LL_ADC_GetMultimode>
 8003634:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fdfb 	bl	8003236 <LL_ADC_REG_IsConversionOngoing>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	f040 809b 	bne.w	800377e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_ADC_Start_DMA+0x4e>
 8003652:	2302      	movs	r3, #2
 8003654:	e096      	b.n	8003784 <HAL_ADC_Start_DMA+0x17c>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a4d      	ldr	r2, [pc, #308]	; (8003798 <HAL_ADC_Start_DMA+0x190>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d008      	beq.n	800367a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b05      	cmp	r3, #5
 8003672:	d002      	beq.n	800367a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b09      	cmp	r3, #9
 8003678:	d17a      	bne.n	8003770 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 ff60 	bl	8004540 <ADC_Enable>
 8003680:	4603      	mov	r3, r0
 8003682:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d16d      	bne.n	8003766 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003692:	f023 0301 	bic.w	r3, r3, #1
 8003696:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a3a      	ldr	r2, [pc, #232]	; (800378c <HAL_ADC_Start_DMA+0x184>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d009      	beq.n	80036bc <HAL_ADC_Start_DMA+0xb4>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a3b      	ldr	r2, [pc, #236]	; (800379c <HAL_ADC_Start_DMA+0x194>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d002      	beq.n	80036b8 <HAL_ADC_Start_DMA+0xb0>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	e003      	b.n	80036c0 <HAL_ADC_Start_DMA+0xb8>
 80036b8:	4b39      	ldr	r3, [pc, #228]	; (80037a0 <HAL_ADC_Start_DMA+0x198>)
 80036ba:	e001      	b.n	80036c0 <HAL_ADC_Start_DMA+0xb8>
 80036bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d002      	beq.n	80036ce <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d105      	bne.n	80036da <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d006      	beq.n	80036f4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ea:	f023 0206 	bic.w	r2, r3, #6
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	661a      	str	r2, [r3, #96]	; 0x60
 80036f2:	e002      	b.n	80036fa <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	4a29      	ldr	r2, [pc, #164]	; (80037a4 <HAL_ADC_Start_DMA+0x19c>)
 8003700:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003706:	4a28      	ldr	r2, [pc, #160]	; (80037a8 <HAL_ADC_Start_DMA+0x1a0>)
 8003708:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	4a27      	ldr	r2, [pc, #156]	; (80037ac <HAL_ADC_Start_DMA+0x1a4>)
 8003710:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	221c      	movs	r2, #28
 8003718:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0210 	orr.w	r2, r2, #16
 8003730:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0201 	orr.w	r2, r2, #1
 8003740:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3340      	adds	r3, #64	; 0x40
 800374c:	4619      	mov	r1, r3
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f002 fcd1 	bl	80060f8 <HAL_DMA_Start_IT>
 8003756:	4603      	mov	r3, r0
 8003758:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff fd55 	bl	800320e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003764:	e00d      	b.n	8003782 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800376e:	e008      	b.n	8003782 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800377c:	e001      	b.n	8003782 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800377e:	2302      	movs	r3, #2
 8003780:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003782:	7dfb      	ldrb	r3, [r7, #23]
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	50000100 	.word	0x50000100
 8003790:	50000300 	.word	0x50000300
 8003794:	50000700 	.word	0x50000700
 8003798:	50000600 	.word	0x50000600
 800379c:	50000500 	.word	0x50000500
 80037a0:	50000400 	.word	0x50000400
 80037a4:	08004605 	.word	0x08004605
 80037a8:	080046dd 	.word	0x080046dd
 80037ac:	080046f9 	.word	0x080046f9

080037b0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	; 0x28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80037b8:	2300      	movs	r3, #0
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037d4:	d004      	beq.n	80037e0 <HAL_ADC_IRQHandler+0x30>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a8e      	ldr	r2, [pc, #568]	; (8003a14 <HAL_ADC_IRQHandler+0x264>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d101      	bne.n	80037e4 <HAL_ADC_IRQHandler+0x34>
 80037e0:	4b8d      	ldr	r3, [pc, #564]	; (8003a18 <HAL_ADC_IRQHandler+0x268>)
 80037e2:	e000      	b.n	80037e6 <HAL_ADC_IRQHandler+0x36>
 80037e4:	4b8d      	ldr	r3, [pc, #564]	; (8003a1c <HAL_ADC_IRQHandler+0x26c>)
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff fc80 	bl	80030ec <LL_ADC_GetMultimode>
 80037ec:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d017      	beq.n	8003828 <HAL_ADC_IRQHandler+0x78>
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d012      	beq.n	8003828 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003806:	f003 0310 	and.w	r3, r3, #16
 800380a:	2b00      	cmp	r3, #0
 800380c:	d105      	bne.n	800381a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003812:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f001 fa32 	bl	8004c84 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2202      	movs	r2, #2
 8003826:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d004      	beq.n	800383c <HAL_ADC_IRQHandler+0x8c>
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8094 	beq.w	8003970 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 808e 	beq.w	8003970 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	d105      	bne.n	800386c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff fb95 	bl	8002fa0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d072      	beq.n	8003962 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a64      	ldr	r2, [pc, #400]	; (8003a14 <HAL_ADC_IRQHandler+0x264>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d009      	beq.n	800389a <HAL_ADC_IRQHandler+0xea>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a65      	ldr	r2, [pc, #404]	; (8003a20 <HAL_ADC_IRQHandler+0x270>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d002      	beq.n	8003896 <HAL_ADC_IRQHandler+0xe6>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	e003      	b.n	800389e <HAL_ADC_IRQHandler+0xee>
 8003896:	4b63      	ldr	r3, [pc, #396]	; (8003a24 <HAL_ADC_IRQHandler+0x274>)
 8003898:	e001      	b.n	800389e <HAL_ADC_IRQHandler+0xee>
 800389a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d008      	beq.n	80038b8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	d002      	beq.n	80038b8 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b09      	cmp	r3, #9
 80038b6:	d104      	bne.n	80038c2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	623b      	str	r3, [r7, #32]
 80038c0:	e014      	b.n	80038ec <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a53      	ldr	r2, [pc, #332]	; (8003a14 <HAL_ADC_IRQHandler+0x264>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d009      	beq.n	80038e0 <HAL_ADC_IRQHandler+0x130>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a53      	ldr	r2, [pc, #332]	; (8003a20 <HAL_ADC_IRQHandler+0x270>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d002      	beq.n	80038dc <HAL_ADC_IRQHandler+0x12c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	e003      	b.n	80038e4 <HAL_ADC_IRQHandler+0x134>
 80038dc:	4b51      	ldr	r3, [pc, #324]	; (8003a24 <HAL_ADC_IRQHandler+0x274>)
 80038de:	e001      	b.n	80038e4 <HAL_ADC_IRQHandler+0x134>
 80038e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038e4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d135      	bne.n	8003962 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b08      	cmp	r3, #8
 8003902:	d12e      	bne.n	8003962 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fc94 	bl	8003236 <LL_ADC_REG_IsConversionOngoing>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d11a      	bne.n	800394a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685a      	ldr	r2, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 020c 	bic.w	r2, r2, #12
 8003922:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003928:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d112      	bne.n	8003962 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003940:	f043 0201 	orr.w	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	65da      	str	r2, [r3, #92]	; 0x5c
 8003948:	e00b      	b.n	8003962 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394e:	f043 0210 	orr.w	r2, r3, #16
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395a:	f043 0201 	orr.w	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f984 	bl	8003c70 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	220c      	movs	r2, #12
 800396e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	d004      	beq.n	8003984 <HAL_ADC_IRQHandler+0x1d4>
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10b      	bne.n	800399c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80b3 	beq.w	8003af6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 80ad 	beq.w	8003af6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a0:	f003 0310 	and.w	r3, r3, #16
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d105      	bne.n	80039b4 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff fb30 	bl	800301e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80039be:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff faeb 	bl	8002fa0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80039ca:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a10      	ldr	r2, [pc, #64]	; (8003a14 <HAL_ADC_IRQHandler+0x264>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d009      	beq.n	80039ea <HAL_ADC_IRQHandler+0x23a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a11      	ldr	r2, [pc, #68]	; (8003a20 <HAL_ADC_IRQHandler+0x270>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d002      	beq.n	80039e6 <HAL_ADC_IRQHandler+0x236>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	e003      	b.n	80039ee <HAL_ADC_IRQHandler+0x23e>
 80039e6:	4b0f      	ldr	r3, [pc, #60]	; (8003a24 <HAL_ADC_IRQHandler+0x274>)
 80039e8:	e001      	b.n	80039ee <HAL_ADC_IRQHandler+0x23e>
 80039ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d008      	beq.n	8003a08 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2b06      	cmp	r3, #6
 8003a00:	d002      	beq.n	8003a08 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b07      	cmp	r3, #7
 8003a06:	d10f      	bne.n	8003a28 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	623b      	str	r3, [r7, #32]
 8003a10:	e01f      	b.n	8003a52 <HAL_ADC_IRQHandler+0x2a2>
 8003a12:	bf00      	nop
 8003a14:	50000100 	.word	0x50000100
 8003a18:	50000300 	.word	0x50000300
 8003a1c:	50000700 	.word	0x50000700
 8003a20:	50000500 	.word	0x50000500
 8003a24:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a8b      	ldr	r2, [pc, #556]	; (8003c5c <HAL_ADC_IRQHandler+0x4ac>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d009      	beq.n	8003a46 <HAL_ADC_IRQHandler+0x296>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a8a      	ldr	r2, [pc, #552]	; (8003c60 <HAL_ADC_IRQHandler+0x4b0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d002      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x292>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	e003      	b.n	8003a4a <HAL_ADC_IRQHandler+0x29a>
 8003a42:	4b88      	ldr	r3, [pc, #544]	; (8003c64 <HAL_ADC_IRQHandler+0x4b4>)
 8003a44:	e001      	b.n	8003a4a <HAL_ADC_IRQHandler+0x29a>
 8003a46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003a4a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d047      	beq.n	8003ae8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <HAL_ADC_IRQHandler+0x2c2>
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d03f      	beq.n	8003ae8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d13a      	bne.n	8003ae8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a7c:	2b40      	cmp	r3, #64	; 0x40
 8003a7e:	d133      	bne.n	8003ae8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d12e      	bne.n	8003ae8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff fbe4 	bl	800325c <LL_ADC_INJ_IsConversionOngoing>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d11a      	bne.n	8003ad0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aa8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d112      	bne.n	8003ae8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac6:	f043 0201 	orr.w	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ace:	e00b      	b.n	8003ae8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad4:	f043 0210 	orr.w	r2, r3, #16
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae0:	f043 0201 	orr.w	r2, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f001 f8a3 	bl	8004c34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2260      	movs	r2, #96	; 0x60
 8003af4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d011      	beq.n	8003b24 <HAL_ADC_IRQHandler+0x374>
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00c      	beq.n	8003b24 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f8be 	bl	8003c98 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2280      	movs	r2, #128	; 0x80
 8003b22:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d012      	beq.n	8003b54 <HAL_ADC_IRQHandler+0x3a4>
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00d      	beq.n	8003b54 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f001 f889 	bl	8004c5c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d012      	beq.n	8003b84 <HAL_ADC_IRQHandler+0x3d4>
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00d      	beq.n	8003b84 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f001 f87b 	bl	8004c70 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b82:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d043      	beq.n	8003c16 <HAL_ADC_IRQHandler+0x466>
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d03e      	beq.n	8003c16 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ba4:	e021      	b.n	8003bea <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d015      	beq.n	8003bd8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb4:	d004      	beq.n	8003bc0 <HAL_ADC_IRQHandler+0x410>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a28      	ldr	r2, [pc, #160]	; (8003c5c <HAL_ADC_IRQHandler+0x4ac>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d101      	bne.n	8003bc4 <HAL_ADC_IRQHandler+0x414>
 8003bc0:	4b29      	ldr	r3, [pc, #164]	; (8003c68 <HAL_ADC_IRQHandler+0x4b8>)
 8003bc2:	e000      	b.n	8003bc6 <HAL_ADC_IRQHandler+0x416>
 8003bc4:	4b29      	ldr	r3, [pc, #164]	; (8003c6c <HAL_ADC_IRQHandler+0x4bc>)
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff fa9e 	bl	8003108 <LL_ADC_GetMultiDMATransfer>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd6:	e008      	b.n	8003bea <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003be6:	2301      	movs	r3, #1
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d10e      	bne.n	8003c0e <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c00:	f043 0202 	orr.w	r2, r3, #2
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f84f 	bl	8003cac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2210      	movs	r2, #16
 8003c14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d018      	beq.n	8003c52 <HAL_ADC_IRQHandler+0x4a2>
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d013      	beq.n	8003c52 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c3a:	f043 0208 	orr.w	r2, r3, #8
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c4a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fffb 	bl	8004c48 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003c52:	bf00      	nop
 8003c54:	3728      	adds	r7, #40	; 0x28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	50000100 	.word	0x50000100
 8003c60:	50000500 	.word	0x50000500
 8003c64:	50000400 	.word	0x50000400
 8003c68:	50000300 	.word	0x50000300
 8003c6c:	50000700 	.word	0x50000700

08003c70 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b0b6      	sub	sp, #216	; 0xd8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d102      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x24>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	f000 bc13 	b.w	800450a <HAL_ADC_ConfigChannel+0x84a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff faa0 	bl	8003236 <LL_ADC_REG_IsConversionOngoing>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f040 83f3 	bne.w	80044e4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6859      	ldr	r1, [r3, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	f7ff f95b 	bl	8002fc6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fa8e 	bl	8003236 <LL_ADC_REG_IsConversionOngoing>
 8003d1a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fa9a 	bl	800325c <LL_ADC_INJ_IsConversionOngoing>
 8003d28:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003d2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f040 81d9 	bne.w	80040e8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f040 81d4 	bne.w	80040e8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d48:	d10f      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2200      	movs	r2, #0
 8003d54:	4619      	mov	r1, r3
 8003d56:	f7ff f975 	bl	8003044 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff f909 	bl	8002f7a <LL_ADC_SetSamplingTimeCommonConfig>
 8003d68:	e00e      	b.n	8003d88 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6819      	ldr	r1, [r3, #0]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	461a      	mov	r2, r3
 8003d78:	f7ff f964 	bl	8003044 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2100      	movs	r1, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff f8f9 	bl	8002f7a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	695a      	ldr	r2, [r3, #20]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	08db      	lsrs	r3, r3, #3
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d022      	beq.n	8003df0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6919      	ldr	r1, [r3, #16]
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003dba:	f7ff f853 	bl	8002e64 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6818      	ldr	r0, [r3, #0]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	6919      	ldr	r1, [r3, #16]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	f7ff f89f 	bl	8002f0e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6919      	ldr	r1, [r3, #16]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	7f1b      	ldrb	r3, [r3, #28]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d102      	bne.n	8003de6 <HAL_ADC_ConfigChannel+0x126>
 8003de0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003de4:	e000      	b.n	8003de8 <HAL_ADC_ConfigChannel+0x128>
 8003de6:	2300      	movs	r3, #0
 8003de8:	461a      	mov	r2, r3
 8003dea:	f7ff f8ab 	bl	8002f44 <LL_ADC_SetOffsetSaturation>
 8003dee:	e17b      	b.n	80040e8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2100      	movs	r1, #0
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff f858 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <HAL_ADC_ConfigChannel+0x15c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2100      	movs	r1, #0
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff f84d 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003e12:	4603      	mov	r3, r0
 8003e14:	0e9b      	lsrs	r3, r3, #26
 8003e16:	f003 021f 	and.w	r2, r3, #31
 8003e1a:	e01e      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x19a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2100      	movs	r1, #0
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff f842 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e32:	fa93 f3a3 	rbit	r3, r3
 8003e36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003e4a:	2320      	movs	r3, #32
 8003e4c:	e004      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003e4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e52:	fab3 f383 	clz	r3, r3
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d105      	bne.n	8003e72 <HAL_ADC_ConfigChannel+0x1b2>
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	0e9b      	lsrs	r3, r3, #26
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	e018      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x1e4>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003e86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003e8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003e96:	2320      	movs	r3, #32
 8003e98:	e004      	b.n	8003ea4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003e9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d106      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2200      	movs	r2, #0
 8003eae:	2100      	movs	r1, #0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff f811 	bl	8002ed8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2101      	movs	r1, #1
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe fff5 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10a      	bne.n	8003ee2 <HAL_ADC_ConfigChannel+0x222>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe ffea 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	0e9b      	lsrs	r3, r3, #26
 8003edc:	f003 021f 	and.w	r2, r3, #31
 8003ee0:	e01e      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x260>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fe ffdf 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ef8:	fa93 f3a3 	rbit	r3, r3
 8003efc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003f00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003f08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003f10:	2320      	movs	r3, #32
 8003f12:	e004      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003f14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f18:	fab3 f383 	clz	r3, r3
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d105      	bne.n	8003f38 <HAL_ADC_ConfigChannel+0x278>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	0e9b      	lsrs	r3, r3, #26
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	e018      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x2aa>
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003f4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003f5c:	2320      	movs	r3, #32
 8003f5e:	e004      	b.n	8003f6a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003f60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f64:	fab3 f383 	clz	r3, r3
 8003f68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d106      	bne.n	8003f7c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	2101      	movs	r1, #1
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7fe ffae 	bl	8002ed8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2102      	movs	r1, #2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe ff92 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <HAL_ADC_ConfigChannel+0x2e8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2102      	movs	r1, #2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fe ff87 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	0e9b      	lsrs	r3, r3, #26
 8003fa2:	f003 021f 	and.w	r2, r3, #31
 8003fa6:	e01e      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x326>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2102      	movs	r1, #2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe ff7c 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fbe:	fa93 f3a3 	rbit	r3, r3
 8003fc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003fc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003fce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003fd6:	2320      	movs	r3, #32
 8003fd8:	e004      	b.n	8003fe4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003fda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fde:	fab3 f383 	clz	r3, r3
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d105      	bne.n	8003ffe <HAL_ADC_ConfigChannel+0x33e>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	0e9b      	lsrs	r3, r3, #26
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	e016      	b.n	800402c <HAL_ADC_ConfigChannel+0x36c>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004006:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004010:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004016:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800401e:	2320      	movs	r3, #32
 8004020:	e004      	b.n	800402c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004026:	fab3 f383 	clz	r3, r3
 800402a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800402c:	429a      	cmp	r2, r3
 800402e:	d106      	bne.n	800403e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2200      	movs	r2, #0
 8004036:	2102      	movs	r1, #2
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe ff4d 	bl	8002ed8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2103      	movs	r1, #3
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe ff31 	bl	8002eac <LL_ADC_GetOffsetChannel>
 800404a:	4603      	mov	r3, r0
 800404c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <HAL_ADC_ConfigChannel+0x3aa>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2103      	movs	r1, #3
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe ff26 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8004060:	4603      	mov	r3, r0
 8004062:	0e9b      	lsrs	r3, r3, #26
 8004064:	f003 021f 	and.w	r2, r3, #31
 8004068:	e017      	b.n	800409a <HAL_ADC_ConfigChannel+0x3da>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2103      	movs	r1, #3
 8004070:	4618      	mov	r0, r3
 8004072:	f7fe ff1b 	bl	8002eac <LL_ADC_GetOffsetChannel>
 8004076:	4603      	mov	r3, r0
 8004078:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800407c:	fa93 f3a3 	rbit	r3, r3
 8004080:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004084:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004086:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800408c:	2320      	movs	r3, #32
 800408e:	e003      	b.n	8004098 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004092:	fab3 f383 	clz	r3, r3
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d105      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x3f2>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	0e9b      	lsrs	r3, r3, #26
 80040ac:	f003 031f 	and.w	r3, r3, #31
 80040b0:	e011      	b.n	80040d6 <HAL_ADC_ConfigChannel+0x416>
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040ba:	fa93 f3a3 	rbit	r3, r3
 80040be:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80040c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80040c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80040ca:	2320      	movs	r3, #32
 80040cc:	e003      	b.n	80040d6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80040ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040d0:	fab3 f383 	clz	r3, r3
 80040d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d106      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2200      	movs	r2, #0
 80040e0:	2103      	movs	r1, #3
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe fef8 	bl	8002ed8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7ff f87b 	bl	80031e8 <LL_ADC_IsEnabled>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f040 813d 	bne.w	8004374 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6819      	ldr	r1, [r3, #0]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	461a      	mov	r2, r3
 8004108:	f7fe ffc8 	bl	800309c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	4aa2      	ldr	r2, [pc, #648]	; (800439c <HAL_ADC_ConfigChannel+0x6dc>)
 8004112:	4293      	cmp	r3, r2
 8004114:	f040 812e 	bne.w	8004374 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10b      	bne.n	8004140 <HAL_ADC_ConfigChannel+0x480>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	0e9b      	lsrs	r3, r3, #26
 800412e:	3301      	adds	r3, #1
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	2b09      	cmp	r3, #9
 8004136:	bf94      	ite	ls
 8004138:	2301      	movls	r3, #1
 800413a:	2300      	movhi	r3, #0
 800413c:	b2db      	uxtb	r3, r3
 800413e:	e019      	b.n	8004174 <HAL_ADC_ConfigChannel+0x4b4>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004148:	fa93 f3a3 	rbit	r3, r3
 800414c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800414e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004150:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004158:	2320      	movs	r3, #32
 800415a:	e003      	b.n	8004164 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800415c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800415e:	fab3 f383 	clz	r3, r3
 8004162:	b2db      	uxtb	r3, r3
 8004164:	3301      	adds	r3, #1
 8004166:	f003 031f 	and.w	r3, r3, #31
 800416a:	2b09      	cmp	r3, #9
 800416c:	bf94      	ite	ls
 800416e:	2301      	movls	r3, #1
 8004170:	2300      	movhi	r3, #0
 8004172:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004174:	2b00      	cmp	r3, #0
 8004176:	d079      	beq.n	800426c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004180:	2b00      	cmp	r3, #0
 8004182:	d107      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x4d4>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	0e9b      	lsrs	r3, r3, #26
 800418a:	3301      	adds	r3, #1
 800418c:	069b      	lsls	r3, r3, #26
 800418e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004192:	e015      	b.n	80041c0 <HAL_ADC_ConfigChannel+0x500>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800419c:	fa93 f3a3 	rbit	r3, r3
 80041a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80041a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80041a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80041ac:	2320      	movs	r3, #32
 80041ae:	e003      	b.n	80041b8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80041b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b2:	fab3 f383 	clz	r3, r3
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	3301      	adds	r3, #1
 80041ba:	069b      	lsls	r3, r3, #26
 80041bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x520>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	0e9b      	lsrs	r3, r3, #26
 80041d2:	3301      	adds	r3, #1
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	2101      	movs	r1, #1
 80041da:	fa01 f303 	lsl.w	r3, r1, r3
 80041de:	e017      	b.n	8004210 <HAL_ADC_ConfigChannel+0x550>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e8:	fa93 f3a3 	rbit	r3, r3
 80041ec:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80041ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041f0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80041f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80041f8:	2320      	movs	r3, #32
 80041fa:	e003      	b.n	8004204 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80041fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041fe:	fab3 f383 	clz	r3, r3
 8004202:	b2db      	uxtb	r3, r3
 8004204:	3301      	adds	r3, #1
 8004206:	f003 031f 	and.w	r3, r3, #31
 800420a:	2101      	movs	r1, #1
 800420c:	fa01 f303 	lsl.w	r3, r1, r3
 8004210:	ea42 0103 	orr.w	r1, r2, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800421c:	2b00      	cmp	r3, #0
 800421e:	d10a      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x576>
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	0e9b      	lsrs	r3, r3, #26
 8004226:	3301      	adds	r3, #1
 8004228:	f003 021f 	and.w	r2, r3, #31
 800422c:	4613      	mov	r3, r2
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	4413      	add	r3, r2
 8004232:	051b      	lsls	r3, r3, #20
 8004234:	e018      	b.n	8004268 <HAL_ADC_ConfigChannel+0x5a8>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800423e:	fa93 f3a3 	rbit	r3, r3
 8004242:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004246:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800424e:	2320      	movs	r3, #32
 8004250:	e003      	b.n	800425a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004254:	fab3 f383 	clz	r3, r3
 8004258:	b2db      	uxtb	r3, r3
 800425a:	3301      	adds	r3, #1
 800425c:	f003 021f 	and.w	r2, r3, #31
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004268:	430b      	orrs	r3, r1
 800426a:	e07e      	b.n	800436a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004274:	2b00      	cmp	r3, #0
 8004276:	d107      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x5c8>
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	0e9b      	lsrs	r3, r3, #26
 800427e:	3301      	adds	r3, #1
 8004280:	069b      	lsls	r3, r3, #26
 8004282:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004286:	e015      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x5f4>
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004290:	fa93 f3a3 	rbit	r3, r3
 8004294:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004298:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80042a0:	2320      	movs	r3, #32
 80042a2:	e003      	b.n	80042ac <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	fab3 f383 	clz	r3, r3
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	3301      	adds	r3, #1
 80042ae:	069b      	lsls	r3, r3, #26
 80042b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d109      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x614>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	0e9b      	lsrs	r3, r3, #26
 80042c6:	3301      	adds	r3, #1
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	2101      	movs	r1, #1
 80042ce:	fa01 f303 	lsl.w	r3, r1, r3
 80042d2:	e017      	b.n	8004304 <HAL_ADC_ConfigChannel+0x644>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	fa93 f3a3 	rbit	r3, r3
 80042e0:	61fb      	str	r3, [r7, #28]
  return result;
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80042ec:	2320      	movs	r3, #32
 80042ee:	e003      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	fab3 f383 	clz	r3, r3
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	3301      	adds	r3, #1
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	2101      	movs	r1, #1
 8004300:	fa01 f303 	lsl.w	r3, r1, r3
 8004304:	ea42 0103 	orr.w	r1, r2, r3
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10d      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x670>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	0e9b      	lsrs	r3, r3, #26
 800431a:	3301      	adds	r3, #1
 800431c:	f003 021f 	and.w	r2, r3, #31
 8004320:	4613      	mov	r3, r2
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	4413      	add	r3, r2
 8004326:	3b1e      	subs	r3, #30
 8004328:	051b      	lsls	r3, r3, #20
 800432a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800432e:	e01b      	b.n	8004368 <HAL_ADC_ConfigChannel+0x6a8>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	fa93 f3a3 	rbit	r3, r3
 800433c:	613b      	str	r3, [r7, #16]
  return result;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004348:	2320      	movs	r3, #32
 800434a:	e003      	b.n	8004354 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	b2db      	uxtb	r3, r3
 8004354:	3301      	adds	r3, #1
 8004356:	f003 021f 	and.w	r2, r3, #31
 800435a:	4613      	mov	r3, r2
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	4413      	add	r3, r2
 8004360:	3b1e      	subs	r3, #30
 8004362:	051b      	lsls	r3, r3, #20
 8004364:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004368:	430b      	orrs	r3, r1
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	6892      	ldr	r2, [r2, #8]
 800436e:	4619      	mov	r1, r3
 8004370:	f7fe fe68 	bl	8003044 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <HAL_ADC_ConfigChannel+0x6e0>)
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80be 	beq.w	80044fe <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800438a:	d004      	beq.n	8004396 <HAL_ADC_ConfigChannel+0x6d6>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a04      	ldr	r2, [pc, #16]	; (80043a4 <HAL_ADC_ConfigChannel+0x6e4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10a      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x6ec>
 8004396:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <HAL_ADC_ConfigChannel+0x6e8>)
 8004398:	e009      	b.n	80043ae <HAL_ADC_ConfigChannel+0x6ee>
 800439a:	bf00      	nop
 800439c:	407f0000 	.word	0x407f0000
 80043a0:	80080000 	.word	0x80080000
 80043a4:	50000100 	.word	0x50000100
 80043a8:	50000300 	.word	0x50000300
 80043ac:	4b59      	ldr	r3, [pc, #356]	; (8004514 <HAL_ADC_ConfigChannel+0x854>)
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fe fd4a 	bl	8002e48 <LL_ADC_GetCommonPathInternalCh>
 80043b4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a56      	ldr	r2, [pc, #344]	; (8004518 <HAL_ADC_ConfigChannel+0x858>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d004      	beq.n	80043cc <HAL_ADC_ConfigChannel+0x70c>
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a55      	ldr	r2, [pc, #340]	; (800451c <HAL_ADC_ConfigChannel+0x85c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d13a      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d134      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043e0:	d005      	beq.n	80043ee <HAL_ADC_ConfigChannel+0x72e>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a4e      	ldr	r2, [pc, #312]	; (8004520 <HAL_ADC_ConfigChannel+0x860>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	f040 8085 	bne.w	80044f8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043f6:	d004      	beq.n	8004402 <HAL_ADC_ConfigChannel+0x742>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a49      	ldr	r2, [pc, #292]	; (8004524 <HAL_ADC_ConfigChannel+0x864>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d101      	bne.n	8004406 <HAL_ADC_ConfigChannel+0x746>
 8004402:	4a49      	ldr	r2, [pc, #292]	; (8004528 <HAL_ADC_ConfigChannel+0x868>)
 8004404:	e000      	b.n	8004408 <HAL_ADC_ConfigChannel+0x748>
 8004406:	4a43      	ldr	r2, [pc, #268]	; (8004514 <HAL_ADC_ConfigChannel+0x854>)
 8004408:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800440c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f7fe fd05 	bl	8002e22 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004418:	4b44      	ldr	r3, [pc, #272]	; (800452c <HAL_ADC_ConfigChannel+0x86c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	099b      	lsrs	r3, r3, #6
 800441e:	4a44      	ldr	r2, [pc, #272]	; (8004530 <HAL_ADC_ConfigChannel+0x870>)
 8004420:	fba2 2303 	umull	r2, r3, r2, r3
 8004424:	099b      	lsrs	r3, r3, #6
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	4613      	mov	r3, r2
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004432:	e002      	b.n	800443a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3b01      	subs	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1f9      	bne.n	8004434 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004440:	e05a      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a3b      	ldr	r2, [pc, #236]	; (8004534 <HAL_ADC_ConfigChannel+0x874>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d125      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x7d8>
 800444c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d11f      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a31      	ldr	r2, [pc, #196]	; (8004524 <HAL_ADC_ConfigChannel+0x864>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d104      	bne.n	800446c <HAL_ADC_ConfigChannel+0x7ac>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a34      	ldr	r2, [pc, #208]	; (8004538 <HAL_ADC_ConfigChannel+0x878>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d047      	beq.n	80044fc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004474:	d004      	beq.n	8004480 <HAL_ADC_ConfigChannel+0x7c0>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a2a      	ldr	r2, [pc, #168]	; (8004524 <HAL_ADC_ConfigChannel+0x864>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d101      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x7c4>
 8004480:	4a29      	ldr	r2, [pc, #164]	; (8004528 <HAL_ADC_ConfigChannel+0x868>)
 8004482:	e000      	b.n	8004486 <HAL_ADC_ConfigChannel+0x7c6>
 8004484:	4a23      	ldr	r2, [pc, #140]	; (8004514 <HAL_ADC_ConfigChannel+0x854>)
 8004486:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800448a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f7fe fcc6 	bl	8002e22 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004496:	e031      	b.n	80044fc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a27      	ldr	r2, [pc, #156]	; (800453c <HAL_ADC_ConfigChannel+0x87c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d12d      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d127      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a1c      	ldr	r2, [pc, #112]	; (8004524 <HAL_ADC_ConfigChannel+0x864>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d022      	beq.n	80044fe <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044c0:	d004      	beq.n	80044cc <HAL_ADC_ConfigChannel+0x80c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a17      	ldr	r2, [pc, #92]	; (8004524 <HAL_ADC_ConfigChannel+0x864>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d101      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x810>
 80044cc:	4a16      	ldr	r2, [pc, #88]	; (8004528 <HAL_ADC_ConfigChannel+0x868>)
 80044ce:	e000      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x812>
 80044d0:	4a10      	ldr	r2, [pc, #64]	; (8004514 <HAL_ADC_ConfigChannel+0x854>)
 80044d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044da:	4619      	mov	r1, r3
 80044dc:	4610      	mov	r0, r2
 80044de:	f7fe fca0 	bl	8002e22 <LL_ADC_SetCommonPathInternalCh>
 80044e2:	e00c      	b.n	80044fe <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e8:	f043 0220 	orr.w	r2, r3, #32
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80044f6:	e002      	b.n	80044fe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044f8:	bf00      	nop
 80044fa:	e000      	b.n	80044fe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004506:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800450a:	4618      	mov	r0, r3
 800450c:	37d8      	adds	r7, #216	; 0xd8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	50000700 	.word	0x50000700
 8004518:	c3210000 	.word	0xc3210000
 800451c:	90c00010 	.word	0x90c00010
 8004520:	50000600 	.word	0x50000600
 8004524:	50000100 	.word	0x50000100
 8004528:	50000300 	.word	0x50000300
 800452c:	20000000 	.word	0x20000000
 8004530:	053e2d63 	.word	0x053e2d63
 8004534:	c7520000 	.word	0xc7520000
 8004538:	50000500 	.word	0x50000500
 800453c:	cb840000 	.word	0xcb840000

08004540 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f7fe fe4b 	bl	80031e8 <LL_ADC_IsEnabled>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d14d      	bne.n	80045f4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689a      	ldr	r2, [r3, #8]
 800455e:	4b28      	ldr	r3, [pc, #160]	; (8004600 <ADC_Enable+0xc0>)
 8004560:	4013      	ands	r3, r2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00d      	beq.n	8004582 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456a:	f043 0210 	orr.w	r2, r3, #16
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004576:	f043 0201 	orr.w	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e039      	b.n	80045f6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe fe1a 	bl	80031c0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800458c:	f7fe fc08 	bl	8002da0 <HAL_GetTick>
 8004590:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004592:	e028      	b.n	80045e6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe fe25 	bl	80031e8 <LL_ADC_IsEnabled>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d104      	bne.n	80045ae <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7fe fe09 	bl	80031c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045ae:	f7fe fbf7 	bl	8002da0 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d914      	bls.n	80045e6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0301 	and.w	r3, r3, #1
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d00d      	beq.n	80045e6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	f043 0210 	orr.w	r2, r3, #16
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045da:	f043 0201 	orr.w	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e007      	b.n	80045f6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d1cf      	bne.n	8004594 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	8000003f 	.word	0x8000003f

08004604 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004610:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004616:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800461a:	2b00      	cmp	r3, #0
 800461c:	d14b      	bne.n	80046b6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004622:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d021      	beq.n	800467c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4618      	mov	r0, r3
 800463e:	f7fe fcaf 	bl	8002fa0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d032      	beq.n	80046ae <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d12b      	bne.n	80046ae <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800465a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d11f      	bne.n	80046ae <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004672:	f043 0201 	orr.w	r2, r3, #1
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	65da      	str	r2, [r3, #92]	; 0x5c
 800467a:	e018      	b.n	80046ae <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d111      	bne.n	80046ae <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d105      	bne.n	80046ae <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a6:	f043 0201 	orr.w	r2, r3, #1
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f7ff fade 	bl	8003c70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046b4:	e00e      	b.n	80046d4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f7ff faf2 	bl	8003cac <HAL_ADC_ErrorCallback>
}
 80046c8:	e004      	b.n	80046d4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	4798      	blx	r3
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f7ff faca 	bl	8003c84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004704:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800470a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004716:	f043 0204 	orr.w	r2, r3, #4
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff fac4 	bl	8003cac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <LL_ADC_SetCommonPathInternalCh>:
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	609a      	str	r2, [r3, #8]
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <LL_ADC_GetCommonPathInternalCh>:
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
	...

08004770 <LL_ADC_SetOffset>:
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3360      	adds	r3, #96	; 0x60
 8004782:	461a      	mov	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <LL_ADC_SetOffset+0x44>)
 8004792:	4013      	ands	r3, r2
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	4313      	orrs	r3, r2
 80047a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	601a      	str	r2, [r3, #0]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr
 80047b4:	03fff000 	.word	0x03fff000

080047b8 <LL_ADC_GetOffsetChannel>:
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3360      	adds	r3, #96	; 0x60
 80047c6:	461a      	mov	r2, r3
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <LL_ADC_SetOffsetState>:
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3360      	adds	r3, #96	; 0x60
 80047f4:	461a      	mov	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	431a      	orrs	r2, r3
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	601a      	str	r2, [r3, #0]
}
 800480e:	bf00      	nop
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <LL_ADC_SetOffsetSign>:
{
 800481a:	b480      	push	{r7}
 800481c:	b087      	sub	sp, #28
 800481e:	af00      	add	r7, sp, #0
 8004820:	60f8      	str	r0, [r7, #12]
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3360      	adds	r3, #96	; 0x60
 800482a:	461a      	mov	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	431a      	orrs	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	601a      	str	r2, [r3, #0]
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <LL_ADC_SetOffsetSaturation>:
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3360      	adds	r3, #96	; 0x60
 8004860:	461a      	mov	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	431a      	orrs	r2, r3
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	601a      	str	r2, [r3, #0]
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	615a      	str	r2, [r3, #20]
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <LL_ADC_INJ_GetTrigAuto>:
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <LL_ADC_SetChannelSamplingTime>:
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3314      	adds	r3, #20
 80048d8:	461a      	mov	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	0e5b      	lsrs	r3, r3, #25
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	4413      	add	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	0d1b      	lsrs	r3, r3, #20
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	2107      	movs	r1, #7
 80048f6:	fa01 f303 	lsl.w	r3, r1, r3
 80048fa:	43db      	mvns	r3, r3
 80048fc:	401a      	ands	r2, r3
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	0d1b      	lsrs	r3, r3, #20
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	fa01 f303 	lsl.w	r3, r1, r3
 800490c:	431a      	orrs	r2, r3
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	bf00      	nop
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <LL_ADC_SetChannelSingleDiff>:
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4a0f      	ldr	r2, [pc, #60]	; (800496c <LL_ADC_SetChannelSingleDiff+0x4c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d10a      	bne.n	800494a <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004940:	431a      	orrs	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004948:	e00a      	b.n	8004960 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004956:	43db      	mvns	r3, r3
 8004958:	401a      	ands	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	407f0000 	.word	0x407f0000

08004970 <LL_ADC_GetMultimode>:
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 031f 	and.w	r3, r3, #31
}
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <LL_ADC_IsEnabled>:
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <LL_ADC_IsEnabled+0x18>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <LL_ADC_IsEnabled+0x1a>
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d101      	bne.n	80049ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <LL_ADC_INJ_StartConversion>:
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80049ec:	f043 0208 	orr.w	r2, r3, #8
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	609a      	str	r2, [r3, #8]
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <LL_ADC_INJ_IsConversionOngoing>:
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d101      	bne.n	8004a18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
	...

08004a28 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a38:	d004      	beq.n	8004a44 <HAL_ADCEx_InjectedStart_IT+0x1c>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a78      	ldr	r2, [pc, #480]	; (8004c20 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d101      	bne.n	8004a48 <HAL_ADCEx_InjectedStart_IT+0x20>
 8004a44:	4b77      	ldr	r3, [pc, #476]	; (8004c24 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 8004a46:	e000      	b.n	8004a4a <HAL_ADCEx_InjectedStart_IT+0x22>
 8004a48:	4b77      	ldr	r3, [pc, #476]	; (8004c28 <HAL_ADCEx_InjectedStart_IT+0x200>)
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff ff90 	bl	8004970 <LL_ADC_GetMultimode>
 8004a50:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7ff ffd2 	bl	8004a00 <LL_ADC_INJ_IsConversionOngoing>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 8004a62:	2302      	movs	r3, #2
 8004a64:	e0d8      	b.n	8004c18 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a70:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a78:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d107      	bne.n	8004a96 <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8a:	f043 0220 	orr.w	r2, r3, #32
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e0c0      	b.n	8004c18 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_ADCEx_InjectedStart_IT+0x7c>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e0b9      	b.n	8004c18 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff fd47 	bl	8004540 <ADC_Enable>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f040 80a8 	bne.w	8004c0e <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d006      	beq.n	8004ad8 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ace:	f023 0208 	bic.w	r2, r3, #8
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	661a      	str	r2, [r3, #96]	; 0x60
 8004ad6:	e002      	b.n	8004ade <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ae2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ae6:	f023 0301 	bic.w	r3, r3, #1
 8004aea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a4a      	ldr	r2, [pc, #296]	; (8004c20 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d009      	beq.n	8004b10 <HAL_ADCEx_InjectedStart_IT+0xe8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a4a      	ldr	r2, [pc, #296]	; (8004c2c <HAL_ADCEx_InjectedStart_IT+0x204>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d002      	beq.n	8004b0c <HAL_ADCEx_InjectedStart_IT+0xe4>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	e003      	b.n	8004b14 <HAL_ADCEx_InjectedStart_IT+0xec>
 8004b0c:	4b48      	ldr	r3, [pc, #288]	; (8004c30 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8004b0e:	e001      	b.n	8004b14 <HAL_ADCEx_InjectedStart_IT+0xec>
 8004b10:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d002      	beq.n	8004b22 <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d105      	bne.n	8004b2e <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b26:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2260      	movs	r2, #96	; 0x60
 8004b34:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d007      	beq.n	8004b5c <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b5a:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d110      	bne.n	8004b86 <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0220 	bic.w	r2, r2, #32
 8004b72:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b82:	605a      	str	r2, [r3, #4]
          break;
 8004b84:	e010      	b.n	8004ba8 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b94:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0220 	orr.w	r2, r2, #32
 8004ba4:	605a      	str	r2, [r3, #4]
          break;
 8004ba6:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1c      	ldr	r2, [pc, #112]	; (8004c20 <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d009      	beq.n	8004bc6 <HAL_ADCEx_InjectedStart_IT+0x19e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a1d      	ldr	r2, [pc, #116]	; (8004c2c <HAL_ADCEx_InjectedStart_IT+0x204>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d002      	beq.n	8004bc2 <HAL_ADCEx_InjectedStart_IT+0x19a>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	e003      	b.n	8004bca <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8004bc2:	4b1b      	ldr	r3, [pc, #108]	; (8004c30 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8004bc4:	e001      	b.n	8004bca <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8004bc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6812      	ldr	r2, [r2, #0]
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d008      	beq.n	8004be4 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d005      	beq.n	8004be4 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2b06      	cmp	r3, #6
 8004bdc:	d002      	beq.n	8004be4 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b07      	cmp	r3, #7
 8004be2:	d10d      	bne.n	8004c00 <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff fe5f 	bl	80048ac <LL_ADC_INJ_GetTrigAuto>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d110      	bne.n	8004c16 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff feed 	bl	80049d8 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8004bfe:	e00a      	b.n	8004c16 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c04:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c0c:	e003      	b.n	8004c16 <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	50000100 	.word	0x50000100
 8004c24:	50000300 	.word	0x50000300
 8004c28:	50000700 	.word	0x50000700
 8004c2c:	50000500 	.word	0x50000500
 8004c30:	50000400 	.word	0x50000400

08004c34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b0b6      	sub	sp, #216	; 0xd8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d102      	bne.n	8004cc2 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	f000 bcfd 	b.w	80056bc <HAL_ADCEx_InjectedConfigChannel+0xa24>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d130      	bne.n	8004d3c <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b09      	cmp	r3, #9
 8004ce0:	d179      	bne.n	8004dd6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d010      	beq.n	8004d0c <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	0e9b      	lsrs	r3, r3, #26
 8004cf0:	025b      	lsls	r3, r3, #9
 8004cf2:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004cfe:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d0a:	e007      	b.n	8004d1c <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	0e9b      	lsrs	r3, r3, #26
 8004d12:	025b      	lsls	r3, r3, #9
 8004d14:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8004d18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d22:	4b84      	ldr	r3, [pc, #528]	; (8004f34 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d38:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004d3a:	e04c      	b.n	8004dd6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d11d      	bne.n	8004d80 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	6a1a      	ldr	r2, [r3, #32]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00d      	beq.n	8004d76 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004d68:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d74:	e004      	b.n	8004d80 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	0e9b      	lsrs	r3, r3, #26
 8004d86:	f003 021f 	and.w	r2, r3, #31
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f003 031f 	and.w	r3, r3, #31
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004da4:	1e5a      	subs	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004dae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10a      	bne.n	8004dd6 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004dc6:	4b5b      	ldr	r3, [pc, #364]	; (8004f34 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7ff fe10 	bl	8004a00 <LL_ADC_INJ_IsConversionOngoing>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d124      	bne.n	8004e30 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d112      	bne.n	8004e16 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004e00:	055a      	lsls	r2, r3, #21
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e08:	051b      	lsls	r3, r3, #20
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	60da      	str	r2, [r3, #12]
 8004e14:	e00c      	b.n	8004e30 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8004e26:	055a      	lsls	r2, r3, #21
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fdbc 	bl	80049b2 <LL_ADC_REG_IsConversionOngoing>
 8004e3a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff fddc 	bl	8004a00 <LL_ADC_INJ_IsConversionOngoing>
 8004e48:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f040 822e 	bne.w	80052b2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f040 8229 	bne.w	80052b2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d116      	bne.n	8004e9e <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d108      	bne.n	8004e8c <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004e88:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004e8a:	e01f      	b.n	8004ecc <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004e9a:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004e9c:	e016      	b.n	8004ecc <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d109      	bne.n	8004ebc <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eac:	f043 0220 	orr.w	r2, r3, #32
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004eba:	e007      	b.n	8004ecc <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004eca:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d110      	bne.n	8004ef8 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	430b      	orrs	r3, r1
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f042 0202 	orr.w	r2, r2, #2
 8004ef4:	611a      	str	r2, [r3, #16]
 8004ef6:	e007      	b.n	8004f08 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0202 	bic.w	r2, r2, #2
 8004f06:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f10:	d112      	bne.n	8004f38 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	f7ff fcd3 	bl	80048c8 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fcab 	bl	8004886 <LL_ADC_SetSamplingTimeCommonConfig>
 8004f30:	e011      	b.n	8004f56 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8004f32:	bf00      	nop
 8004f34:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	6819      	ldr	r1, [r3, #0]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	461a      	mov	r2, r3
 8004f46:	f7ff fcbf 	bl	80048c8 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2100      	movs	r1, #0
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff fc98 	bl	8004886 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695a      	ldr	r2, [r3, #20]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	08db      	lsrs	r3, r3, #3
 8004f62:	f003 0303 	and.w	r3, r3, #3
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d022      	beq.n	8004fbe <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6818      	ldr	r0, [r3, #0]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	6919      	ldr	r1, [r3, #16]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f88:	f7ff fbf2 	bl	8004770 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	6919      	ldr	r1, [r3, #16]
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	f7ff fc3e 	bl	800481a <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d102      	bne.n	8004fb4 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8004fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fb2:	e000      	b.n	8004fb6 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f7ff fc4a 	bl	8004850 <LL_ADC_SetOffsetSaturation>
 8004fbc:	e179      	b.n	80052b2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff fbf7 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <HAL_ADCEx_InjectedConfigChannel+0x352>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2100      	movs	r1, #0
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff fbec 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	0e9b      	lsrs	r3, r3, #26
 8004fe4:	f003 021f 	and.w	r2, r3, #31
 8004fe8:	e01e      	b.n	8005028 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2100      	movs	r1, #0
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7ff fbe1 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005000:	fa93 f3a3 	rbit	r3, r3
 8005004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8005008:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800500c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8005010:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8005018:	2320      	movs	r3, #32
 800501a:	e004      	b.n	8005026 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 800501c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005020:	fab3 f383 	clz	r3, r3
 8005024:	b2db      	uxtb	r3, r3
 8005026:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005030:	2b00      	cmp	r3, #0
 8005032:	d105      	bne.n	8005040 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	0e9b      	lsrs	r3, r3, #26
 800503a:	f003 031f 	and.w	r3, r3, #31
 800503e:	e018      	b.n	8005072 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800504c:	fa93 f3a3 	rbit	r3, r3
 8005050:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005054:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005058:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800505c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8005064:	2320      	movs	r3, #32
 8005066:	e004      	b.n	8005072 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8005068:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800506c:	fab3 f383 	clz	r3, r3
 8005070:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005072:	429a      	cmp	r2, r3
 8005074:	d106      	bne.n	8005084 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2200      	movs	r2, #0
 800507c:	2100      	movs	r1, #0
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff fbb0 	bl	80047e4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2101      	movs	r1, #1
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fb94 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 8005090:	4603      	mov	r3, r0
 8005092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10a      	bne.n	80050b0 <HAL_ADCEx_InjectedConfigChannel+0x418>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2101      	movs	r1, #1
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff fb89 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 80050a6:	4603      	mov	r3, r0
 80050a8:	0e9b      	lsrs	r3, r3, #26
 80050aa:	f003 021f 	and.w	r2, r3, #31
 80050ae:	e01e      	b.n	80050ee <HAL_ADCEx_InjectedConfigChannel+0x456>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2101      	movs	r1, #1
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff fb7e 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 80050bc:	4603      	mov	r3, r0
 80050be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050c6:	fa93 f3a3 	rbit	r3, r3
 80050ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80050ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80050d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 80050de:	2320      	movs	r3, #32
 80050e0:	e004      	b.n	80050ec <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 80050e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80050e6:	fab3 f383 	clz	r3, r3
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d105      	bne.n	8005106 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	0e9b      	lsrs	r3, r3, #26
 8005100:	f003 031f 	and.w	r3, r3, #31
 8005104:	e018      	b.n	8005138 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005112:	fa93 f3a3 	rbit	r3, r3
 8005116:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800511a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800511e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8005122:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 800512a:	2320      	movs	r3, #32
 800512c:	e004      	b.n	8005138 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 800512e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005132:	fab3 f383 	clz	r3, r3
 8005136:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005138:	429a      	cmp	r2, r3
 800513a:	d106      	bne.n	800514a <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2200      	movs	r2, #0
 8005142:	2101      	movs	r1, #1
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fb4d 	bl	80047e4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2102      	movs	r1, #2
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff fb31 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 8005156:	4603      	mov	r3, r0
 8005158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800515c:	2b00      	cmp	r3, #0
 800515e:	d10a      	bne.n	8005176 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2102      	movs	r1, #2
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff fb26 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 800516c:	4603      	mov	r3, r0
 800516e:	0e9b      	lsrs	r3, r3, #26
 8005170:	f003 021f 	and.w	r2, r3, #31
 8005174:	e01e      	b.n	80051b4 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2102      	movs	r1, #2
 800517c:	4618      	mov	r0, r3
 800517e:	f7ff fb1b 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 8005182:	4603      	mov	r3, r0
 8005184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005188:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800518c:	fa93 f3a3 	rbit	r3, r3
 8005190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8005194:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005198:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800519c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80051a4:	2320      	movs	r3, #32
 80051a6:	e004      	b.n	80051b2 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80051a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051ac:	fab3 f383 	clz	r3, r3
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d105      	bne.n	80051cc <HAL_ADCEx_InjectedConfigChannel+0x534>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	0e9b      	lsrs	r3, r3, #26
 80051c6:	f003 031f 	and.w	r3, r3, #31
 80051ca:	e014      	b.n	80051f6 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051d4:	fa93 f3a3 	rbit	r3, r3
 80051d8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80051da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80051e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 80051e8:	2320      	movs	r3, #32
 80051ea:	e004      	b.n	80051f6 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 80051ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051f0:	fab3 f383 	clz	r3, r3
 80051f4:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d106      	bne.n	8005208 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2200      	movs	r2, #0
 8005200:	2102      	movs	r1, #2
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff faee 	bl	80047e4 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2103      	movs	r1, #3
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff fad2 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 8005214:	4603      	mov	r3, r0
 8005216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2103      	movs	r1, #3
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff fac7 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 800522a:	4603      	mov	r3, r0
 800522c:	0e9b      	lsrs	r3, r3, #26
 800522e:	f003 021f 	and.w	r2, r3, #31
 8005232:	e017      	b.n	8005264 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2103      	movs	r1, #3
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff fabc 	bl	80047b8 <LL_ADC_GetOffsetChannel>
 8005240:	4603      	mov	r3, r0
 8005242:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005244:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005246:	fa93 f3a3 	rbit	r3, r3
 800524a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800524c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8005250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8005256:	2320      	movs	r3, #32
 8005258:	e003      	b.n	8005262 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 800525a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800525c:	fab3 f383 	clz	r3, r3
 8005260:	b2db      	uxtb	r3, r3
 8005262:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800526c:	2b00      	cmp	r3, #0
 800526e:	d105      	bne.n	800527c <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	0e9b      	lsrs	r3, r3, #26
 8005276:	f003 031f 	and.w	r3, r3, #31
 800527a:	e011      	b.n	80052a0 <HAL_ADCEx_InjectedConfigChannel+0x608>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005282:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005284:	fa93 f3a3 	rbit	r3, r3
 8005288:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800528a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800528c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800528e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8005294:	2320      	movs	r3, #32
 8005296:	e003      	b.n	80052a0 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8005298:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800529a:	fab3 f383 	clz	r3, r3
 800529e:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d106      	bne.n	80052b2 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2103      	movs	r1, #3
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff fa99 	bl	80047e4 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff fb68 	bl	800498c <LL_ADC_IsEnabled>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f040 813d 	bne.w	800553e <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6818      	ldr	r0, [r3, #0]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	6819      	ldr	r1, [r3, #0]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	461a      	mov	r2, r3
 80052d2:	f7ff fb25 	bl	8004920 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	4aa2      	ldr	r2, [pc, #648]	; (8005564 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	f040 812e 	bne.w	800553e <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10b      	bne.n	800530a <HAL_ADCEx_InjectedConfigChannel+0x672>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	0e9b      	lsrs	r3, r3, #26
 80052f8:	3301      	adds	r3, #1
 80052fa:	f003 031f 	and.w	r3, r3, #31
 80052fe:	2b09      	cmp	r3, #9
 8005300:	bf94      	ite	ls
 8005302:	2301      	movls	r3, #1
 8005304:	2300      	movhi	r3, #0
 8005306:	b2db      	uxtb	r3, r3
 8005308:	e019      	b.n	800533e <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005312:	fa93 f3a3 	rbit	r3, r3
 8005316:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800531a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800531c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8005322:	2320      	movs	r3, #32
 8005324:	e003      	b.n	800532e <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8005326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005328:	fab3 f383 	clz	r3, r3
 800532c:	b2db      	uxtb	r3, r3
 800532e:	3301      	adds	r3, #1
 8005330:	f003 031f 	and.w	r3, r3, #31
 8005334:	2b09      	cmp	r3, #9
 8005336:	bf94      	ite	ls
 8005338:	2301      	movls	r3, #1
 800533a:	2300      	movhi	r3, #0
 800533c:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800533e:	2b00      	cmp	r3, #0
 8005340:	d079      	beq.n	8005436 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800534a:	2b00      	cmp	r3, #0
 800534c:	d107      	bne.n	800535e <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	0e9b      	lsrs	r3, r3, #26
 8005354:	3301      	adds	r3, #1
 8005356:	069b      	lsls	r3, r3, #26
 8005358:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800535c:	e015      	b.n	800538a <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005366:	fa93 f3a3 	rbit	r3, r3
 800536a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800536c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800536e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8005376:	2320      	movs	r3, #32
 8005378:	e003      	b.n	8005382 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 800537a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800537c:	fab3 f383 	clz	r3, r3
 8005380:	b2db      	uxtb	r3, r3
 8005382:	3301      	adds	r3, #1
 8005384:	069b      	lsls	r3, r3, #26
 8005386:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <HAL_ADCEx_InjectedConfigChannel+0x712>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	0e9b      	lsrs	r3, r3, #26
 800539c:	3301      	adds	r3, #1
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	2101      	movs	r1, #1
 80053a4:	fa01 f303 	lsl.w	r3, r1, r3
 80053a8:	e017      	b.n	80053da <HAL_ADCEx_InjectedConfigChannel+0x742>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b2:	fa93 f3a3 	rbit	r3, r3
 80053b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80053b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80053bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 80053c2:	2320      	movs	r3, #32
 80053c4:	e003      	b.n	80053ce <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 80053c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053c8:	fab3 f383 	clz	r3, r3
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	3301      	adds	r3, #1
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	2101      	movs	r1, #1
 80053d6:	fa01 f303 	lsl.w	r3, r1, r3
 80053da:	ea42 0103 	orr.w	r1, r2, r3
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <HAL_ADCEx_InjectedConfigChannel+0x768>
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	0e9b      	lsrs	r3, r3, #26
 80053f0:	3301      	adds	r3, #1
 80053f2:	f003 021f 	and.w	r2, r3, #31
 80053f6:	4613      	mov	r3, r2
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	4413      	add	r3, r2
 80053fc:	051b      	lsls	r3, r3, #20
 80053fe:	e018      	b.n	8005432 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005408:	fa93 f3a3 	rbit	r3, r3
 800540c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8005412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8005418:	2320      	movs	r3, #32
 800541a:	e003      	b.n	8005424 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 800541c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541e:	fab3 f383 	clz	r3, r3
 8005422:	b2db      	uxtb	r3, r3
 8005424:	3301      	adds	r3, #1
 8005426:	f003 021f 	and.w	r2, r3, #31
 800542a:	4613      	mov	r3, r2
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	4413      	add	r3, r2
 8005430:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005432:	430b      	orrs	r3, r1
 8005434:	e07e      	b.n	8005534 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800543e:	2b00      	cmp	r3, #0
 8005440:	d107      	bne.n	8005452 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	0e9b      	lsrs	r3, r3, #26
 8005448:	3301      	adds	r3, #1
 800544a:	069b      	lsls	r3, r3, #26
 800544c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005450:	e015      	b.n	800547e <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	fa93 f3a3 	rbit	r3, r3
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 800546a:	2320      	movs	r3, #32
 800546c:	e003      	b.n	8005476 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	fab3 f383 	clz	r3, r3
 8005474:	b2db      	uxtb	r3, r3
 8005476:	3301      	adds	r3, #1
 8005478:	069b      	lsls	r3, r3, #26
 800547a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <HAL_ADCEx_InjectedConfigChannel+0x806>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	0e9b      	lsrs	r3, r3, #26
 8005490:	3301      	adds	r3, #1
 8005492:	f003 031f 	and.w	r3, r3, #31
 8005496:	2101      	movs	r1, #1
 8005498:	fa01 f303 	lsl.w	r3, r1, r3
 800549c:	e017      	b.n	80054ce <HAL_ADCEx_InjectedConfigChannel+0x836>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	fa93 f3a3 	rbit	r3, r3
 80054aa:	61bb      	str	r3, [r7, #24]
  return result;
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80054b6:	2320      	movs	r3, #32
 80054b8:	e003      	b.n	80054c2 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 80054ba:	6a3b      	ldr	r3, [r7, #32]
 80054bc:	fab3 f383 	clz	r3, r3
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	3301      	adds	r3, #1
 80054c4:	f003 031f 	and.w	r3, r3, #31
 80054c8:	2101      	movs	r1, #1
 80054ca:	fa01 f303 	lsl.w	r3, r1, r3
 80054ce:	ea42 0103 	orr.w	r1, r2, r3
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10d      	bne.n	80054fa <HAL_ADCEx_InjectedConfigChannel+0x862>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	0e9b      	lsrs	r3, r3, #26
 80054e4:	3301      	adds	r3, #1
 80054e6:	f003 021f 	and.w	r2, r3, #31
 80054ea:	4613      	mov	r3, r2
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	4413      	add	r3, r2
 80054f0:	3b1e      	subs	r3, #30
 80054f2:	051b      	lsls	r3, r3, #20
 80054f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054f8:	e01b      	b.n	8005532 <HAL_ADCEx_InjectedConfigChannel+0x89a>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	fa93 f3a3 	rbit	r3, r3
 8005506:	60fb      	str	r3, [r7, #12]
  return result;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 8005512:	2320      	movs	r3, #32
 8005514:	e003      	b.n	800551e <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	fab3 f383 	clz	r3, r3
 800551c:	b2db      	uxtb	r3, r3
 800551e:	3301      	adds	r3, #1
 8005520:	f003 021f 	and.w	r2, r3, #31
 8005524:	4613      	mov	r3, r2
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	4413      	add	r3, r2
 800552a:	3b1e      	subs	r3, #30
 800552c:	051b      	lsls	r3, r3, #20
 800552e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005532:	430b      	orrs	r3, r1
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	6892      	ldr	r2, [r2, #8]
 8005538:	4619      	mov	r1, r3
 800553a:	f7ff f9c5 	bl	80048c8 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b09      	ldr	r3, [pc, #36]	; (8005568 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8005544:	4013      	ands	r3, r2
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 80b2 	beq.w	80056b0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005554:	d004      	beq.n	8005560 <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a04      	ldr	r2, [pc, #16]	; (800556c <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d109      	bne.n	8005574 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 8005560:	4b03      	ldr	r3, [pc, #12]	; (8005570 <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 8005562:	e008      	b.n	8005576 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8005564:	407f0000 	.word	0x407f0000
 8005568:	80080000 	.word	0x80080000
 800556c:	50000100 	.word	0x50000100
 8005570:	50000300 	.word	0x50000300
 8005574:	4b53      	ldr	r3, [pc, #332]	; (80056c4 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff f8eb 	bl	8004752 <LL_ADC_GetCommonPathInternalCh>
 800557c:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a50      	ldr	r2, [pc, #320]	; (80056c8 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a4f      	ldr	r2, [pc, #316]	; (80056cc <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d139      	bne.n	8005608 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005594:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d133      	bne.n	8005608 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055a8:	d004      	beq.n	80055b4 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a48      	ldr	r2, [pc, #288]	; (80056d0 <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d17a      	bne.n	80056aa <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055bc:	d004      	beq.n	80055c8 <HAL_ADCEx_InjectedConfigChannel+0x930>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a44      	ldr	r2, [pc, #272]	; (80056d4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d101      	bne.n	80055cc <HAL_ADCEx_InjectedConfigChannel+0x934>
 80055c8:	4a43      	ldr	r2, [pc, #268]	; (80056d8 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 80055ca:	e000      	b.n	80055ce <HAL_ADCEx_InjectedConfigChannel+0x936>
 80055cc:	4a3d      	ldr	r2, [pc, #244]	; (80056c4 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 80055ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80055d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80055d6:	4619      	mov	r1, r3
 80055d8:	4610      	mov	r0, r2
 80055da:	f7ff f8a7 	bl	800472c <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80055de:	4b3f      	ldr	r3, [pc, #252]	; (80056dc <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	099b      	lsrs	r3, r3, #6
 80055e4:	4a3e      	ldr	r2, [pc, #248]	; (80056e0 <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 80055e6:	fba2 2303 	umull	r2, r3, r2, r3
 80055ea:	099a      	lsrs	r2, r3, #6
 80055ec:	4613      	mov	r3, r2
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	3318      	adds	r3, #24
 80055f6:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80055f8:	e002      	b.n	8005600 <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1f9      	bne.n	80055fa <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005606:	e050      	b.n	80056aa <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a35      	ldr	r2, [pc, #212]	; (80056e4 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d125      	bne.n	800565e <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005612:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005616:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d11f      	bne.n	800565e <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a2c      	ldr	r2, [pc, #176]	; (80056d4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d104      	bne.n	8005632 <HAL_ADCEx_InjectedConfigChannel+0x99a>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a2e      	ldr	r2, [pc, #184]	; (80056e8 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d03d      	beq.n	80056ae <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800563a:	d004      	beq.n	8005646 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a24      	ldr	r2, [pc, #144]	; (80056d4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d101      	bne.n	800564a <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8005646:	4a24      	ldr	r2, [pc, #144]	; (80056d8 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8005648:	e000      	b.n	800564c <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 800564a:	4a1e      	ldr	r2, [pc, #120]	; (80056c4 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800564c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005650:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005654:	4619      	mov	r1, r3
 8005656:	4610      	mov	r0, r2
 8005658:	f7ff f868 	bl	800472c <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800565c:	e027      	b.n	80056ae <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a22      	ldr	r2, [pc, #136]	; (80056ec <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d123      	bne.n	80056b0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800566c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d11d      	bne.n	80056b0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a16      	ldr	r2, [pc, #88]	; (80056d4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d018      	beq.n	80056b0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005686:	d004      	beq.n	8005692 <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a11      	ldr	r2, [pc, #68]	; (80056d4 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d101      	bne.n	8005696 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 8005692:	4a11      	ldr	r2, [pc, #68]	; (80056d8 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8005694:	e000      	b.n	8005698 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8005696:	4a0b      	ldr	r2, [pc, #44]	; (80056c4 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8005698:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800569c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80056a0:	4619      	mov	r1, r3
 80056a2:	4610      	mov	r0, r2
 80056a4:	f7ff f842 	bl	800472c <LL_ADC_SetCommonPathInternalCh>
 80056a8:	e002      	b.n	80056b0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056aa:	bf00      	nop
 80056ac:	e000      	b.n	80056b0 <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80056ae:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80056b8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80056bc:	4618      	mov	r0, r3
 80056be:	37d8      	adds	r7, #216	; 0xd8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	50000700 	.word	0x50000700
 80056c8:	c3210000 	.word	0xc3210000
 80056cc:	90c00010 	.word	0x90c00010
 80056d0:	50000600 	.word	0x50000600
 80056d4:	50000100 	.word	0x50000100
 80056d8:	50000300 	.word	0x50000300
 80056dc:	20000000 	.word	0x20000000
 80056e0:	053e2d63 	.word	0x053e2d63
 80056e4:	c7520000 	.word	0xc7520000
 80056e8:	50000500 	.word	0x50000500
 80056ec:	cb840000 	.word	0xcb840000

080056f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80056f0:	b590      	push	{r4, r7, lr}
 80056f2:	b0a1      	sub	sp, #132	; 0x84
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800570a:	2302      	movs	r3, #2
 800570c:	e0e7      	b.n	80058de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005716:	2300      	movs	r3, #0
 8005718:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800571a:	2300      	movs	r3, #0
 800571c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005726:	d102      	bne.n	800572e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005728:	4b6f      	ldr	r3, [pc, #444]	; (80058e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800572a:	60bb      	str	r3, [r7, #8]
 800572c:	e009      	b.n	8005742 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a6e      	ldr	r2, [pc, #440]	; (80058ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d102      	bne.n	800573e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005738:	4b6d      	ldr	r3, [pc, #436]	; (80058f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800573a:	60bb      	str	r3, [r7, #8]
 800573c:	e001      	b.n	8005742 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10b      	bne.n	8005760 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800574c:	f043 0220 	orr.w	r2, r3, #32
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e0be      	b.n	80058de <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff f925 	bl	80049b2 <LL_ADC_REG_IsConversionOngoing>
 8005768:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff f91f 	bl	80049b2 <LL_ADC_REG_IsConversionOngoing>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	f040 80a0 	bne.w	80058bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800577c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800577e:	2b00      	cmp	r3, #0
 8005780:	f040 809c 	bne.w	80058bc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800578c:	d004      	beq.n	8005798 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a55      	ldr	r2, [pc, #340]	; (80058e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d101      	bne.n	800579c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005798:	4b56      	ldr	r3, [pc, #344]	; (80058f4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800579a:	e000      	b.n	800579e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800579c:	4b56      	ldr	r3, [pc, #344]	; (80058f8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800579e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d04b      	beq.n	8005840 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80057a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	6859      	ldr	r1, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057ba:	035b      	lsls	r3, r3, #13
 80057bc:	430b      	orrs	r3, r1
 80057be:	431a      	orrs	r2, r3
 80057c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057cc:	d004      	beq.n	80057d8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a45      	ldr	r2, [pc, #276]	; (80058e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d10f      	bne.n	80057f8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80057d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80057dc:	f7ff f8d6 	bl	800498c <LL_ADC_IsEnabled>
 80057e0:	4604      	mov	r4, r0
 80057e2:	4841      	ldr	r0, [pc, #260]	; (80058e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80057e4:	f7ff f8d2 	bl	800498c <LL_ADC_IsEnabled>
 80057e8:	4603      	mov	r3, r0
 80057ea:	4323      	orrs	r3, r4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bf0c      	ite	eq
 80057f0:	2301      	moveq	r3, #1
 80057f2:	2300      	movne	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	e012      	b.n	800581e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80057f8:	483c      	ldr	r0, [pc, #240]	; (80058ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80057fa:	f7ff f8c7 	bl	800498c <LL_ADC_IsEnabled>
 80057fe:	4604      	mov	r4, r0
 8005800:	483b      	ldr	r0, [pc, #236]	; (80058f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005802:	f7ff f8c3 	bl	800498c <LL_ADC_IsEnabled>
 8005806:	4603      	mov	r3, r0
 8005808:	431c      	orrs	r4, r3
 800580a:	483c      	ldr	r0, [pc, #240]	; (80058fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800580c:	f7ff f8be 	bl	800498c <LL_ADC_IsEnabled>
 8005810:	4603      	mov	r3, r0
 8005812:	4323      	orrs	r3, r4
 8005814:	2b00      	cmp	r3, #0
 8005816:	bf0c      	ite	eq
 8005818:	2301      	moveq	r3, #1
 800581a:	2300      	movne	r3, #0
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d056      	beq.n	80058d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005822:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800582a:	f023 030f 	bic.w	r3, r3, #15
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	6811      	ldr	r1, [r2, #0]
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	6892      	ldr	r2, [r2, #8]
 8005836:	430a      	orrs	r2, r1
 8005838:	431a      	orrs	r2, r3
 800583a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800583c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800583e:	e047      	b.n	80058d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800584a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005854:	d004      	beq.n	8005860 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a23      	ldr	r2, [pc, #140]	; (80058e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d10f      	bne.n	8005880 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005860:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005864:	f7ff f892 	bl	800498c <LL_ADC_IsEnabled>
 8005868:	4604      	mov	r4, r0
 800586a:	481f      	ldr	r0, [pc, #124]	; (80058e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800586c:	f7ff f88e 	bl	800498c <LL_ADC_IsEnabled>
 8005870:	4603      	mov	r3, r0
 8005872:	4323      	orrs	r3, r4
 8005874:	2b00      	cmp	r3, #0
 8005876:	bf0c      	ite	eq
 8005878:	2301      	moveq	r3, #1
 800587a:	2300      	movne	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	e012      	b.n	80058a6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005880:	481a      	ldr	r0, [pc, #104]	; (80058ec <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005882:	f7ff f883 	bl	800498c <LL_ADC_IsEnabled>
 8005886:	4604      	mov	r4, r0
 8005888:	4819      	ldr	r0, [pc, #100]	; (80058f0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800588a:	f7ff f87f 	bl	800498c <LL_ADC_IsEnabled>
 800588e:	4603      	mov	r3, r0
 8005890:	431c      	orrs	r4, r3
 8005892:	481a      	ldr	r0, [pc, #104]	; (80058fc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005894:	f7ff f87a 	bl	800498c <LL_ADC_IsEnabled>
 8005898:	4603      	mov	r3, r0
 800589a:	4323      	orrs	r3, r4
 800589c:	2b00      	cmp	r3, #0
 800589e:	bf0c      	ite	eq
 80058a0:	2301      	moveq	r3, #1
 80058a2:	2300      	movne	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d012      	beq.n	80058d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80058aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80058b2:	f023 030f 	bic.w	r3, r3, #15
 80058b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80058b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058ba:	e009      	b.n	80058d0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c0:	f043 0220 	orr.w	r2, r3, #32
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80058ce:	e000      	b.n	80058d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80058da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3784      	adds	r7, #132	; 0x84
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd90      	pop	{r4, r7, pc}
 80058e6:	bf00      	nop
 80058e8:	50000100 	.word	0x50000100
 80058ec:	50000400 	.word	0x50000400
 80058f0:	50000500 	.word	0x50000500
 80058f4:	50000300 	.word	0x50000300
 80058f8:	50000700 	.word	0x50000700
 80058fc:	50000600 	.word	0x50000600

08005900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005910:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <__NVIC_SetPriorityGrouping+0x44>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800591c:	4013      	ands	r3, r2
 800591e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800592c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005932:	4a04      	ldr	r2, [pc, #16]	; (8005944 <__NVIC_SetPriorityGrouping+0x44>)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	60d3      	str	r3, [r2, #12]
}
 8005938:	bf00      	nop
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	e000ed00 	.word	0xe000ed00

08005948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800594c:	4b04      	ldr	r3, [pc, #16]	; (8005960 <__NVIC_GetPriorityGrouping+0x18>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	0a1b      	lsrs	r3, r3, #8
 8005952:	f003 0307 	and.w	r3, r3, #7
}
 8005956:	4618      	mov	r0, r3
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	e000ed00 	.word	0xe000ed00

08005964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	4603      	mov	r3, r0
 800596c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800596e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005972:	2b00      	cmp	r3, #0
 8005974:	db0b      	blt.n	800598e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	f003 021f 	and.w	r2, r3, #31
 800597c:	4907      	ldr	r1, [pc, #28]	; (800599c <__NVIC_EnableIRQ+0x38>)
 800597e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	2001      	movs	r0, #1
 8005986:	fa00 f202 	lsl.w	r2, r0, r2
 800598a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	e000e100 	.word	0xe000e100

080059a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	4603      	mov	r3, r0
 80059a8:	6039      	str	r1, [r7, #0]
 80059aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	db0a      	blt.n	80059ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	490c      	ldr	r1, [pc, #48]	; (80059ec <__NVIC_SetPriority+0x4c>)
 80059ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059be:	0112      	lsls	r2, r2, #4
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	440b      	add	r3, r1
 80059c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059c8:	e00a      	b.n	80059e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	4908      	ldr	r1, [pc, #32]	; (80059f0 <__NVIC_SetPriority+0x50>)
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	3b04      	subs	r3, #4
 80059d8:	0112      	lsls	r2, r2, #4
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	440b      	add	r3, r1
 80059de:	761a      	strb	r2, [r3, #24]
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	e000e100 	.word	0xe000e100
 80059f0:	e000ed00 	.word	0xe000ed00

080059f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	; 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f1c3 0307 	rsb	r3, r3, #7
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	bf28      	it	cs
 8005a12:	2304      	movcs	r3, #4
 8005a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	2b06      	cmp	r3, #6
 8005a1c:	d902      	bls.n	8005a24 <NVIC_EncodePriority+0x30>
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	3b03      	subs	r3, #3
 8005a22:	e000      	b.n	8005a26 <NVIC_EncodePriority+0x32>
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a28:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43da      	mvns	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	401a      	ands	r2, r3
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	43d9      	mvns	r1, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a4c:	4313      	orrs	r3, r2
         );
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3724      	adds	r7, #36	; 0x24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
	...

08005a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a6c:	d301      	bcc.n	8005a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e00f      	b.n	8005a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a72:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <SysTick_Config+0x40>)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a7a:	210f      	movs	r1, #15
 8005a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a80:	f7ff ff8e 	bl	80059a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a84:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <SysTick_Config+0x40>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a8a:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <SysTick_Config+0x40>)
 8005a8c:	2207      	movs	r2, #7
 8005a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	e000e010 	.word	0xe000e010

08005aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff ff29 	bl	8005900 <__NVIC_SetPriorityGrouping>
}
 8005aae:	bf00      	nop
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b086      	sub	sp, #24
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	4603      	mov	r3, r0
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	607a      	str	r2, [r7, #4]
 8005ac2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ac4:	f7ff ff40 	bl	8005948 <__NVIC_GetPriorityGrouping>
 8005ac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	6978      	ldr	r0, [r7, #20]
 8005ad0:	f7ff ff90 	bl	80059f4 <NVIC_EncodePriority>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ada:	4611      	mov	r1, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff ff5f 	bl	80059a0 <__NVIC_SetPriority>
}
 8005ae2:	bf00      	nop
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	4603      	mov	r3, r0
 8005af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff ff33 	bl	8005964 <__NVIC_EnableIRQ>
}
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7ff ffa4 	bl	8005a5c <SysTick_Config>
 8005b14:	4603      	mov	r3, r0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b082      	sub	sp, #8
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e014      	b.n	8005b5a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	791b      	ldrb	r3, [r3, #4]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d105      	bne.n	8005b46 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7fc fe47 	bl	80027d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b082      	sub	sp, #8
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	795b      	ldrb	r3, [r3, #5]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_DAC_Start+0x16>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e043      	b.n	8005c00 <HAL_DAC_Start+0x9e>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2202      	movs	r2, #2
 8005b82:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6819      	ldr	r1, [r3, #0]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2201      	movs	r2, #1
 8005b92:	409a      	lsls	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8005b9c:	2001      	movs	r0, #1
 8005b9e:	f7fd f90b 	bl	8002db8 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10f      	bne.n	8005bc8 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d11d      	bne.n	8005bf2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f042 0201 	orr.w	r2, r2, #1
 8005bc4:	605a      	str	r2, [r3, #4]
 8005bc6:	e014      	b.n	8005bf2 <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	f003 0310 	and.w	r3, r3, #16
 8005bd8:	2102      	movs	r1, #2
 8005bda:	fa01 f303 	lsl.w	r3, r1, r3
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d107      	bne.n	8005bf2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0202 	orr.w	r2, r2, #2
 8005bf0:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d105      	bne.n	8005c38 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4413      	add	r3, r2
 8005c32:	3308      	adds	r3, #8
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	e004      	b.n	8005c42 <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3314      	adds	r3, #20
 8005c40:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	461a      	mov	r2, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	371c      	adds	r7, #28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08a      	sub	sp, #40	; 0x28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	795b      	ldrb	r3, [r3, #5]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d101      	bne.n	8005c70 <HAL_DAC_ConfigChannel+0x18>
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	e192      	b.n	8005f96 <HAL_DAC_ConfigChannel+0x33e>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2201      	movs	r2, #1
 8005c74:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2202      	movs	r2, #2
 8005c7a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d174      	bne.n	8005d6e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005c84:	f7fd f88c 	bl	8002da0 <HAL_GetTick>
 8005c88:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d134      	bne.n	8005cfa <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005c90:	e011      	b.n	8005cb6 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005c92:	f7fd f885 	bl	8002da0 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d90a      	bls.n	8005cb6 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f043 0208 	orr.w	r2, r3, #8
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2203      	movs	r2, #3
 8005cb0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e16f      	b.n	8005f96 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e6      	bne.n	8005c92 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8005cc4:	2001      	movs	r0, #1
 8005cc6:	f7fd f877 	bl	8002db8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40
 8005cd4:	e01e      	b.n	8005d14 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005cd6:	f7fd f863 	bl	8002da0 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d90a      	bls.n	8005cfa <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	f043 0208 	orr.w	r2, r3, #8
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2203      	movs	r2, #3
 8005cf4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e14d      	b.n	8005f96 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	dbe8      	blt.n	8005cd6 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8005d04:	2001      	movs	r0, #1
 8005d06:	f7fd f857 	bl	8002db8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005d12:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f003 0310 	and.w	r3, r3, #16
 8005d20:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005d24:	fa01 f303 	lsl.w	r3, r1, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	ea02 0103 	and.w	r1, r2, r3
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f003 0310 	and.w	r3, r3, #16
 8005d38:	409a      	lsls	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f003 0310 	and.w	r3, r3, #16
 8005d4e:	21ff      	movs	r1, #255	; 0xff
 8005d50:	fa01 f303 	lsl.w	r3, r1, r3
 8005d54:	43db      	mvns	r3, r3
 8005d56:	ea02 0103 	and.w	r1, r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f003 0310 	and.w	r3, r3, #16
 8005d64:	409a      	lsls	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	69db      	ldr	r3, [r3, #28]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d11d      	bne.n	8005db2 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	221f      	movs	r2, #31
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	43db      	mvns	r3, r3
 8005d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8e:	4013      	ands	r3, r2
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f003 0310 	and.w	r3, r3, #16
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da6:	4313      	orrs	r3, r2
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2207      	movs	r2, #7
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	43db      	mvns	r3, r3
 8005dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dca:	4013      	ands	r3, r2
 8005dcc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d102      	bne.n	8005ddc <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	623b      	str	r3, [r7, #32]
 8005dda:	e00f      	b.n	8005dfc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d102      	bne.n	8005dea <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005de4:	2301      	movs	r3, #1
 8005de6:	623b      	str	r3, [r7, #32]
 8005de8:	e008      	b.n	8005dfc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d102      	bne.n	8005df8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005df2:	2301      	movs	r3, #1
 8005df4:	623b      	str	r3, [r7, #32]
 8005df6:	e001      	b.n	8005dfc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	6a3a      	ldr	r2, [r7, #32]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43db      	mvns	r3, r3
 8005e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1e:	4013      	ands	r3, r2
 8005e20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	791b      	ldrb	r3, [r3, #4]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d102      	bne.n	8005e30 <HAL_DAC_ConfigChannel+0x1d8>
 8005e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e2e:	e000      	b.n	8005e32 <HAL_DAC_ConfigChannel+0x1da>
 8005e30:	2300      	movs	r3, #0
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f003 0310 	and.w	r3, r3, #16
 8005e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	43db      	mvns	r3, r3
 8005e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	795b      	ldrb	r3, [r3, #5]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d102      	bne.n	8005e5c <HAL_DAC_ConfigChannel+0x204>
 8005e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e5a:	e000      	b.n	8005e5e <HAL_DAC_ConfigChannel+0x206>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d114      	bne.n	8005e9e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8005e74:	f001 fa64 	bl	8007340 <HAL_RCC_GetHCLKFreq>
 8005e78:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	4a48      	ldr	r2, [pc, #288]	; (8005fa0 <HAL_DAC_ConfigChannel+0x348>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d904      	bls.n	8005e8c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
 8005e8a:	e00f      	b.n	8005eac <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	4a45      	ldr	r2, [pc, #276]	; (8005fa4 <HAL_DAC_ConfigChannel+0x34c>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d90a      	bls.n	8005eaa <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e9c:	e006      	b.n	8005eac <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea8:	e000      	b.n	8005eac <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8005eaa:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f003 0310 	and.w	r3, r3, #16
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6819      	ldr	r1, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	43da      	mvns	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	400a      	ands	r2, r1
 8005ee2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	43db      	mvns	r3, r3
 8005efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005efe:	4013      	ands	r3, r2
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f003 0310 	and.w	r3, r3, #16
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f16:	4313      	orrs	r3, r2
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f20:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6819      	ldr	r1, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f003 0310 	and.w	r3, r3, #16
 8005f2e:	22c0      	movs	r2, #192	; 0xc0
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	43da      	mvns	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	400a      	ands	r2, r1
 8005f3c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	089b      	lsrs	r3, r3, #2
 8005f44:	f003 030f 	and.w	r3, r3, #15
 8005f48:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	089b      	lsrs	r3, r3, #2
 8005f50:	021b      	lsls	r3, r3, #8
 8005f52:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f003 0310 	and.w	r3, r3, #16
 8005f68:	f640 710f 	movw	r1, #3855	; 0xf0f
 8005f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f70:	43db      	mvns	r3, r3
 8005f72:	ea02 0103 	and.w	r1, r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	409a      	lsls	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3728      	adds	r7, #40	; 0x28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	09896800 	.word	0x09896800
 8005fa4:	04c4b400 	.word	0x04c4b400

08005fa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e08d      	b.n	80060d6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	4b47      	ldr	r3, [pc, #284]	; (80060e0 <HAL_DMA_Init+0x138>)
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d80f      	bhi.n	8005fe6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	4b45      	ldr	r3, [pc, #276]	; (80060e4 <HAL_DMA_Init+0x13c>)
 8005fce:	4413      	add	r3, r2
 8005fd0:	4a45      	ldr	r2, [pc, #276]	; (80060e8 <HAL_DMA_Init+0x140>)
 8005fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd6:	091b      	lsrs	r3, r3, #4
 8005fd8:	009a      	lsls	r2, r3, #2
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a42      	ldr	r2, [pc, #264]	; (80060ec <HAL_DMA_Init+0x144>)
 8005fe2:	641a      	str	r2, [r3, #64]	; 0x40
 8005fe4:	e00e      	b.n	8006004 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	4b40      	ldr	r3, [pc, #256]	; (80060f0 <HAL_DMA_Init+0x148>)
 8005fee:	4413      	add	r3, r2
 8005ff0:	4a3d      	ldr	r2, [pc, #244]	; (80060e8 <HAL_DMA_Init+0x140>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	091b      	lsrs	r3, r3, #4
 8005ff8:	009a      	lsls	r2, r3, #2
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a3c      	ldr	r2, [pc, #240]	; (80060f4 <HAL_DMA_Init+0x14c>)
 8006002:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800601a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006028:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006034:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006040:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 f9b6 	bl	80063c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006064:	d102      	bne.n	800606c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006080:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d010      	beq.n	80060ac <HAL_DMA_Init+0x104>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2b04      	cmp	r3, #4
 8006090:	d80c      	bhi.n	80060ac <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f9d6 	bl	8006444 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609c:	2200      	movs	r2, #0
 800609e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80060a8:	605a      	str	r2, [r3, #4]
 80060aa:	e008      	b.n	80060be <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	40020407 	.word	0x40020407
 80060e4:	bffdfff8 	.word	0xbffdfff8
 80060e8:	cccccccd 	.word	0xcccccccd
 80060ec:	40020000 	.word	0x40020000
 80060f0:	bffdfbf8 	.word	0xbffdfbf8
 80060f4:	40020400 	.word	0x40020400

080060f8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_DMA_Start_IT+0x20>
 8006114:	2302      	movs	r3, #2
 8006116:	e066      	b.n	80061e6 <HAL_DMA_Start_IT+0xee>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b01      	cmp	r3, #1
 800612a:	d155      	bne.n	80061d8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0201 	bic.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 f8fb 	bl	800634c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615a:	2b00      	cmp	r3, #0
 800615c:	d008      	beq.n	8006170 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f042 020e 	orr.w	r2, r2, #14
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	e00f      	b.n	8006190 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0204 	bic.w	r2, r2, #4
 800617e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f042 020a 	orr.w	r2, r2, #10
 800618e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800619a:	2b00      	cmp	r3, #0
 800619c:	d007      	beq.n	80061ae <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ac:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d007      	beq.n	80061c6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061c4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f042 0201 	orr.w	r2, r2, #1
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	e005      	b.n	80061e4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80061e0:	2302      	movs	r3, #2
 80061e2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3718      	adds	r7, #24
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620a:	f003 031f 	and.w	r3, r3, #31
 800620e:	2204      	movs	r2, #4
 8006210:	409a      	lsls	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4013      	ands	r3, r2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d026      	beq.n	8006268 <HAL_DMA_IRQHandler+0x7a>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d021      	beq.n	8006268 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d107      	bne.n	8006242 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0204 	bic.w	r2, r2, #4
 8006240:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006246:	f003 021f 	and.w	r2, r3, #31
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	2104      	movs	r1, #4
 8006250:	fa01 f202 	lsl.w	r2, r1, r2
 8006254:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625a:	2b00      	cmp	r3, #0
 800625c:	d071      	beq.n	8006342 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006266:	e06c      	b.n	8006342 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626c:	f003 031f 	and.w	r3, r3, #31
 8006270:	2202      	movs	r2, #2
 8006272:	409a      	lsls	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4013      	ands	r3, r2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d02e      	beq.n	80062da <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d029      	beq.n	80062da <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10b      	bne.n	80062ac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 020a 	bic.w	r2, r2, #10
 80062a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b0:	f003 021f 	and.w	r2, r3, #31
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b8:	2102      	movs	r1, #2
 80062ba:	fa01 f202 	lsl.w	r2, r1, r2
 80062be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d038      	beq.n	8006342 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80062d8:	e033      	b.n	8006342 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062de:	f003 031f 	and.w	r3, r3, #31
 80062e2:	2208      	movs	r2, #8
 80062e4:	409a      	lsls	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d02a      	beq.n	8006344 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f003 0308 	and.w	r3, r3, #8
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d025      	beq.n	8006344 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 020e 	bic.w	r2, r2, #14
 8006306:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630c:	f003 021f 	and.w	r2, r3, #31
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006314:	2101      	movs	r1, #1
 8006316:	fa01 f202 	lsl.w	r2, r1, r2
 800631a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006336:	2b00      	cmp	r3, #0
 8006338:	d004      	beq.n	8006344 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006342:	bf00      	nop
 8006344:	bf00      	nop
}
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006362:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006374:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637a:	f003 021f 	and.w	r2, r3, #31
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006382:	2101      	movs	r1, #1
 8006384:	fa01 f202 	lsl.w	r2, r1, r2
 8006388:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	2b10      	cmp	r3, #16
 8006398:	d108      	bne.n	80063ac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80063aa:	e007      	b.n	80063bc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	60da      	str	r2, [r3, #12]
}
 80063bc:	bf00      	nop
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	4b16      	ldr	r3, [pc, #88]	; (8006430 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80063d8:	429a      	cmp	r2, r3
 80063da:	d802      	bhi.n	80063e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80063dc:	4b15      	ldr	r3, [pc, #84]	; (8006434 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	e001      	b.n	80063e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80063e2:	4b15      	ldr	r3, [pc, #84]	; (8006438 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80063e4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	3b08      	subs	r3, #8
 80063f2:	4a12      	ldr	r2, [pc, #72]	; (800643c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80063f4:	fba2 2303 	umull	r2, r3, r2, r3
 80063f8:	091b      	lsrs	r3, r3, #4
 80063fa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006400:	089b      	lsrs	r3, r3, #2
 8006402:	009a      	lsls	r2, r3, #2
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	4413      	add	r3, r2
 8006408:	461a      	mov	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a0b      	ldr	r2, [pc, #44]	; (8006440 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006412:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f003 031f 	and.w	r3, r3, #31
 800641a:	2201      	movs	r2, #1
 800641c:	409a      	lsls	r2, r3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006422:	bf00      	nop
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	40020407 	.word	0x40020407
 8006434:	40020800 	.word	0x40020800
 8006438:	40020820 	.word	0x40020820
 800643c:	cccccccd 	.word	0xcccccccd
 8006440:	40020880 	.word	0x40020880

08006444 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006458:	4413      	add	r3, r2
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	461a      	mov	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a08      	ldr	r2, [pc, #32]	; (8006488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006466:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3b01      	subs	r3, #1
 800646c:	f003 031f 	and.w	r3, r3, #31
 8006470:	2201      	movs	r2, #1
 8006472:	409a      	lsls	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006478:	bf00      	nop
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	1000823f 	.word	0x1000823f
 8006488:	40020940 	.word	0x40020940

0800648c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800648c:	b480      	push	{r7}
 800648e:	b087      	sub	sp, #28
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800649a:	e15a      	b.n	8006752 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	2101      	movs	r1, #1
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	fa01 f303 	lsl.w	r3, r1, r3
 80064a8:	4013      	ands	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f000 814c 	beq.w	800674c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f003 0303 	and.w	r3, r3, #3
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d005      	beq.n	80064cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d130      	bne.n	800652e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	2203      	movs	r2, #3
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	43db      	mvns	r3, r3
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	4013      	ands	r3, r2
 80064e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	fa02 f303 	lsl.w	r3, r2, r3
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006502:	2201      	movs	r2, #1
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	43db      	mvns	r3, r3
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4013      	ands	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	091b      	lsrs	r3, r3, #4
 8006518:	f003 0201 	and.w	r2, r3, #1
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	fa02 f303 	lsl.w	r3, r2, r3
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4313      	orrs	r3, r2
 8006526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	2b03      	cmp	r3, #3
 8006538:	d017      	beq.n	800656a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	005b      	lsls	r3, r3, #1
 8006544:	2203      	movs	r2, #3
 8006546:	fa02 f303 	lsl.w	r3, r2, r3
 800654a:	43db      	mvns	r3, r3
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4013      	ands	r3, r2
 8006550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	fa02 f303 	lsl.w	r3, r2, r3
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	4313      	orrs	r3, r2
 8006562:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f003 0303 	and.w	r3, r3, #3
 8006572:	2b02      	cmp	r3, #2
 8006574:	d123      	bne.n	80065be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	08da      	lsrs	r2, r3, #3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	3208      	adds	r2, #8
 800657e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006582:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f003 0307 	and.w	r3, r3, #7
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	220f      	movs	r2, #15
 800658e:	fa02 f303 	lsl.w	r3, r2, r3
 8006592:	43db      	mvns	r3, r3
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	4013      	ands	r3, r2
 8006598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	691a      	ldr	r2, [r3, #16]
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f003 0307 	and.w	r3, r3, #7
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	08da      	lsrs	r2, r3, #3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3208      	adds	r2, #8
 80065b8:	6939      	ldr	r1, [r7, #16]
 80065ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	005b      	lsls	r3, r3, #1
 80065c8:	2203      	movs	r2, #3
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	43db      	mvns	r3, r3
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	4013      	ands	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f003 0203 	and.w	r2, r3, #3
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	fa02 f303 	lsl.w	r3, r2, r3
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 80a6 	beq.w	800674c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006600:	4b5b      	ldr	r3, [pc, #364]	; (8006770 <HAL_GPIO_Init+0x2e4>)
 8006602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006604:	4a5a      	ldr	r2, [pc, #360]	; (8006770 <HAL_GPIO_Init+0x2e4>)
 8006606:	f043 0301 	orr.w	r3, r3, #1
 800660a:	6613      	str	r3, [r2, #96]	; 0x60
 800660c:	4b58      	ldr	r3, [pc, #352]	; (8006770 <HAL_GPIO_Init+0x2e4>)
 800660e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	60bb      	str	r3, [r7, #8]
 8006616:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006618:	4a56      	ldr	r2, [pc, #344]	; (8006774 <HAL_GPIO_Init+0x2e8>)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	089b      	lsrs	r3, r3, #2
 800661e:	3302      	adds	r3, #2
 8006620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006624:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f003 0303 	and.w	r3, r3, #3
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	220f      	movs	r2, #15
 8006630:	fa02 f303 	lsl.w	r3, r2, r3
 8006634:	43db      	mvns	r3, r3
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4013      	ands	r3, r2
 800663a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006642:	d01f      	beq.n	8006684 <HAL_GPIO_Init+0x1f8>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a4c      	ldr	r2, [pc, #304]	; (8006778 <HAL_GPIO_Init+0x2ec>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d019      	beq.n	8006680 <HAL_GPIO_Init+0x1f4>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a4b      	ldr	r2, [pc, #300]	; (800677c <HAL_GPIO_Init+0x2f0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d013      	beq.n	800667c <HAL_GPIO_Init+0x1f0>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a4a      	ldr	r2, [pc, #296]	; (8006780 <HAL_GPIO_Init+0x2f4>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00d      	beq.n	8006678 <HAL_GPIO_Init+0x1ec>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a49      	ldr	r2, [pc, #292]	; (8006784 <HAL_GPIO_Init+0x2f8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d007      	beq.n	8006674 <HAL_GPIO_Init+0x1e8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a48      	ldr	r2, [pc, #288]	; (8006788 <HAL_GPIO_Init+0x2fc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d101      	bne.n	8006670 <HAL_GPIO_Init+0x1e4>
 800666c:	2305      	movs	r3, #5
 800666e:	e00a      	b.n	8006686 <HAL_GPIO_Init+0x1fa>
 8006670:	2306      	movs	r3, #6
 8006672:	e008      	b.n	8006686 <HAL_GPIO_Init+0x1fa>
 8006674:	2304      	movs	r3, #4
 8006676:	e006      	b.n	8006686 <HAL_GPIO_Init+0x1fa>
 8006678:	2303      	movs	r3, #3
 800667a:	e004      	b.n	8006686 <HAL_GPIO_Init+0x1fa>
 800667c:	2302      	movs	r3, #2
 800667e:	e002      	b.n	8006686 <HAL_GPIO_Init+0x1fa>
 8006680:	2301      	movs	r3, #1
 8006682:	e000      	b.n	8006686 <HAL_GPIO_Init+0x1fa>
 8006684:	2300      	movs	r3, #0
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	f002 0203 	and.w	r2, r2, #3
 800668c:	0092      	lsls	r2, r2, #2
 800668e:	4093      	lsls	r3, r2
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006696:	4937      	ldr	r1, [pc, #220]	; (8006774 <HAL_GPIO_Init+0x2e8>)
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	089b      	lsrs	r3, r3, #2
 800669c:	3302      	adds	r3, #2
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066a4:	4b39      	ldr	r3, [pc, #228]	; (800678c <HAL_GPIO_Init+0x300>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	43db      	mvns	r3, r3
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	4013      	ands	r3, r2
 80066b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80066c8:	4a30      	ldr	r2, [pc, #192]	; (800678c <HAL_GPIO_Init+0x300>)
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80066ce:	4b2f      	ldr	r3, [pc, #188]	; (800678c <HAL_GPIO_Init+0x300>)
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	43db      	mvns	r3, r3
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4013      	ands	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80066ea:	693a      	ldr	r2, [r7, #16]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80066f2:	4a26      	ldr	r2, [pc, #152]	; (800678c <HAL_GPIO_Init+0x300>)
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80066f8:	4b24      	ldr	r3, [pc, #144]	; (800678c <HAL_GPIO_Init+0x300>)
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	43db      	mvns	r3, r3
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4013      	ands	r3, r2
 8006706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4313      	orrs	r3, r2
 800671a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800671c:	4a1b      	ldr	r2, [pc, #108]	; (800678c <HAL_GPIO_Init+0x300>)
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006722:	4b1a      	ldr	r3, [pc, #104]	; (800678c <HAL_GPIO_Init+0x300>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	43db      	mvns	r3, r3
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4013      	ands	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006746:	4a11      	ldr	r2, [pc, #68]	; (800678c <HAL_GPIO_Init+0x300>)
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	3301      	adds	r3, #1
 8006750:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	fa22 f303 	lsr.w	r3, r2, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	f47f ae9d 	bne.w	800649c <HAL_GPIO_Init+0x10>
  }
}
 8006762:	bf00      	nop
 8006764:	bf00      	nop
 8006766:	371c      	adds	r7, #28
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	40021000 	.word	0x40021000
 8006774:	40010000 	.word	0x40010000
 8006778:	48000400 	.word	0x48000400
 800677c:	48000800 	.word	0x48000800
 8006780:	48000c00 	.word	0x48000c00
 8006784:	48001000 	.word	0x48001000
 8006788:	48001400 	.word	0x48001400
 800678c:	40010400 	.word	0x40010400

08006790 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	460b      	mov	r3, r1
 800679a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	887b      	ldrh	r3, [r7, #2]
 80067a2:	4013      	ands	r3, r2
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067a8:	2301      	movs	r3, #1
 80067aa:	73fb      	strb	r3, [r7, #15]
 80067ac:	e001      	b.n	80067b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067ae:	2300      	movs	r3, #0
 80067b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	807b      	strh	r3, [r7, #2]
 80067cc:	4613      	mov	r3, r2
 80067ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80067d0:	787b      	ldrb	r3, [r7, #1]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80067d6:	887a      	ldrh	r2, [r7, #2]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80067dc:	e002      	b.n	80067e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80067de:	887a      	ldrh	r2, [r7, #2]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006802:	887a      	ldrh	r2, [r7, #2]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4013      	ands	r3, r2
 8006808:	041a      	lsls	r2, r3, #16
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	43d9      	mvns	r1, r3
 800680e:	887b      	ldrh	r3, [r7, #2]
 8006810:	400b      	ands	r3, r1
 8006812:	431a      	orrs	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	619a      	str	r2, [r3, #24]
}
 8006818:	bf00      	nop
 800681a:	3714      	adds	r7, #20
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
 800682a:	4603      	mov	r3, r0
 800682c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800682e:	4b08      	ldr	r3, [pc, #32]	; (8006850 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006830:	695a      	ldr	r2, [r3, #20]
 8006832:	88fb      	ldrh	r3, [r7, #6]
 8006834:	4013      	ands	r3, r2
 8006836:	2b00      	cmp	r3, #0
 8006838:	d006      	beq.n	8006848 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800683a:	4a05      	ldr	r2, [pc, #20]	; (8006850 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800683c:	88fb      	ldrh	r3, [r7, #6]
 800683e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006840:	88fb      	ldrh	r3, [r7, #6]
 8006842:	4618      	mov	r0, r3
 8006844:	f000 f806 	bl	8006854 <HAL_GPIO_EXTI_Callback>
  }
}
 8006848:	bf00      	nop
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40010400 	.word	0x40010400

08006854 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	4603      	mov	r3, r0
 800685c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800685e:	bf00      	nop
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
	...

0800686c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d141      	bne.n	80068fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800687a:	4b4b      	ldr	r3, [pc, #300]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006886:	d131      	bne.n	80068ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006888:	4b47      	ldr	r3, [pc, #284]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800688a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800688e:	4a46      	ldr	r2, [pc, #280]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006894:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006898:	4b43      	ldr	r3, [pc, #268]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80068a0:	4a41      	ldr	r2, [pc, #260]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80068a8:	4b40      	ldr	r3, [pc, #256]	; (80069ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2232      	movs	r2, #50	; 0x32
 80068ae:	fb02 f303 	mul.w	r3, r2, r3
 80068b2:	4a3f      	ldr	r2, [pc, #252]	; (80069b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80068b4:	fba2 2303 	umull	r2, r3, r2, r3
 80068b8:	0c9b      	lsrs	r3, r3, #18
 80068ba:	3301      	adds	r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068be:	e002      	b.n	80068c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068c6:	4b38      	ldr	r3, [pc, #224]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d2:	d102      	bne.n	80068da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1f2      	bne.n	80068c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068da:	4b33      	ldr	r3, [pc, #204]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e6:	d158      	bne.n	800699a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e057      	b.n	800699c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068ec:	4b2e      	ldr	r3, [pc, #184]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068f2:	4a2d      	ldr	r2, [pc, #180]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80068f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80068fc:	e04d      	b.n	800699a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006904:	d141      	bne.n	800698a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006906:	4b28      	ldr	r3, [pc, #160]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800690e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006912:	d131      	bne.n	8006978 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006914:	4b24      	ldr	r3, [pc, #144]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006916:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800691a:	4a23      	ldr	r2, [pc, #140]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800691c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006920:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006924:	4b20      	ldr	r3, [pc, #128]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800692c:	4a1e      	ldr	r2, [pc, #120]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800692e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006932:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006934:	4b1d      	ldr	r3, [pc, #116]	; (80069ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2232      	movs	r2, #50	; 0x32
 800693a:	fb02 f303 	mul.w	r3, r2, r3
 800693e:	4a1c      	ldr	r2, [pc, #112]	; (80069b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006940:	fba2 2303 	umull	r2, r3, r2, r3
 8006944:	0c9b      	lsrs	r3, r3, #18
 8006946:	3301      	adds	r3, #1
 8006948:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800694a:	e002      	b.n	8006952 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	3b01      	subs	r3, #1
 8006950:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006952:	4b15      	ldr	r3, [pc, #84]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800695e:	d102      	bne.n	8006966 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1f2      	bne.n	800694c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006966:	4b10      	ldr	r3, [pc, #64]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800696e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006972:	d112      	bne.n	800699a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e011      	b.n	800699c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006978:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800697a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800697e:	4a0a      	ldr	r2, [pc, #40]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006984:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006988:	e007      	b.n	800699a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800698a:	4b07      	ldr	r3, [pc, #28]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006992:	4a05      	ldr	r2, [pc, #20]	; (80069a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006994:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006998:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	40007000 	.word	0x40007000
 80069ac:	20000000 	.word	0x20000000
 80069b0:	431bde83 	.word	0x431bde83

080069b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80069b8:	4b05      	ldr	r3, [pc, #20]	; (80069d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	4a04      	ldr	r2, [pc, #16]	; (80069d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80069be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069c2:	6093      	str	r3, [r2, #8]
}
 80069c4:	bf00      	nop
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	40007000 	.word	0x40007000

080069d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b088      	sub	sp, #32
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e306      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d075      	beq.n	8006ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069f2:	4b97      	ldr	r3, [pc, #604]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	f003 030c 	and.w	r3, r3, #12
 80069fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069fc:	4b94      	ldr	r3, [pc, #592]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f003 0303 	and.w	r3, r3, #3
 8006a04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b0c      	cmp	r3, #12
 8006a0a:	d102      	bne.n	8006a12 <HAL_RCC_OscConfig+0x3e>
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d002      	beq.n	8006a18 <HAL_RCC_OscConfig+0x44>
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	d10b      	bne.n	8006a30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a18:	4b8d      	ldr	r3, [pc, #564]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d05b      	beq.n	8006adc <HAL_RCC_OscConfig+0x108>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d157      	bne.n	8006adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e2e1      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a38:	d106      	bne.n	8006a48 <HAL_RCC_OscConfig+0x74>
 8006a3a:	4b85      	ldr	r3, [pc, #532]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a84      	ldr	r2, [pc, #528]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	e01d      	b.n	8006a84 <HAL_RCC_OscConfig+0xb0>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a50:	d10c      	bne.n	8006a6c <HAL_RCC_OscConfig+0x98>
 8006a52:	4b7f      	ldr	r3, [pc, #508]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a7e      	ldr	r2, [pc, #504]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	4b7c      	ldr	r3, [pc, #496]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a7b      	ldr	r2, [pc, #492]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	e00b      	b.n	8006a84 <HAL_RCC_OscConfig+0xb0>
 8006a6c:	4b78      	ldr	r3, [pc, #480]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a77      	ldr	r2, [pc, #476]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a76:	6013      	str	r3, [r2, #0]
 8006a78:	4b75      	ldr	r3, [pc, #468]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a74      	ldr	r2, [pc, #464]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d013      	beq.n	8006ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8c:	f7fc f988 	bl	8002da0 <HAL_GetTick>
 8006a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a92:	e008      	b.n	8006aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a94:	f7fc f984 	bl	8002da0 <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	2b64      	cmp	r3, #100	; 0x64
 8006aa0:	d901      	bls.n	8006aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e2a6      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006aa6:	4b6a      	ldr	r3, [pc, #424]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d0f0      	beq.n	8006a94 <HAL_RCC_OscConfig+0xc0>
 8006ab2:	e014      	b.n	8006ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab4:	f7fc f974 	bl	8002da0 <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006abc:	f7fc f970 	bl	8002da0 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b64      	cmp	r3, #100	; 0x64
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e292      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ace:	4b60      	ldr	r3, [pc, #384]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d1f0      	bne.n	8006abc <HAL_RCC_OscConfig+0xe8>
 8006ada:	e000      	b.n	8006ade <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d075      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006aea:	4b59      	ldr	r3, [pc, #356]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f003 030c 	and.w	r3, r3, #12
 8006af2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006af4:	4b56      	ldr	r3, [pc, #344]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f003 0303 	and.w	r3, r3, #3
 8006afc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	2b0c      	cmp	r3, #12
 8006b02:	d102      	bne.n	8006b0a <HAL_RCC_OscConfig+0x136>
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d002      	beq.n	8006b10 <HAL_RCC_OscConfig+0x13c>
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d11f      	bne.n	8006b50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b10:	4b4f      	ldr	r3, [pc, #316]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d005      	beq.n	8006b28 <HAL_RCC_OscConfig+0x154>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e265      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b28:	4b49      	ldr	r3, [pc, #292]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	061b      	lsls	r3, r3, #24
 8006b36:	4946      	ldr	r1, [pc, #280]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006b3c:	4b45      	ldr	r3, [pc, #276]	; (8006c54 <HAL_RCC_OscConfig+0x280>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fc f8e1 	bl	8002d08 <HAL_InitTick>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d043      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e251      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d023      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b58:	4b3d      	ldr	r3, [pc, #244]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a3c      	ldr	r2, [pc, #240]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b64:	f7fc f91c 	bl	8002da0 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b6c:	f7fc f918 	bl	8002da0 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e23a      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b7e:	4b34      	ldr	r3, [pc, #208]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0f0      	beq.n	8006b6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b8a:	4b31      	ldr	r3, [pc, #196]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	061b      	lsls	r3, r3, #24
 8006b98:	492d      	ldr	r1, [pc, #180]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	604b      	str	r3, [r1, #4]
 8006b9e:	e01a      	b.n	8006bd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ba0:	4b2b      	ldr	r3, [pc, #172]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a2a      	ldr	r2, [pc, #168]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006ba6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bac:	f7fc f8f8 	bl	8002da0 <HAL_GetTick>
 8006bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bb4:	f7fc f8f4 	bl	8002da0 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e216      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bc6:	4b22      	ldr	r3, [pc, #136]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1f0      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x1e0>
 8006bd2:	e000      	b.n	8006bd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0308 	and.w	r3, r3, #8
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d041      	beq.n	8006c66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d01c      	beq.n	8006c24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bea:	4b19      	ldr	r3, [pc, #100]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006bec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bf0:	4a17      	ldr	r2, [pc, #92]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006bf2:	f043 0301 	orr.w	r3, r3, #1
 8006bf6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bfa:	f7fc f8d1 	bl	8002da0 <HAL_GetTick>
 8006bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c00:	e008      	b.n	8006c14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c02:	f7fc f8cd 	bl	8002da0 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d901      	bls.n	8006c14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e1ef      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c14:	4b0e      	ldr	r3, [pc, #56]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c1a:	f003 0302 	and.w	r3, r3, #2
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d0ef      	beq.n	8006c02 <HAL_RCC_OscConfig+0x22e>
 8006c22:	e020      	b.n	8006c66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c24:	4b0a      	ldr	r3, [pc, #40]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c2a:	4a09      	ldr	r2, [pc, #36]	; (8006c50 <HAL_RCC_OscConfig+0x27c>)
 8006c2c:	f023 0301 	bic.w	r3, r3, #1
 8006c30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c34:	f7fc f8b4 	bl	8002da0 <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c3a:	e00d      	b.n	8006c58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c3c:	f7fc f8b0 	bl	8002da0 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d906      	bls.n	8006c58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e1d2      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
 8006c4e:	bf00      	nop
 8006c50:	40021000 	.word	0x40021000
 8006c54:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c58:	4b8c      	ldr	r3, [pc, #560]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1ea      	bne.n	8006c3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0304 	and.w	r3, r3, #4
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 80a6 	beq.w	8006dc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c74:	2300      	movs	r3, #0
 8006c76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c78:	4b84      	ldr	r3, [pc, #528]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <HAL_RCC_OscConfig+0x2b4>
 8006c84:	2301      	movs	r3, #1
 8006c86:	e000      	b.n	8006c8a <HAL_RCC_OscConfig+0x2b6>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00d      	beq.n	8006caa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c8e:	4b7f      	ldr	r3, [pc, #508]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c92:	4a7e      	ldr	r2, [pc, #504]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c98:	6593      	str	r3, [r2, #88]	; 0x58
 8006c9a:	4b7c      	ldr	r3, [pc, #496]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006caa:	4b79      	ldr	r3, [pc, #484]	; (8006e90 <HAL_RCC_OscConfig+0x4bc>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d118      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cb6:	4b76      	ldr	r3, [pc, #472]	; (8006e90 <HAL_RCC_OscConfig+0x4bc>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a75      	ldr	r2, [pc, #468]	; (8006e90 <HAL_RCC_OscConfig+0x4bc>)
 8006cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cc2:	f7fc f86d 	bl	8002da0 <HAL_GetTick>
 8006cc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cc8:	e008      	b.n	8006cdc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cca:	f7fc f869 	bl	8002da0 <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e18b      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cdc:	4b6c      	ldr	r3, [pc, #432]	; (8006e90 <HAL_RCC_OscConfig+0x4bc>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0f0      	beq.n	8006cca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d108      	bne.n	8006d02 <HAL_RCC_OscConfig+0x32e>
 8006cf0:	4b66      	ldr	r3, [pc, #408]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf6:	4a65      	ldr	r2, [pc, #404]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006cf8:	f043 0301 	orr.w	r3, r3, #1
 8006cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d00:	e024      	b.n	8006d4c <HAL_RCC_OscConfig+0x378>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	2b05      	cmp	r3, #5
 8006d08:	d110      	bne.n	8006d2c <HAL_RCC_OscConfig+0x358>
 8006d0a:	4b60      	ldr	r3, [pc, #384]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d10:	4a5e      	ldr	r2, [pc, #376]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d12:	f043 0304 	orr.w	r3, r3, #4
 8006d16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d1a:	4b5c      	ldr	r3, [pc, #368]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d20:	4a5a      	ldr	r2, [pc, #360]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d22:	f043 0301 	orr.w	r3, r3, #1
 8006d26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d2a:	e00f      	b.n	8006d4c <HAL_RCC_OscConfig+0x378>
 8006d2c:	4b57      	ldr	r3, [pc, #348]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d32:	4a56      	ldr	r2, [pc, #344]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d34:	f023 0301 	bic.w	r3, r3, #1
 8006d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d3c:	4b53      	ldr	r3, [pc, #332]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d42:	4a52      	ldr	r2, [pc, #328]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d44:	f023 0304 	bic.w	r3, r3, #4
 8006d48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d016      	beq.n	8006d82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d54:	f7fc f824 	bl	8002da0 <HAL_GetTick>
 8006d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d5a:	e00a      	b.n	8006d72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d5c:	f7fc f820 	bl	8002da0 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e140      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d72:	4b46      	ldr	r3, [pc, #280]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0ed      	beq.n	8006d5c <HAL_RCC_OscConfig+0x388>
 8006d80:	e015      	b.n	8006dae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d82:	f7fc f80d 	bl	8002da0 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d88:	e00a      	b.n	8006da0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d8a:	f7fc f809 	bl	8002da0 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e129      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006da0:	4b3a      	ldr	r3, [pc, #232]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1ed      	bne.n	8006d8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006dae:	7ffb      	ldrb	r3, [r7, #31]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d105      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006db4:	4b35      	ldr	r3, [pc, #212]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db8:	4a34      	ldr	r2, [pc, #208]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d03c      	beq.n	8006e46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d01c      	beq.n	8006e0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006dd4:	4b2d      	ldr	r3, [pc, #180]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006dd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006dda:	4a2c      	ldr	r2, [pc, #176]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006ddc:	f043 0301 	orr.w	r3, r3, #1
 8006de0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006de4:	f7fb ffdc 	bl	8002da0 <HAL_GetTick>
 8006de8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006dec:	f7fb ffd8 	bl	8002da0 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e0fa      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006dfe:	4b23      	ldr	r3, [pc, #140]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006e00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0ef      	beq.n	8006dec <HAL_RCC_OscConfig+0x418>
 8006e0c:	e01b      	b.n	8006e46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e0e:	4b1f      	ldr	r3, [pc, #124]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e14:	4a1d      	ldr	r2, [pc, #116]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006e16:	f023 0301 	bic.w	r3, r3, #1
 8006e1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e1e:	f7fb ffbf 	bl	8002da0 <HAL_GetTick>
 8006e22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e24:	e008      	b.n	8006e38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e26:	f7fb ffbb 	bl	8002da0 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e0dd      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e38:	4b14      	ldr	r3, [pc, #80]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e3e:	f003 0302 	and.w	r3, r3, #2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1ef      	bne.n	8006e26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f000 80d1 	beq.w	8006ff2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e50:	4b0e      	ldr	r3, [pc, #56]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f003 030c 	and.w	r3, r3, #12
 8006e58:	2b0c      	cmp	r3, #12
 8006e5a:	f000 808b 	beq.w	8006f74 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d15e      	bne.n	8006f24 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e66:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a08      	ldr	r2, [pc, #32]	; (8006e8c <HAL_RCC_OscConfig+0x4b8>)
 8006e6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e72:	f7fb ff95 	bl	8002da0 <HAL_GetTick>
 8006e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e78:	e00c      	b.n	8006e94 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e7a:	f7fb ff91 	bl	8002da0 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d905      	bls.n	8006e94 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e0b3      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
 8006e8c:	40021000 	.word	0x40021000
 8006e90:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e94:	4b59      	ldr	r3, [pc, #356]	; (8006ffc <HAL_RCC_OscConfig+0x628>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1ec      	bne.n	8006e7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ea0:	4b56      	ldr	r3, [pc, #344]	; (8006ffc <HAL_RCC_OscConfig+0x628>)
 8006ea2:	68da      	ldr	r2, [r3, #12]
 8006ea4:	4b56      	ldr	r3, [pc, #344]	; (8007000 <HAL_RCC_OscConfig+0x62c>)
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	6a11      	ldr	r1, [r2, #32]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006eb0:	3a01      	subs	r2, #1
 8006eb2:	0112      	lsls	r2, r2, #4
 8006eb4:	4311      	orrs	r1, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006eba:	0212      	lsls	r2, r2, #8
 8006ebc:	4311      	orrs	r1, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ec2:	0852      	lsrs	r2, r2, #1
 8006ec4:	3a01      	subs	r2, #1
 8006ec6:	0552      	lsls	r2, r2, #21
 8006ec8:	4311      	orrs	r1, r2
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006ece:	0852      	lsrs	r2, r2, #1
 8006ed0:	3a01      	subs	r2, #1
 8006ed2:	0652      	lsls	r2, r2, #25
 8006ed4:	4311      	orrs	r1, r2
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006eda:	06d2      	lsls	r2, r2, #27
 8006edc:	430a      	orrs	r2, r1
 8006ede:	4947      	ldr	r1, [pc, #284]	; (8006ffc <HAL_RCC_OscConfig+0x628>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ee4:	4b45      	ldr	r3, [pc, #276]	; (8006ffc <HAL_RCC_OscConfig+0x628>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a44      	ldr	r2, [pc, #272]	; (8006ffc <HAL_RCC_OscConfig+0x628>)
 8006eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006eee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ef0:	4b42      	ldr	r3, [pc, #264]	; (8006ffc <HAL_RCC_OscConfig+0x628>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	4a41      	ldr	r2, [pc, #260]	; (8006ffc <HAL_RCC_OscConfig+0x628>)
 8006ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006efa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efc:	f7fb ff50 	bl	8002da0 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f04:	f7fb ff4c 	bl	8002da0 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e06e      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f16:	4b39      	ldr	r3, [pc, #228]	; (8006ffc <HAL_RCC_OscConfig+0x628>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0f0      	beq.n	8006f04 <HAL_RCC_OscConfig+0x530>
 8006f22:	e066      	b.n	8006ff2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f24:	4b35      	ldr	r3, [pc, #212]	; (8006ffc <HAL_RCC_OscConfig+0x628>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a34      	ldr	r2, [pc, #208]	; (8006ffc <HAL_RCC_OscConfig+0x628>)
 8006f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f2e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006f30:	4b32      	ldr	r3, [pc, #200]	; (8006ffc <HAL_RCC_OscConfig+0x628>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	4a31      	ldr	r2, [pc, #196]	; (8006ffc <HAL_RCC_OscConfig+0x628>)
 8006f36:	f023 0303 	bic.w	r3, r3, #3
 8006f3a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006f3c:	4b2f      	ldr	r3, [pc, #188]	; (8006ffc <HAL_RCC_OscConfig+0x628>)
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	4a2e      	ldr	r2, [pc, #184]	; (8006ffc <HAL_RCC_OscConfig+0x628>)
 8006f42:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f4c:	f7fb ff28 	bl	8002da0 <HAL_GetTick>
 8006f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f52:	e008      	b.n	8006f66 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f54:	f7fb ff24 	bl	8002da0 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e046      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f66:	4b25      	ldr	r3, [pc, #148]	; (8006ffc <HAL_RCC_OscConfig+0x628>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1f0      	bne.n	8006f54 <HAL_RCC_OscConfig+0x580>
 8006f72:	e03e      	b.n	8006ff2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e039      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006f80:	4b1e      	ldr	r3, [pc, #120]	; (8006ffc <HAL_RCC_OscConfig+0x628>)
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f003 0203 	and.w	r2, r3, #3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a1b      	ldr	r3, [r3, #32]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d12c      	bne.n	8006fee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d123      	bne.n	8006fee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d11b      	bne.n	8006fee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d113      	bne.n	8006fee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd0:	085b      	lsrs	r3, r3, #1
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d109      	bne.n	8006fee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe4:	085b      	lsrs	r3, r3, #1
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d001      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e000      	b.n	8006ff4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3720      	adds	r7, #32
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	40021000 	.word	0x40021000
 8007000:	019f800c 	.word	0x019f800c

08007004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	e11e      	b.n	800725a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800701c:	4b91      	ldr	r3, [pc, #580]	; (8007264 <HAL_RCC_ClockConfig+0x260>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 030f 	and.w	r3, r3, #15
 8007024:	683a      	ldr	r2, [r7, #0]
 8007026:	429a      	cmp	r2, r3
 8007028:	d910      	bls.n	800704c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800702a:	4b8e      	ldr	r3, [pc, #568]	; (8007264 <HAL_RCC_ClockConfig+0x260>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f023 020f 	bic.w	r2, r3, #15
 8007032:	498c      	ldr	r1, [pc, #560]	; (8007264 <HAL_RCC_ClockConfig+0x260>)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	4313      	orrs	r3, r2
 8007038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800703a:	4b8a      	ldr	r3, [pc, #552]	; (8007264 <HAL_RCC_ClockConfig+0x260>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	683a      	ldr	r2, [r7, #0]
 8007044:	429a      	cmp	r2, r3
 8007046:	d001      	beq.n	800704c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e106      	b.n	800725a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	d073      	beq.n	8007140 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	2b03      	cmp	r3, #3
 800705e:	d129      	bne.n	80070b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007060:	4b81      	ldr	r3, [pc, #516]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e0f4      	b.n	800725a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007070:	f000 f99e 	bl	80073b0 <RCC_GetSysClockFreqFromPLLSource>
 8007074:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	4a7c      	ldr	r2, [pc, #496]	; (800726c <HAL_RCC_ClockConfig+0x268>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d93f      	bls.n	80070fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800707e:	4b7a      	ldr	r3, [pc, #488]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d009      	beq.n	800709e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007092:	2b00      	cmp	r3, #0
 8007094:	d033      	beq.n	80070fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800709a:	2b00      	cmp	r3, #0
 800709c:	d12f      	bne.n	80070fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800709e:	4b72      	ldr	r3, [pc, #456]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070a6:	4a70      	ldr	r2, [pc, #448]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 80070a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80070ae:	2380      	movs	r3, #128	; 0x80
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	e024      	b.n	80070fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d107      	bne.n	80070cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070bc:	4b6a      	ldr	r3, [pc, #424]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d109      	bne.n	80070dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e0c6      	b.n	800725a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070cc:	4b66      	ldr	r3, [pc, #408]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e0be      	b.n	800725a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80070dc:	f000 f8ce 	bl	800727c <HAL_RCC_GetSysClockFreq>
 80070e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	4a61      	ldr	r2, [pc, #388]	; (800726c <HAL_RCC_ClockConfig+0x268>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d909      	bls.n	80070fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80070ea:	4b5f      	ldr	r3, [pc, #380]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070f2:	4a5d      	ldr	r2, [pc, #372]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 80070f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80070fa:	2380      	movs	r3, #128	; 0x80
 80070fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070fe:	4b5a      	ldr	r3, [pc, #360]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f023 0203 	bic.w	r2, r3, #3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	4957      	ldr	r1, [pc, #348]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 800710c:	4313      	orrs	r3, r2
 800710e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007110:	f7fb fe46 	bl	8002da0 <HAL_GetTick>
 8007114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007116:	e00a      	b.n	800712e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007118:	f7fb fe42 	bl	8002da0 <HAL_GetTick>
 800711c:	4602      	mov	r2, r0
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	f241 3288 	movw	r2, #5000	; 0x1388
 8007126:	4293      	cmp	r3, r2
 8007128:	d901      	bls.n	800712e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e095      	b.n	800725a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800712e:	4b4e      	ldr	r3, [pc, #312]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f003 020c 	and.w	r2, r3, #12
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	429a      	cmp	r2, r3
 800713e:	d1eb      	bne.n	8007118 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f003 0302 	and.w	r3, r3, #2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d023      	beq.n	8007194 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007158:	4b43      	ldr	r3, [pc, #268]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	4a42      	ldr	r2, [pc, #264]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 800715e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007162:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0308 	and.w	r3, r3, #8
 800716c:	2b00      	cmp	r3, #0
 800716e:	d007      	beq.n	8007180 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007170:	4b3d      	ldr	r3, [pc, #244]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007178:	4a3b      	ldr	r2, [pc, #236]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 800717a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800717e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007180:	4b39      	ldr	r3, [pc, #228]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	4936      	ldr	r1, [pc, #216]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 800718e:	4313      	orrs	r3, r2
 8007190:	608b      	str	r3, [r1, #8]
 8007192:	e008      	b.n	80071a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2b80      	cmp	r3, #128	; 0x80
 8007198:	d105      	bne.n	80071a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800719a:	4b33      	ldr	r3, [pc, #204]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	4a32      	ldr	r2, [pc, #200]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 80071a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071a6:	4b2f      	ldr	r3, [pc, #188]	; (8007264 <HAL_RCC_ClockConfig+0x260>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d21d      	bcs.n	80071f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071b4:	4b2b      	ldr	r3, [pc, #172]	; (8007264 <HAL_RCC_ClockConfig+0x260>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f023 020f 	bic.w	r2, r3, #15
 80071bc:	4929      	ldr	r1, [pc, #164]	; (8007264 <HAL_RCC_ClockConfig+0x260>)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80071c4:	f7fb fdec 	bl	8002da0 <HAL_GetTick>
 80071c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ca:	e00a      	b.n	80071e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071cc:	f7fb fde8 	bl	8002da0 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071da:	4293      	cmp	r3, r2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e03b      	b.n	800725a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071e2:	4b20      	ldr	r3, [pc, #128]	; (8007264 <HAL_RCC_ClockConfig+0x260>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	683a      	ldr	r2, [r7, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d1ed      	bne.n	80071cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0304 	and.w	r3, r3, #4
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d008      	beq.n	800720e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071fc:	4b1a      	ldr	r3, [pc, #104]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	4917      	ldr	r1, [pc, #92]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 800720a:	4313      	orrs	r3, r2
 800720c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0308 	and.w	r3, r3, #8
 8007216:	2b00      	cmp	r3, #0
 8007218:	d009      	beq.n	800722e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800721a:	4b13      	ldr	r3, [pc, #76]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	00db      	lsls	r3, r3, #3
 8007228:	490f      	ldr	r1, [pc, #60]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 800722a:	4313      	orrs	r3, r2
 800722c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800722e:	f000 f825 	bl	800727c <HAL_RCC_GetSysClockFreq>
 8007232:	4602      	mov	r2, r0
 8007234:	4b0c      	ldr	r3, [pc, #48]	; (8007268 <HAL_RCC_ClockConfig+0x264>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	091b      	lsrs	r3, r3, #4
 800723a:	f003 030f 	and.w	r3, r3, #15
 800723e:	490c      	ldr	r1, [pc, #48]	; (8007270 <HAL_RCC_ClockConfig+0x26c>)
 8007240:	5ccb      	ldrb	r3, [r1, r3]
 8007242:	f003 031f 	and.w	r3, r3, #31
 8007246:	fa22 f303 	lsr.w	r3, r2, r3
 800724a:	4a0a      	ldr	r2, [pc, #40]	; (8007274 <HAL_RCC_ClockConfig+0x270>)
 800724c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800724e:	4b0a      	ldr	r3, [pc, #40]	; (8007278 <HAL_RCC_ClockConfig+0x274>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4618      	mov	r0, r3
 8007254:	f7fb fd58 	bl	8002d08 <HAL_InitTick>
 8007258:	4603      	mov	r3, r0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	40022000 	.word	0x40022000
 8007268:	40021000 	.word	0x40021000
 800726c:	04c4b400 	.word	0x04c4b400
 8007270:	0800b008 	.word	0x0800b008
 8007274:	20000000 	.word	0x20000000
 8007278:	20000004 	.word	0x20000004

0800727c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007282:	4b2c      	ldr	r3, [pc, #176]	; (8007334 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f003 030c 	and.w	r3, r3, #12
 800728a:	2b04      	cmp	r3, #4
 800728c:	d102      	bne.n	8007294 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800728e:	4b2a      	ldr	r3, [pc, #168]	; (8007338 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007290:	613b      	str	r3, [r7, #16]
 8007292:	e047      	b.n	8007324 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007294:	4b27      	ldr	r3, [pc, #156]	; (8007334 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 030c 	and.w	r3, r3, #12
 800729c:	2b08      	cmp	r3, #8
 800729e:	d102      	bne.n	80072a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80072a0:	4b26      	ldr	r3, [pc, #152]	; (800733c <HAL_RCC_GetSysClockFreq+0xc0>)
 80072a2:	613b      	str	r3, [r7, #16]
 80072a4:	e03e      	b.n	8007324 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80072a6:	4b23      	ldr	r3, [pc, #140]	; (8007334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 030c 	and.w	r3, r3, #12
 80072ae:	2b0c      	cmp	r3, #12
 80072b0:	d136      	bne.n	8007320 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072b2:	4b20      	ldr	r3, [pc, #128]	; (8007334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f003 0303 	and.w	r3, r3, #3
 80072ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072bc:	4b1d      	ldr	r3, [pc, #116]	; (8007334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	091b      	lsrs	r3, r3, #4
 80072c2:	f003 030f 	and.w	r3, r3, #15
 80072c6:	3301      	adds	r3, #1
 80072c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d10c      	bne.n	80072ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072d0:	4a1a      	ldr	r2, [pc, #104]	; (800733c <HAL_RCC_GetSysClockFreq+0xc0>)
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d8:	4a16      	ldr	r2, [pc, #88]	; (8007334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072da:	68d2      	ldr	r2, [r2, #12]
 80072dc:	0a12      	lsrs	r2, r2, #8
 80072de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072e2:	fb02 f303 	mul.w	r3, r2, r3
 80072e6:	617b      	str	r3, [r7, #20]
      break;
 80072e8:	e00c      	b.n	8007304 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072ea:	4a13      	ldr	r2, [pc, #76]	; (8007338 <HAL_RCC_GetSysClockFreq+0xbc>)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f2:	4a10      	ldr	r2, [pc, #64]	; (8007334 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072f4:	68d2      	ldr	r2, [r2, #12]
 80072f6:	0a12      	lsrs	r2, r2, #8
 80072f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072fc:	fb02 f303 	mul.w	r3, r2, r3
 8007300:	617b      	str	r3, [r7, #20]
      break;
 8007302:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007304:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	0e5b      	lsrs	r3, r3, #25
 800730a:	f003 0303 	and.w	r3, r3, #3
 800730e:	3301      	adds	r3, #1
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	fbb2 f3f3 	udiv	r3, r2, r3
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	e001      	b.n	8007324 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007324:	693b      	ldr	r3, [r7, #16]
}
 8007326:	4618      	mov	r0, r3
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	40021000 	.word	0x40021000
 8007338:	00f42400 	.word	0x00f42400
 800733c:	016e3600 	.word	0x016e3600

08007340 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007340:	b480      	push	{r7}
 8007342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007344:	4b03      	ldr	r3, [pc, #12]	; (8007354 <HAL_RCC_GetHCLKFreq+0x14>)
 8007346:	681b      	ldr	r3, [r3, #0]
}
 8007348:	4618      	mov	r0, r3
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr
 8007352:	bf00      	nop
 8007354:	20000000 	.word	0x20000000

08007358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800735c:	f7ff fff0 	bl	8007340 <HAL_RCC_GetHCLKFreq>
 8007360:	4602      	mov	r2, r0
 8007362:	4b06      	ldr	r3, [pc, #24]	; (800737c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	0a1b      	lsrs	r3, r3, #8
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	4904      	ldr	r1, [pc, #16]	; (8007380 <HAL_RCC_GetPCLK1Freq+0x28>)
 800736e:	5ccb      	ldrb	r3, [r1, r3]
 8007370:	f003 031f 	and.w	r3, r3, #31
 8007374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007378:	4618      	mov	r0, r3
 800737a:	bd80      	pop	{r7, pc}
 800737c:	40021000 	.word	0x40021000
 8007380:	0800b018 	.word	0x0800b018

08007384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007388:	f7ff ffda 	bl	8007340 <HAL_RCC_GetHCLKFreq>
 800738c:	4602      	mov	r2, r0
 800738e:	4b06      	ldr	r3, [pc, #24]	; (80073a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	0adb      	lsrs	r3, r3, #11
 8007394:	f003 0307 	and.w	r3, r3, #7
 8007398:	4904      	ldr	r1, [pc, #16]	; (80073ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800739a:	5ccb      	ldrb	r3, [r1, r3]
 800739c:	f003 031f 	and.w	r3, r3, #31
 80073a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	40021000 	.word	0x40021000
 80073ac:	0800b018 	.word	0x0800b018

080073b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b087      	sub	sp, #28
 80073b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80073b6:	4b1e      	ldr	r3, [pc, #120]	; (8007430 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80073c0:	4b1b      	ldr	r3, [pc, #108]	; (8007430 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	091b      	lsrs	r3, r3, #4
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	3301      	adds	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d10c      	bne.n	80073ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073d4:	4a17      	ldr	r2, [pc, #92]	; (8007434 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073dc:	4a14      	ldr	r2, [pc, #80]	; (8007430 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073de:	68d2      	ldr	r2, [r2, #12]
 80073e0:	0a12      	lsrs	r2, r2, #8
 80073e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80073e6:	fb02 f303 	mul.w	r3, r2, r3
 80073ea:	617b      	str	r3, [r7, #20]
    break;
 80073ec:	e00c      	b.n	8007408 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80073ee:	4a12      	ldr	r2, [pc, #72]	; (8007438 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f6:	4a0e      	ldr	r2, [pc, #56]	; (8007430 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80073f8:	68d2      	ldr	r2, [r2, #12]
 80073fa:	0a12      	lsrs	r2, r2, #8
 80073fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007400:	fb02 f303 	mul.w	r3, r2, r3
 8007404:	617b      	str	r3, [r7, #20]
    break;
 8007406:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007408:	4b09      	ldr	r3, [pc, #36]	; (8007430 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	0e5b      	lsrs	r3, r3, #25
 800740e:	f003 0303 	and.w	r3, r3, #3
 8007412:	3301      	adds	r3, #1
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007420:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007422:	687b      	ldr	r3, [r7, #4]
}
 8007424:	4618      	mov	r0, r3
 8007426:	371c      	adds	r7, #28
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr
 8007430:	40021000 	.word	0x40021000
 8007434:	016e3600 	.word	0x016e3600
 8007438:	00f42400 	.word	0x00f42400

0800743c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007444:	2300      	movs	r3, #0
 8007446:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007448:	2300      	movs	r3, #0
 800744a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8098 	beq.w	800758a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800745a:	2300      	movs	r3, #0
 800745c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800745e:	4b43      	ldr	r3, [pc, #268]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10d      	bne.n	8007486 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800746a:	4b40      	ldr	r3, [pc, #256]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800746c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800746e:	4a3f      	ldr	r2, [pc, #252]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007474:	6593      	str	r3, [r2, #88]	; 0x58
 8007476:	4b3d      	ldr	r3, [pc, #244]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800747e:	60bb      	str	r3, [r7, #8]
 8007480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007482:	2301      	movs	r3, #1
 8007484:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007486:	4b3a      	ldr	r3, [pc, #232]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a39      	ldr	r2, [pc, #228]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800748c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007490:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007492:	f7fb fc85 	bl	8002da0 <HAL_GetTick>
 8007496:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007498:	e009      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800749a:	f7fb fc81 	bl	8002da0 <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d902      	bls.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	74fb      	strb	r3, [r7, #19]
        break;
 80074ac:	e005      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074ae:	4b30      	ldr	r3, [pc, #192]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0ef      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80074ba:	7cfb      	ldrb	r3, [r7, #19]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d159      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80074c0:	4b2a      	ldr	r3, [pc, #168]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d01e      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d019      	beq.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80074dc:	4b23      	ldr	r3, [pc, #140]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074e8:	4b20      	ldr	r3, [pc, #128]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ee:	4a1f      	ldr	r2, [pc, #124]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074f8:	4b1c      	ldr	r3, [pc, #112]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fe:	4a1b      	ldr	r2, [pc, #108]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007508:	4a18      	ldr	r2, [pc, #96]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d016      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800751a:	f7fb fc41 	bl	8002da0 <HAL_GetTick>
 800751e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007520:	e00b      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007522:	f7fb fc3d 	bl	8002da0 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007530:	4293      	cmp	r3, r2
 8007532:	d902      	bls.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007534:	2303      	movs	r3, #3
 8007536:	74fb      	strb	r3, [r7, #19]
            break;
 8007538:	e006      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800753a:	4b0c      	ldr	r3, [pc, #48]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800753c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d0ec      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007548:	7cfb      	ldrb	r3, [r7, #19]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10b      	bne.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800754e:	4b07      	ldr	r3, [pc, #28]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007554:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800755c:	4903      	ldr	r1, [pc, #12]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800755e:	4313      	orrs	r3, r2
 8007560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007564:	e008      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007566:	7cfb      	ldrb	r3, [r7, #19]
 8007568:	74bb      	strb	r3, [r7, #18]
 800756a:	e005      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800756c:	40021000 	.word	0x40021000
 8007570:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007574:	7cfb      	ldrb	r3, [r7, #19]
 8007576:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007578:	7c7b      	ldrb	r3, [r7, #17]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d105      	bne.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800757e:	4ba7      	ldr	r3, [pc, #668]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007582:	4aa6      	ldr	r2, [pc, #664]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007588:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007596:	4ba1      	ldr	r3, [pc, #644]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800759c:	f023 0203 	bic.w	r2, r3, #3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	499d      	ldr	r1, [pc, #628]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075b8:	4b98      	ldr	r3, [pc, #608]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075be:	f023 020c 	bic.w	r2, r3, #12
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	4995      	ldr	r1, [pc, #596]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80075da:	4b90      	ldr	r3, [pc, #576]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	498c      	ldr	r1, [pc, #560]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0308 	and.w	r3, r3, #8
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00a      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80075fc:	4b87      	ldr	r3, [pc, #540]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007602:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	4984      	ldr	r1, [pc, #528]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800760c:	4313      	orrs	r3, r2
 800760e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0310 	and.w	r3, r3, #16
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00a      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800761e:	4b7f      	ldr	r3, [pc, #508]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007624:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	497b      	ldr	r1, [pc, #492]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800762e:	4313      	orrs	r3, r2
 8007630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0320 	and.w	r3, r3, #32
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00a      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007640:	4b76      	ldr	r3, [pc, #472]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007646:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	4973      	ldr	r1, [pc, #460]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007650:	4313      	orrs	r3, r2
 8007652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007662:	4b6e      	ldr	r3, [pc, #440]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007668:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	496a      	ldr	r1, [pc, #424]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007672:	4313      	orrs	r3, r2
 8007674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007684:	4b65      	ldr	r3, [pc, #404]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800768a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	4962      	ldr	r1, [pc, #392]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007694:	4313      	orrs	r3, r2
 8007696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00a      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076a6:	4b5d      	ldr	r3, [pc, #372]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b4:	4959      	ldr	r1, [pc, #356]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00a      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80076c8:	4b54      	ldr	r3, [pc, #336]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076ce:	f023 0203 	bic.w	r2, r3, #3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d6:	4951      	ldr	r1, [pc, #324]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076d8:	4313      	orrs	r3, r2
 80076da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80076ea:	4b4c      	ldr	r3, [pc, #304]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	4948      	ldr	r1, [pc, #288]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007708:	2b00      	cmp	r3, #0
 800770a:	d015      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800770c:	4b43      	ldr	r3, [pc, #268]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800770e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007712:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771a:	4940      	ldr	r1, [pc, #256]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800771c:	4313      	orrs	r3, r2
 800771e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800772a:	d105      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800772c:	4b3b      	ldr	r3, [pc, #236]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	4a3a      	ldr	r2, [pc, #232]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007736:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007740:	2b00      	cmp	r3, #0
 8007742:	d015      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007744:	4b35      	ldr	r3, [pc, #212]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007752:	4932      	ldr	r1, [pc, #200]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007754:	4313      	orrs	r3, r2
 8007756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007762:	d105      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007764:	4b2d      	ldr	r3, [pc, #180]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	4a2c      	ldr	r2, [pc, #176]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800776a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800776e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007778:	2b00      	cmp	r3, #0
 800777a:	d015      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800777c:	4b27      	ldr	r3, [pc, #156]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800777e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007782:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	4924      	ldr	r1, [pc, #144]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800778c:	4313      	orrs	r3, r2
 800778e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007796:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800779a:	d105      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800779c:	4b1f      	ldr	r3, [pc, #124]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	4a1e      	ldr	r2, [pc, #120]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d015      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077b4:	4b19      	ldr	r3, [pc, #100]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c2:	4916      	ldr	r1, [pc, #88]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077d2:	d105      	bne.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077d4:	4b11      	ldr	r3, [pc, #68]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	4a10      	ldr	r2, [pc, #64]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d019      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80077ec:	4b0b      	ldr	r3, [pc, #44]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fa:	4908      	ldr	r1, [pc, #32]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800780a:	d109      	bne.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800780c:	4b03      	ldr	r3, [pc, #12]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	4a02      	ldr	r2, [pc, #8]	; (800781c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007816:	60d3      	str	r3, [r2, #12]
 8007818:	e002      	b.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800781a:	bf00      	nop
 800781c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d015      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800782c:	4b29      	ldr	r3, [pc, #164]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800782e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007832:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783a:	4926      	ldr	r1, [pc, #152]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800783c:	4313      	orrs	r3, r2
 800783e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800784a:	d105      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800784c:	4b21      	ldr	r3, [pc, #132]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	4a20      	ldr	r2, [pc, #128]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007856:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d015      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007864:	4b1b      	ldr	r3, [pc, #108]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800786a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007872:	4918      	ldr	r1, [pc, #96]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007874:	4313      	orrs	r3, r2
 8007876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800787e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007882:	d105      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007884:	4b13      	ldr	r3, [pc, #76]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	4a12      	ldr	r2, [pc, #72]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800788a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800788e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d015      	beq.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800789c:	4b0d      	ldr	r3, [pc, #52]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800789e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078aa:	490a      	ldr	r1, [pc, #40]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078ba:	d105      	bne.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078bc:	4b05      	ldr	r3, [pc, #20]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	4a04      	ldr	r2, [pc, #16]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80078c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078c6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80078c8:	7cbb      	ldrb	r3, [r7, #18]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	40021000 	.word	0x40021000

080078d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e049      	b.n	800797e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d106      	bne.n	8007904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7fb f8ae 	bl	8002a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	3304      	adds	r3, #4
 8007914:	4619      	mov	r1, r3
 8007916:	4610      	mov	r0, r2
 8007918:	f000 fe08 	bl	800852c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
	...

08007988 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b01      	cmp	r3, #1
 800799a:	d001      	beq.n	80079a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e04c      	b.n	8007a3a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a26      	ldr	r2, [pc, #152]	; (8007a48 <HAL_TIM_Base_Start+0xc0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d022      	beq.n	80079f8 <HAL_TIM_Base_Start+0x70>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ba:	d01d      	beq.n	80079f8 <HAL_TIM_Base_Start+0x70>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a22      	ldr	r2, [pc, #136]	; (8007a4c <HAL_TIM_Base_Start+0xc4>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d018      	beq.n	80079f8 <HAL_TIM_Base_Start+0x70>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a21      	ldr	r2, [pc, #132]	; (8007a50 <HAL_TIM_Base_Start+0xc8>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d013      	beq.n	80079f8 <HAL_TIM_Base_Start+0x70>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a1f      	ldr	r2, [pc, #124]	; (8007a54 <HAL_TIM_Base_Start+0xcc>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d00e      	beq.n	80079f8 <HAL_TIM_Base_Start+0x70>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a1e      	ldr	r2, [pc, #120]	; (8007a58 <HAL_TIM_Base_Start+0xd0>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d009      	beq.n	80079f8 <HAL_TIM_Base_Start+0x70>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a1c      	ldr	r2, [pc, #112]	; (8007a5c <HAL_TIM_Base_Start+0xd4>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d004      	beq.n	80079f8 <HAL_TIM_Base_Start+0x70>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a1b      	ldr	r2, [pc, #108]	; (8007a60 <HAL_TIM_Base_Start+0xd8>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d115      	bne.n	8007a24 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	4b19      	ldr	r3, [pc, #100]	; (8007a64 <HAL_TIM_Base_Start+0xdc>)
 8007a00:	4013      	ands	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b06      	cmp	r3, #6
 8007a08:	d015      	beq.n	8007a36 <HAL_TIM_Base_Start+0xae>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a10:	d011      	beq.n	8007a36 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f042 0201 	orr.w	r2, r2, #1
 8007a20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a22:	e008      	b.n	8007a36 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f042 0201 	orr.w	r2, r2, #1
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	e000      	b.n	8007a38 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	40012c00 	.word	0x40012c00
 8007a4c:	40000400 	.word	0x40000400
 8007a50:	40000800 	.word	0x40000800
 8007a54:	40000c00 	.word	0x40000c00
 8007a58:	40013400 	.word	0x40013400
 8007a5c:	40014000 	.word	0x40014000
 8007a60:	40015000 	.word	0x40015000
 8007a64:	00010007 	.word	0x00010007

08007a68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d001      	beq.n	8007a80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e054      	b.n	8007b2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68da      	ldr	r2, [r3, #12]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f042 0201 	orr.w	r2, r2, #1
 8007a96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a26      	ldr	r2, [pc, #152]	; (8007b38 <HAL_TIM_Base_Start_IT+0xd0>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d022      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x80>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aaa:	d01d      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x80>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a22      	ldr	r2, [pc, #136]	; (8007b3c <HAL_TIM_Base_Start_IT+0xd4>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d018      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x80>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a21      	ldr	r2, [pc, #132]	; (8007b40 <HAL_TIM_Base_Start_IT+0xd8>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d013      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x80>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a1f      	ldr	r2, [pc, #124]	; (8007b44 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d00e      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x80>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a1e      	ldr	r2, [pc, #120]	; (8007b48 <HAL_TIM_Base_Start_IT+0xe0>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d009      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x80>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a1c      	ldr	r2, [pc, #112]	; (8007b4c <HAL_TIM_Base_Start_IT+0xe4>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d004      	beq.n	8007ae8 <HAL_TIM_Base_Start_IT+0x80>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a1b      	ldr	r2, [pc, #108]	; (8007b50 <HAL_TIM_Base_Start_IT+0xe8>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d115      	bne.n	8007b14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	4b19      	ldr	r3, [pc, #100]	; (8007b54 <HAL_TIM_Base_Start_IT+0xec>)
 8007af0:	4013      	ands	r3, r2
 8007af2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b06      	cmp	r3, #6
 8007af8:	d015      	beq.n	8007b26 <HAL_TIM_Base_Start_IT+0xbe>
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b00:	d011      	beq.n	8007b26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f042 0201 	orr.w	r2, r2, #1
 8007b10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b12:	e008      	b.n	8007b26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0201 	orr.w	r2, r2, #1
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	e000      	b.n	8007b28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	40012c00 	.word	0x40012c00
 8007b3c:	40000400 	.word	0x40000400
 8007b40:	40000800 	.word	0x40000800
 8007b44:	40000c00 	.word	0x40000c00
 8007b48:	40013400 	.word	0x40013400
 8007b4c:	40014000 	.word	0x40014000
 8007b50:	40015000 	.word	0x40015000
 8007b54:	00010007 	.word	0x00010007

08007b58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e049      	b.n	8007bfe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d106      	bne.n	8007b84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7fa feee 	bl	8002960 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2202      	movs	r2, #2
 8007b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3304      	adds	r3, #4
 8007b94:	4619      	mov	r1, r3
 8007b96:	4610      	mov	r0, r2
 8007b98:	f000 fcc8 	bl	800852c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
	...

08007c08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d109      	bne.n	8007c2c <HAL_TIM_PWM_Start+0x24>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	bf14      	ite	ne
 8007c24:	2301      	movne	r3, #1
 8007c26:	2300      	moveq	r3, #0
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	e03c      	b.n	8007ca6 <HAL_TIM_PWM_Start+0x9e>
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	d109      	bne.n	8007c46 <HAL_TIM_PWM_Start+0x3e>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	bf14      	ite	ne
 8007c3e:	2301      	movne	r3, #1
 8007c40:	2300      	moveq	r3, #0
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	e02f      	b.n	8007ca6 <HAL_TIM_PWM_Start+0x9e>
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d109      	bne.n	8007c60 <HAL_TIM_PWM_Start+0x58>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	bf14      	ite	ne
 8007c58:	2301      	movne	r3, #1
 8007c5a:	2300      	moveq	r3, #0
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	e022      	b.n	8007ca6 <HAL_TIM_PWM_Start+0x9e>
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2b0c      	cmp	r3, #12
 8007c64:	d109      	bne.n	8007c7a <HAL_TIM_PWM_Start+0x72>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	bf14      	ite	ne
 8007c72:	2301      	movne	r3, #1
 8007c74:	2300      	moveq	r3, #0
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	e015      	b.n	8007ca6 <HAL_TIM_PWM_Start+0x9e>
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b10      	cmp	r3, #16
 8007c7e:	d109      	bne.n	8007c94 <HAL_TIM_PWM_Start+0x8c>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	bf14      	ite	ne
 8007c8c:	2301      	movne	r3, #1
 8007c8e:	2300      	moveq	r3, #0
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	e008      	b.n	8007ca6 <HAL_TIM_PWM_Start+0x9e>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	bf14      	ite	ne
 8007ca0:	2301      	movne	r3, #1
 8007ca2:	2300      	moveq	r3, #0
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e0a6      	b.n	8007dfc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d104      	bne.n	8007cbe <HAL_TIM_PWM_Start+0xb6>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cbc:	e023      	b.n	8007d06 <HAL_TIM_PWM_Start+0xfe>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b04      	cmp	r3, #4
 8007cc2:	d104      	bne.n	8007cce <HAL_TIM_PWM_Start+0xc6>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ccc:	e01b      	b.n	8007d06 <HAL_TIM_PWM_Start+0xfe>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	d104      	bne.n	8007cde <HAL_TIM_PWM_Start+0xd6>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cdc:	e013      	b.n	8007d06 <HAL_TIM_PWM_Start+0xfe>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b0c      	cmp	r3, #12
 8007ce2:	d104      	bne.n	8007cee <HAL_TIM_PWM_Start+0xe6>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cec:	e00b      	b.n	8007d06 <HAL_TIM_PWM_Start+0xfe>
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	2b10      	cmp	r3, #16
 8007cf2:	d104      	bne.n	8007cfe <HAL_TIM_PWM_Start+0xf6>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007cfc:	e003      	b.n	8007d06 <HAL_TIM_PWM_Start+0xfe>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2202      	movs	r2, #2
 8007d02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 f908 	bl	8008f24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a3a      	ldr	r2, [pc, #232]	; (8007e04 <HAL_TIM_PWM_Start+0x1fc>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d018      	beq.n	8007d50 <HAL_TIM_PWM_Start+0x148>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a39      	ldr	r2, [pc, #228]	; (8007e08 <HAL_TIM_PWM_Start+0x200>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d013      	beq.n	8007d50 <HAL_TIM_PWM_Start+0x148>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a37      	ldr	r2, [pc, #220]	; (8007e0c <HAL_TIM_PWM_Start+0x204>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d00e      	beq.n	8007d50 <HAL_TIM_PWM_Start+0x148>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a36      	ldr	r2, [pc, #216]	; (8007e10 <HAL_TIM_PWM_Start+0x208>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d009      	beq.n	8007d50 <HAL_TIM_PWM_Start+0x148>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a34      	ldr	r2, [pc, #208]	; (8007e14 <HAL_TIM_PWM_Start+0x20c>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d004      	beq.n	8007d50 <HAL_TIM_PWM_Start+0x148>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a33      	ldr	r2, [pc, #204]	; (8007e18 <HAL_TIM_PWM_Start+0x210>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d101      	bne.n	8007d54 <HAL_TIM_PWM_Start+0x14c>
 8007d50:	2301      	movs	r3, #1
 8007d52:	e000      	b.n	8007d56 <HAL_TIM_PWM_Start+0x14e>
 8007d54:	2300      	movs	r3, #0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d007      	beq.n	8007d6a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a25      	ldr	r2, [pc, #148]	; (8007e04 <HAL_TIM_PWM_Start+0x1fc>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d022      	beq.n	8007dba <HAL_TIM_PWM_Start+0x1b2>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d7c:	d01d      	beq.n	8007dba <HAL_TIM_PWM_Start+0x1b2>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a26      	ldr	r2, [pc, #152]	; (8007e1c <HAL_TIM_PWM_Start+0x214>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d018      	beq.n	8007dba <HAL_TIM_PWM_Start+0x1b2>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a24      	ldr	r2, [pc, #144]	; (8007e20 <HAL_TIM_PWM_Start+0x218>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d013      	beq.n	8007dba <HAL_TIM_PWM_Start+0x1b2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a23      	ldr	r2, [pc, #140]	; (8007e24 <HAL_TIM_PWM_Start+0x21c>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d00e      	beq.n	8007dba <HAL_TIM_PWM_Start+0x1b2>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a19      	ldr	r2, [pc, #100]	; (8007e08 <HAL_TIM_PWM_Start+0x200>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d009      	beq.n	8007dba <HAL_TIM_PWM_Start+0x1b2>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a18      	ldr	r2, [pc, #96]	; (8007e0c <HAL_TIM_PWM_Start+0x204>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d004      	beq.n	8007dba <HAL_TIM_PWM_Start+0x1b2>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a18      	ldr	r2, [pc, #96]	; (8007e18 <HAL_TIM_PWM_Start+0x210>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d115      	bne.n	8007de6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	4b19      	ldr	r3, [pc, #100]	; (8007e28 <HAL_TIM_PWM_Start+0x220>)
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b06      	cmp	r3, #6
 8007dca:	d015      	beq.n	8007df8 <HAL_TIM_PWM_Start+0x1f0>
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dd2:	d011      	beq.n	8007df8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0201 	orr.w	r2, r2, #1
 8007de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007de4:	e008      	b.n	8007df8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f042 0201 	orr.w	r2, r2, #1
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	e000      	b.n	8007dfa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}
 8007e04:	40012c00 	.word	0x40012c00
 8007e08:	40013400 	.word	0x40013400
 8007e0c:	40014000 	.word	0x40014000
 8007e10:	40014400 	.word	0x40014400
 8007e14:	40014800 	.word	0x40014800
 8007e18:	40015000 	.word	0x40015000
 8007e1c:	40000400 	.word	0x40000400
 8007e20:	40000800 	.word	0x40000800
 8007e24:	40000c00 	.word	0x40000c00
 8007e28:	00010007 	.word	0x00010007

08007e2c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e049      	b.n	8007ed2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7fa fda4 	bl	80029a0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3304      	adds	r3, #4
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4610      	mov	r0, r2
 8007e6c:	f000 fb5e 	bl	800852c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d104      	bne.n	8007efa <HAL_TIM_IC_Start_IT+0x1e>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	e023      	b.n	8007f42 <HAL_TIM_IC_Start_IT+0x66>
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b04      	cmp	r3, #4
 8007efe:	d104      	bne.n	8007f0a <HAL_TIM_IC_Start_IT+0x2e>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	e01b      	b.n	8007f42 <HAL_TIM_IC_Start_IT+0x66>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	2b08      	cmp	r3, #8
 8007f0e:	d104      	bne.n	8007f1a <HAL_TIM_IC_Start_IT+0x3e>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	e013      	b.n	8007f42 <HAL_TIM_IC_Start_IT+0x66>
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	2b0c      	cmp	r3, #12
 8007f1e:	d104      	bne.n	8007f2a <HAL_TIM_IC_Start_IT+0x4e>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	e00b      	b.n	8007f42 <HAL_TIM_IC_Start_IT+0x66>
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	2b10      	cmp	r3, #16
 8007f2e:	d104      	bne.n	8007f3a <HAL_TIM_IC_Start_IT+0x5e>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	e003      	b.n	8007f42 <HAL_TIM_IC_Start_IT+0x66>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d104      	bne.n	8007f54 <HAL_TIM_IC_Start_IT+0x78>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	e013      	b.n	8007f7c <HAL_TIM_IC_Start_IT+0xa0>
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2b04      	cmp	r3, #4
 8007f58:	d104      	bne.n	8007f64 <HAL_TIM_IC_Start_IT+0x88>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	e00b      	b.n	8007f7c <HAL_TIM_IC_Start_IT+0xa0>
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	2b08      	cmp	r3, #8
 8007f68:	d104      	bne.n	8007f74 <HAL_TIM_IC_Start_IT+0x98>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	e003      	b.n	8007f7c <HAL_TIM_IC_Start_IT+0xa0>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f7e:	7bbb      	ldrb	r3, [r7, #14]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d102      	bne.n	8007f8a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f84:	7b7b      	ldrb	r3, [r7, #13]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d001      	beq.n	8007f8e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e0e2      	b.n	8008154 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d104      	bne.n	8007f9e <HAL_TIM_IC_Start_IT+0xc2>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2202      	movs	r2, #2
 8007f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f9c:	e023      	b.n	8007fe6 <HAL_TIM_IC_Start_IT+0x10a>
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	d104      	bne.n	8007fae <HAL_TIM_IC_Start_IT+0xd2>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fac:	e01b      	b.n	8007fe6 <HAL_TIM_IC_Start_IT+0x10a>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b08      	cmp	r3, #8
 8007fb2:	d104      	bne.n	8007fbe <HAL_TIM_IC_Start_IT+0xe2>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fbc:	e013      	b.n	8007fe6 <HAL_TIM_IC_Start_IT+0x10a>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	2b0c      	cmp	r3, #12
 8007fc2:	d104      	bne.n	8007fce <HAL_TIM_IC_Start_IT+0xf2>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fcc:	e00b      	b.n	8007fe6 <HAL_TIM_IC_Start_IT+0x10a>
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	2b10      	cmp	r3, #16
 8007fd2:	d104      	bne.n	8007fde <HAL_TIM_IC_Start_IT+0x102>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fdc:	e003      	b.n	8007fe6 <HAL_TIM_IC_Start_IT+0x10a>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d104      	bne.n	8007ff6 <HAL_TIM_IC_Start_IT+0x11a>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2202      	movs	r2, #2
 8007ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ff4:	e013      	b.n	800801e <HAL_TIM_IC_Start_IT+0x142>
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	2b04      	cmp	r3, #4
 8007ffa:	d104      	bne.n	8008006 <HAL_TIM_IC_Start_IT+0x12a>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2202      	movs	r2, #2
 8008000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008004:	e00b      	b.n	800801e <HAL_TIM_IC_Start_IT+0x142>
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b08      	cmp	r3, #8
 800800a:	d104      	bne.n	8008016 <HAL_TIM_IC_Start_IT+0x13a>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2202      	movs	r2, #2
 8008010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008014:	e003      	b.n	800801e <HAL_TIM_IC_Start_IT+0x142>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2202      	movs	r2, #2
 800801a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	2b0c      	cmp	r3, #12
 8008022:	d841      	bhi.n	80080a8 <HAL_TIM_IC_Start_IT+0x1cc>
 8008024:	a201      	add	r2, pc, #4	; (adr r2, 800802c <HAL_TIM_IC_Start_IT+0x150>)
 8008026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802a:	bf00      	nop
 800802c:	08008061 	.word	0x08008061
 8008030:	080080a9 	.word	0x080080a9
 8008034:	080080a9 	.word	0x080080a9
 8008038:	080080a9 	.word	0x080080a9
 800803c:	08008073 	.word	0x08008073
 8008040:	080080a9 	.word	0x080080a9
 8008044:	080080a9 	.word	0x080080a9
 8008048:	080080a9 	.word	0x080080a9
 800804c:	08008085 	.word	0x08008085
 8008050:	080080a9 	.word	0x080080a9
 8008054:	080080a9 	.word	0x080080a9
 8008058:	080080a9 	.word	0x080080a9
 800805c:	08008097 	.word	0x08008097
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f042 0202 	orr.w	r2, r2, #2
 800806e:	60da      	str	r2, [r3, #12]
      break;
 8008070:	e01d      	b.n	80080ae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68da      	ldr	r2, [r3, #12]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0204 	orr.w	r2, r2, #4
 8008080:	60da      	str	r2, [r3, #12]
      break;
 8008082:	e014      	b.n	80080ae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68da      	ldr	r2, [r3, #12]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f042 0208 	orr.w	r2, r2, #8
 8008092:	60da      	str	r2, [r3, #12]
      break;
 8008094:	e00b      	b.n	80080ae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f042 0210 	orr.w	r2, r2, #16
 80080a4:	60da      	str	r2, [r3, #12]
      break;
 80080a6:	e002      	b.n	80080ae <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	73fb      	strb	r3, [r7, #15]
      break;
 80080ac:	bf00      	nop
  }

  if (status == HAL_OK)
 80080ae:	7bfb      	ldrb	r3, [r7, #15]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d14e      	bne.n	8008152 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2201      	movs	r2, #1
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 ff31 	bl	8008f24 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a25      	ldr	r2, [pc, #148]	; (800815c <HAL_TIM_IC_Start_IT+0x280>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d022      	beq.n	8008112 <HAL_TIM_IC_Start_IT+0x236>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080d4:	d01d      	beq.n	8008112 <HAL_TIM_IC_Start_IT+0x236>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a21      	ldr	r2, [pc, #132]	; (8008160 <HAL_TIM_IC_Start_IT+0x284>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d018      	beq.n	8008112 <HAL_TIM_IC_Start_IT+0x236>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1f      	ldr	r2, [pc, #124]	; (8008164 <HAL_TIM_IC_Start_IT+0x288>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d013      	beq.n	8008112 <HAL_TIM_IC_Start_IT+0x236>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a1e      	ldr	r2, [pc, #120]	; (8008168 <HAL_TIM_IC_Start_IT+0x28c>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d00e      	beq.n	8008112 <HAL_TIM_IC_Start_IT+0x236>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a1c      	ldr	r2, [pc, #112]	; (800816c <HAL_TIM_IC_Start_IT+0x290>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d009      	beq.n	8008112 <HAL_TIM_IC_Start_IT+0x236>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a1b      	ldr	r2, [pc, #108]	; (8008170 <HAL_TIM_IC_Start_IT+0x294>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d004      	beq.n	8008112 <HAL_TIM_IC_Start_IT+0x236>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a19      	ldr	r2, [pc, #100]	; (8008174 <HAL_TIM_IC_Start_IT+0x298>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d115      	bne.n	800813e <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	4b17      	ldr	r3, [pc, #92]	; (8008178 <HAL_TIM_IC_Start_IT+0x29c>)
 800811a:	4013      	ands	r3, r2
 800811c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	2b06      	cmp	r3, #6
 8008122:	d015      	beq.n	8008150 <HAL_TIM_IC_Start_IT+0x274>
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800812a:	d011      	beq.n	8008150 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f042 0201 	orr.w	r2, r2, #1
 800813a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800813c:	e008      	b.n	8008150 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f042 0201 	orr.w	r2, r2, #1
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	e000      	b.n	8008152 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008150:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008152:	7bfb      	ldrb	r3, [r7, #15]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	40012c00 	.word	0x40012c00
 8008160:	40000400 	.word	0x40000400
 8008164:	40000800 	.word	0x40000800
 8008168:	40000c00 	.word	0x40000c00
 800816c:	40013400 	.word	0x40013400
 8008170:	40014000 	.word	0x40014000
 8008174:	40015000 	.word	0x40015000
 8008178:	00010007 	.word	0x00010007

0800817c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008188:	2300      	movs	r3, #0
 800818a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008192:	2b01      	cmp	r3, #1
 8008194:	d101      	bne.n	800819a <HAL_TIM_IC_ConfigChannel+0x1e>
 8008196:	2302      	movs	r3, #2
 8008198:	e088      	b.n	80082ac <HAL_TIM_IC_ConfigChannel+0x130>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d11b      	bne.n	80081e0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6818      	ldr	r0, [r3, #0]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	6819      	ldr	r1, [r3, #0]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f000 fd8a 	bl	8008cd0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 020c 	bic.w	r2, r2, #12
 80081ca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6999      	ldr	r1, [r3, #24]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	689a      	ldr	r2, [r3, #8]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	430a      	orrs	r2, r1
 80081dc:	619a      	str	r2, [r3, #24]
 80081de:	e060      	b.n	80082a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	d11c      	bne.n	8008220 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6818      	ldr	r0, [r3, #0]
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	6819      	ldr	r1, [r3, #0]
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	f000 fddf 	bl	8008db8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	699a      	ldr	r2, [r3, #24]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008208:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	6999      	ldr	r1, [r3, #24]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	021a      	lsls	r2, r3, #8
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	430a      	orrs	r2, r1
 800821c:	619a      	str	r2, [r3, #24]
 800821e:	e040      	b.n	80082a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2b08      	cmp	r3, #8
 8008224:	d11b      	bne.n	800825e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6818      	ldr	r0, [r3, #0]
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	6819      	ldr	r1, [r3, #0]
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	f000 fdfc 	bl	8008e32 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69da      	ldr	r2, [r3, #28]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f022 020c 	bic.w	r2, r2, #12
 8008248:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	69d9      	ldr	r1, [r3, #28]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	61da      	str	r2, [r3, #28]
 800825c:	e021      	b.n	80082a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b0c      	cmp	r3, #12
 8008262:	d11c      	bne.n	800829e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	6819      	ldr	r1, [r3, #0]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f000 fe19 	bl	8008eaa <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	69da      	ldr	r2, [r3, #28]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008286:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	69d9      	ldr	r1, [r3, #28]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	021a      	lsls	r2, r3, #8
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	61da      	str	r2, [r3, #28]
 800829c:	e001      	b.n	80082a2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d101      	bne.n	80082d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082ce:	2302      	movs	r3, #2
 80082d0:	e0ff      	b.n	80084d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b14      	cmp	r3, #20
 80082de:	f200 80f0 	bhi.w	80084c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80082e2:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e8:	0800833d 	.word	0x0800833d
 80082ec:	080084c3 	.word	0x080084c3
 80082f0:	080084c3 	.word	0x080084c3
 80082f4:	080084c3 	.word	0x080084c3
 80082f8:	0800837d 	.word	0x0800837d
 80082fc:	080084c3 	.word	0x080084c3
 8008300:	080084c3 	.word	0x080084c3
 8008304:	080084c3 	.word	0x080084c3
 8008308:	080083bf 	.word	0x080083bf
 800830c:	080084c3 	.word	0x080084c3
 8008310:	080084c3 	.word	0x080084c3
 8008314:	080084c3 	.word	0x080084c3
 8008318:	080083ff 	.word	0x080083ff
 800831c:	080084c3 	.word	0x080084c3
 8008320:	080084c3 	.word	0x080084c3
 8008324:	080084c3 	.word	0x080084c3
 8008328:	08008441 	.word	0x08008441
 800832c:	080084c3 	.word	0x080084c3
 8008330:	080084c3 	.word	0x080084c3
 8008334:	080084c3 	.word	0x080084c3
 8008338:	08008481 	.word	0x08008481
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68b9      	ldr	r1, [r7, #8]
 8008342:	4618      	mov	r0, r3
 8008344:	f000 f99a 	bl	800867c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	699a      	ldr	r2, [r3, #24]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0208 	orr.w	r2, r2, #8
 8008356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	699a      	ldr	r2, [r3, #24]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f022 0204 	bic.w	r2, r2, #4
 8008366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6999      	ldr	r1, [r3, #24]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	691a      	ldr	r2, [r3, #16]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	430a      	orrs	r2, r1
 8008378:	619a      	str	r2, [r3, #24]
      break;
 800837a:	e0a5      	b.n	80084c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68b9      	ldr	r1, [r7, #8]
 8008382:	4618      	mov	r0, r3
 8008384:	f000 fa14 	bl	80087b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	699a      	ldr	r2, [r3, #24]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008396:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	699a      	ldr	r2, [r3, #24]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6999      	ldr	r1, [r3, #24]
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	021a      	lsls	r2, r3, #8
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	430a      	orrs	r2, r1
 80083ba:	619a      	str	r2, [r3, #24]
      break;
 80083bc:	e084      	b.n	80084c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68b9      	ldr	r1, [r7, #8]
 80083c4:	4618      	mov	r0, r3
 80083c6:	f000 fa87 	bl	80088d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69da      	ldr	r2, [r3, #28]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f042 0208 	orr.w	r2, r2, #8
 80083d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	69da      	ldr	r2, [r3, #28]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f022 0204 	bic.w	r2, r2, #4
 80083e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69d9      	ldr	r1, [r3, #28]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	691a      	ldr	r2, [r3, #16]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	430a      	orrs	r2, r1
 80083fa:	61da      	str	r2, [r3, #28]
      break;
 80083fc:	e064      	b.n	80084c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68b9      	ldr	r1, [r7, #8]
 8008404:	4618      	mov	r0, r3
 8008406:	f000 faf9 	bl	80089fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69da      	ldr	r2, [r3, #28]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008418:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	69da      	ldr	r2, [r3, #28]
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008428:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	69d9      	ldr	r1, [r3, #28]
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	021a      	lsls	r2, r3, #8
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	430a      	orrs	r2, r1
 800843c:	61da      	str	r2, [r3, #28]
      break;
 800843e:	e043      	b.n	80084c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68b9      	ldr	r1, [r7, #8]
 8008446:	4618      	mov	r0, r3
 8008448:	f000 fb6c 	bl	8008b24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f042 0208 	orr.w	r2, r2, #8
 800845a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f022 0204 	bic.w	r2, r2, #4
 800846a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	691a      	ldr	r2, [r3, #16]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	430a      	orrs	r2, r1
 800847c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800847e:	e023      	b.n	80084c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68b9      	ldr	r1, [r7, #8]
 8008486:	4618      	mov	r0, r3
 8008488:	f000 fbb6 	bl	8008bf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800849a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084aa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	021a      	lsls	r2, r3, #8
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80084c0:	e002      	b.n	80084c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	75fb      	strb	r3, [r7, #23]
      break;
 80084c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop

080084dc <HAL_TIM_GenerateEvent>:
  *         only for timer instances supporting break input(s).
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d101      	bne.n	80084f4 <HAL_TIM_GenerateEvent+0x18>
 80084f0:	2302      	movs	r3, #2
 80084f2:	e014      	b.n	800851e <HAL_TIM_GenerateEvent+0x42>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2202      	movs	r2, #2
 8008500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
	...

0800852c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a46      	ldr	r2, [pc, #280]	; (8008658 <TIM_Base_SetConfig+0x12c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d017      	beq.n	8008574 <TIM_Base_SetConfig+0x48>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800854a:	d013      	beq.n	8008574 <TIM_Base_SetConfig+0x48>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a43      	ldr	r2, [pc, #268]	; (800865c <TIM_Base_SetConfig+0x130>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d00f      	beq.n	8008574 <TIM_Base_SetConfig+0x48>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a42      	ldr	r2, [pc, #264]	; (8008660 <TIM_Base_SetConfig+0x134>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d00b      	beq.n	8008574 <TIM_Base_SetConfig+0x48>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4a41      	ldr	r2, [pc, #260]	; (8008664 <TIM_Base_SetConfig+0x138>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d007      	beq.n	8008574 <TIM_Base_SetConfig+0x48>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	4a40      	ldr	r2, [pc, #256]	; (8008668 <TIM_Base_SetConfig+0x13c>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d003      	beq.n	8008574 <TIM_Base_SetConfig+0x48>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	4a3f      	ldr	r2, [pc, #252]	; (800866c <TIM_Base_SetConfig+0x140>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d108      	bne.n	8008586 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800857a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	4313      	orrs	r3, r2
 8008584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a33      	ldr	r2, [pc, #204]	; (8008658 <TIM_Base_SetConfig+0x12c>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d023      	beq.n	80085d6 <TIM_Base_SetConfig+0xaa>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008594:	d01f      	beq.n	80085d6 <TIM_Base_SetConfig+0xaa>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4a30      	ldr	r2, [pc, #192]	; (800865c <TIM_Base_SetConfig+0x130>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d01b      	beq.n	80085d6 <TIM_Base_SetConfig+0xaa>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	4a2f      	ldr	r2, [pc, #188]	; (8008660 <TIM_Base_SetConfig+0x134>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d017      	beq.n	80085d6 <TIM_Base_SetConfig+0xaa>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4a2e      	ldr	r2, [pc, #184]	; (8008664 <TIM_Base_SetConfig+0x138>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d013      	beq.n	80085d6 <TIM_Base_SetConfig+0xaa>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	4a2d      	ldr	r2, [pc, #180]	; (8008668 <TIM_Base_SetConfig+0x13c>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d00f      	beq.n	80085d6 <TIM_Base_SetConfig+0xaa>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4a2d      	ldr	r2, [pc, #180]	; (8008670 <TIM_Base_SetConfig+0x144>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d00b      	beq.n	80085d6 <TIM_Base_SetConfig+0xaa>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4a2c      	ldr	r2, [pc, #176]	; (8008674 <TIM_Base_SetConfig+0x148>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d007      	beq.n	80085d6 <TIM_Base_SetConfig+0xaa>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4a2b      	ldr	r2, [pc, #172]	; (8008678 <TIM_Base_SetConfig+0x14c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d003      	beq.n	80085d6 <TIM_Base_SetConfig+0xaa>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4a26      	ldr	r2, [pc, #152]	; (800866c <TIM_Base_SetConfig+0x140>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d108      	bne.n	80085e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	68db      	ldr	r3, [r3, #12]
 80085e2:	68fa      	ldr	r2, [r7, #12]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	689a      	ldr	r2, [r3, #8]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	4a12      	ldr	r2, [pc, #72]	; (8008658 <TIM_Base_SetConfig+0x12c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d013      	beq.n	800863c <TIM_Base_SetConfig+0x110>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4a14      	ldr	r2, [pc, #80]	; (8008668 <TIM_Base_SetConfig+0x13c>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d00f      	beq.n	800863c <TIM_Base_SetConfig+0x110>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a14      	ldr	r2, [pc, #80]	; (8008670 <TIM_Base_SetConfig+0x144>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d00b      	beq.n	800863c <TIM_Base_SetConfig+0x110>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a13      	ldr	r2, [pc, #76]	; (8008674 <TIM_Base_SetConfig+0x148>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d007      	beq.n	800863c <TIM_Base_SetConfig+0x110>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a12      	ldr	r2, [pc, #72]	; (8008678 <TIM_Base_SetConfig+0x14c>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d003      	beq.n	800863c <TIM_Base_SetConfig+0x110>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	4a0d      	ldr	r2, [pc, #52]	; (800866c <TIM_Base_SetConfig+0x140>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d103      	bne.n	8008644 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	691a      	ldr	r2, [r3, #16]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2201      	movs	r2, #1
 8008648:	615a      	str	r2, [r3, #20]
}
 800864a:	bf00      	nop
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop
 8008658:	40012c00 	.word	0x40012c00
 800865c:	40000400 	.word	0x40000400
 8008660:	40000800 	.word	0x40000800
 8008664:	40000c00 	.word	0x40000c00
 8008668:	40013400 	.word	0x40013400
 800866c:	40015000 	.word	0x40015000
 8008670:	40014000 	.word	0x40014000
 8008674:	40014400 	.word	0x40014400
 8008678:	40014800 	.word	0x40014800

0800867c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800867c:	b480      	push	{r7}
 800867e:	b087      	sub	sp, #28
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6a1b      	ldr	r3, [r3, #32]
 800868a:	f023 0201 	bic.w	r2, r3, #1
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 0303 	bic.w	r3, r3, #3
 80086b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f023 0302 	bic.w	r3, r3, #2
 80086c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a30      	ldr	r2, [pc, #192]	; (8008798 <TIM_OC1_SetConfig+0x11c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d013      	beq.n	8008704 <TIM_OC1_SetConfig+0x88>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a2f      	ldr	r2, [pc, #188]	; (800879c <TIM_OC1_SetConfig+0x120>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d00f      	beq.n	8008704 <TIM_OC1_SetConfig+0x88>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a2e      	ldr	r2, [pc, #184]	; (80087a0 <TIM_OC1_SetConfig+0x124>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d00b      	beq.n	8008704 <TIM_OC1_SetConfig+0x88>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a2d      	ldr	r2, [pc, #180]	; (80087a4 <TIM_OC1_SetConfig+0x128>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d007      	beq.n	8008704 <TIM_OC1_SetConfig+0x88>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a2c      	ldr	r2, [pc, #176]	; (80087a8 <TIM_OC1_SetConfig+0x12c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d003      	beq.n	8008704 <TIM_OC1_SetConfig+0x88>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4a2b      	ldr	r2, [pc, #172]	; (80087ac <TIM_OC1_SetConfig+0x130>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d10c      	bne.n	800871e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f023 0308 	bic.w	r3, r3, #8
 800870a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	697a      	ldr	r2, [r7, #20]
 8008712:	4313      	orrs	r3, r2
 8008714:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f023 0304 	bic.w	r3, r3, #4
 800871c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a1d      	ldr	r2, [pc, #116]	; (8008798 <TIM_OC1_SetConfig+0x11c>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d013      	beq.n	800874e <TIM_OC1_SetConfig+0xd2>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a1c      	ldr	r2, [pc, #112]	; (800879c <TIM_OC1_SetConfig+0x120>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d00f      	beq.n	800874e <TIM_OC1_SetConfig+0xd2>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a1b      	ldr	r2, [pc, #108]	; (80087a0 <TIM_OC1_SetConfig+0x124>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d00b      	beq.n	800874e <TIM_OC1_SetConfig+0xd2>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a1a      	ldr	r2, [pc, #104]	; (80087a4 <TIM_OC1_SetConfig+0x128>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d007      	beq.n	800874e <TIM_OC1_SetConfig+0xd2>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a19      	ldr	r2, [pc, #100]	; (80087a8 <TIM_OC1_SetConfig+0x12c>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d003      	beq.n	800874e <TIM_OC1_SetConfig+0xd2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	4a18      	ldr	r2, [pc, #96]	; (80087ac <TIM_OC1_SetConfig+0x130>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d111      	bne.n	8008772 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800875c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	693a      	ldr	r2, [r7, #16]
 8008764:	4313      	orrs	r3, r2
 8008766:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	4313      	orrs	r3, r2
 8008770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	697a      	ldr	r2, [r7, #20]
 800878a:	621a      	str	r2, [r3, #32]
}
 800878c:	bf00      	nop
 800878e:	371c      	adds	r7, #28
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	40012c00 	.word	0x40012c00
 800879c:	40013400 	.word	0x40013400
 80087a0:	40014000 	.word	0x40014000
 80087a4:	40014400 	.word	0x40014400
 80087a8:	40014800 	.word	0x40014800
 80087ac:	40015000 	.word	0x40015000

080087b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b087      	sub	sp, #28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	f023 0210 	bic.w	r2, r3, #16
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	021b      	lsls	r3, r3, #8
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f023 0320 	bic.w	r3, r3, #32
 80087fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	011b      	lsls	r3, r3, #4
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	4313      	orrs	r3, r2
 800880a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a2c      	ldr	r2, [pc, #176]	; (80088c0 <TIM_OC2_SetConfig+0x110>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d007      	beq.n	8008824 <TIM_OC2_SetConfig+0x74>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a2b      	ldr	r2, [pc, #172]	; (80088c4 <TIM_OC2_SetConfig+0x114>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d003      	beq.n	8008824 <TIM_OC2_SetConfig+0x74>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a2a      	ldr	r2, [pc, #168]	; (80088c8 <TIM_OC2_SetConfig+0x118>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d10d      	bne.n	8008840 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800882a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	011b      	lsls	r3, r3, #4
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	4313      	orrs	r3, r2
 8008836:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800883e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a1f      	ldr	r2, [pc, #124]	; (80088c0 <TIM_OC2_SetConfig+0x110>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d013      	beq.n	8008870 <TIM_OC2_SetConfig+0xc0>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a1e      	ldr	r2, [pc, #120]	; (80088c4 <TIM_OC2_SetConfig+0x114>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d00f      	beq.n	8008870 <TIM_OC2_SetConfig+0xc0>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a1e      	ldr	r2, [pc, #120]	; (80088cc <TIM_OC2_SetConfig+0x11c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d00b      	beq.n	8008870 <TIM_OC2_SetConfig+0xc0>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a1d      	ldr	r2, [pc, #116]	; (80088d0 <TIM_OC2_SetConfig+0x120>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d007      	beq.n	8008870 <TIM_OC2_SetConfig+0xc0>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a1c      	ldr	r2, [pc, #112]	; (80088d4 <TIM_OC2_SetConfig+0x124>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d003      	beq.n	8008870 <TIM_OC2_SetConfig+0xc0>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a17      	ldr	r2, [pc, #92]	; (80088c8 <TIM_OC2_SetConfig+0x118>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d113      	bne.n	8008898 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800887e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	695b      	ldr	r3, [r3, #20]
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	693a      	ldr	r2, [r7, #16]
 8008888:	4313      	orrs	r3, r2
 800888a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	693a      	ldr	r2, [r7, #16]
 800889c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	621a      	str	r2, [r3, #32]
}
 80088b2:	bf00      	nop
 80088b4:	371c      	adds	r7, #28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	40012c00 	.word	0x40012c00
 80088c4:	40013400 	.word	0x40013400
 80088c8:	40015000 	.word	0x40015000
 80088cc:	40014000 	.word	0x40014000
 80088d0:	40014400 	.word	0x40014400
 80088d4:	40014800 	.word	0x40014800

080088d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800890a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f023 0303 	bic.w	r3, r3, #3
 8008912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	4313      	orrs	r3, r2
 800891c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	021b      	lsls	r3, r3, #8
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	4313      	orrs	r3, r2
 8008930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a2b      	ldr	r2, [pc, #172]	; (80089e4 <TIM_OC3_SetConfig+0x10c>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d007      	beq.n	800894a <TIM_OC3_SetConfig+0x72>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a2a      	ldr	r2, [pc, #168]	; (80089e8 <TIM_OC3_SetConfig+0x110>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d003      	beq.n	800894a <TIM_OC3_SetConfig+0x72>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a29      	ldr	r2, [pc, #164]	; (80089ec <TIM_OC3_SetConfig+0x114>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d10d      	bne.n	8008966 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	021b      	lsls	r3, r3, #8
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	4313      	orrs	r3, r2
 800895c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a1e      	ldr	r2, [pc, #120]	; (80089e4 <TIM_OC3_SetConfig+0x10c>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d013      	beq.n	8008996 <TIM_OC3_SetConfig+0xbe>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a1d      	ldr	r2, [pc, #116]	; (80089e8 <TIM_OC3_SetConfig+0x110>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d00f      	beq.n	8008996 <TIM_OC3_SetConfig+0xbe>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a1d      	ldr	r2, [pc, #116]	; (80089f0 <TIM_OC3_SetConfig+0x118>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d00b      	beq.n	8008996 <TIM_OC3_SetConfig+0xbe>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a1c      	ldr	r2, [pc, #112]	; (80089f4 <TIM_OC3_SetConfig+0x11c>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d007      	beq.n	8008996 <TIM_OC3_SetConfig+0xbe>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a1b      	ldr	r2, [pc, #108]	; (80089f8 <TIM_OC3_SetConfig+0x120>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d003      	beq.n	8008996 <TIM_OC3_SetConfig+0xbe>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a16      	ldr	r2, [pc, #88]	; (80089ec <TIM_OC3_SetConfig+0x114>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d113      	bne.n	80089be <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800899c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	011b      	lsls	r3, r3, #4
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	011b      	lsls	r3, r3, #4
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	621a      	str	r2, [r3, #32]
}
 80089d8:	bf00      	nop
 80089da:	371c      	adds	r7, #28
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	40012c00 	.word	0x40012c00
 80089e8:	40013400 	.word	0x40013400
 80089ec:	40015000 	.word	0x40015000
 80089f0:	40014000 	.word	0x40014000
 80089f4:	40014400 	.word	0x40014400
 80089f8:	40014800 	.word	0x40014800

080089fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	021b      	lsls	r3, r3, #8
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	031b      	lsls	r3, r3, #12
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a2c      	ldr	r2, [pc, #176]	; (8008b0c <TIM_OC4_SetConfig+0x110>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d007      	beq.n	8008a70 <TIM_OC4_SetConfig+0x74>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a2b      	ldr	r2, [pc, #172]	; (8008b10 <TIM_OC4_SetConfig+0x114>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d003      	beq.n	8008a70 <TIM_OC4_SetConfig+0x74>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a2a      	ldr	r2, [pc, #168]	; (8008b14 <TIM_OC4_SetConfig+0x118>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d10d      	bne.n	8008a8c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	031b      	lsls	r3, r3, #12
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a1f      	ldr	r2, [pc, #124]	; (8008b0c <TIM_OC4_SetConfig+0x110>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d013      	beq.n	8008abc <TIM_OC4_SetConfig+0xc0>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a1e      	ldr	r2, [pc, #120]	; (8008b10 <TIM_OC4_SetConfig+0x114>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d00f      	beq.n	8008abc <TIM_OC4_SetConfig+0xc0>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a1e      	ldr	r2, [pc, #120]	; (8008b18 <TIM_OC4_SetConfig+0x11c>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d00b      	beq.n	8008abc <TIM_OC4_SetConfig+0xc0>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a1d      	ldr	r2, [pc, #116]	; (8008b1c <TIM_OC4_SetConfig+0x120>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d007      	beq.n	8008abc <TIM_OC4_SetConfig+0xc0>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a1c      	ldr	r2, [pc, #112]	; (8008b20 <TIM_OC4_SetConfig+0x124>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d003      	beq.n	8008abc <TIM_OC4_SetConfig+0xc0>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a17      	ldr	r2, [pc, #92]	; (8008b14 <TIM_OC4_SetConfig+0x118>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d113      	bne.n	8008ae4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ac2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008aca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	019b      	lsls	r3, r3, #6
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	019b      	lsls	r3, r3, #6
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	621a      	str	r2, [r3, #32]
}
 8008afe:	bf00      	nop
 8008b00:	371c      	adds	r7, #28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	40012c00 	.word	0x40012c00
 8008b10:	40013400 	.word	0x40013400
 8008b14:	40015000 	.word	0x40015000
 8008b18:	40014000 	.word	0x40014000
 8008b1c:	40014400 	.word	0x40014400
 8008b20:	40014800 	.word	0x40014800

08008b24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	041b      	lsls	r3, r3, #16
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a19      	ldr	r2, [pc, #100]	; (8008be0 <TIM_OC5_SetConfig+0xbc>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d013      	beq.n	8008ba6 <TIM_OC5_SetConfig+0x82>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a18      	ldr	r2, [pc, #96]	; (8008be4 <TIM_OC5_SetConfig+0xc0>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d00f      	beq.n	8008ba6 <TIM_OC5_SetConfig+0x82>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a17      	ldr	r2, [pc, #92]	; (8008be8 <TIM_OC5_SetConfig+0xc4>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d00b      	beq.n	8008ba6 <TIM_OC5_SetConfig+0x82>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a16      	ldr	r2, [pc, #88]	; (8008bec <TIM_OC5_SetConfig+0xc8>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d007      	beq.n	8008ba6 <TIM_OC5_SetConfig+0x82>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a15      	ldr	r2, [pc, #84]	; (8008bf0 <TIM_OC5_SetConfig+0xcc>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d003      	beq.n	8008ba6 <TIM_OC5_SetConfig+0x82>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a14      	ldr	r2, [pc, #80]	; (8008bf4 <TIM_OC5_SetConfig+0xd0>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d109      	bne.n	8008bba <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	021b      	lsls	r3, r3, #8
 8008bb4:	697a      	ldr	r2, [r7, #20]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68fa      	ldr	r2, [r7, #12]
 8008bc4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	685a      	ldr	r2, [r3, #4]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	621a      	str	r2, [r3, #32]
}
 8008bd4:	bf00      	nop
 8008bd6:	371c      	adds	r7, #28
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	40012c00 	.word	0x40012c00
 8008be4:	40013400 	.word	0x40013400
 8008be8:	40014000 	.word	0x40014000
 8008bec:	40014400 	.word	0x40014400
 8008bf0:	40014800 	.word	0x40014800
 8008bf4:	40015000 	.word	0x40015000

08008bf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b087      	sub	sp, #28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	021b      	lsls	r3, r3, #8
 8008c32:	68fa      	ldr	r2, [r7, #12]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	051b      	lsls	r3, r3, #20
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a1a      	ldr	r2, [pc, #104]	; (8008cb8 <TIM_OC6_SetConfig+0xc0>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d013      	beq.n	8008c7c <TIM_OC6_SetConfig+0x84>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a19      	ldr	r2, [pc, #100]	; (8008cbc <TIM_OC6_SetConfig+0xc4>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d00f      	beq.n	8008c7c <TIM_OC6_SetConfig+0x84>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a18      	ldr	r2, [pc, #96]	; (8008cc0 <TIM_OC6_SetConfig+0xc8>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d00b      	beq.n	8008c7c <TIM_OC6_SetConfig+0x84>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a17      	ldr	r2, [pc, #92]	; (8008cc4 <TIM_OC6_SetConfig+0xcc>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d007      	beq.n	8008c7c <TIM_OC6_SetConfig+0x84>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a16      	ldr	r2, [pc, #88]	; (8008cc8 <TIM_OC6_SetConfig+0xd0>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d003      	beq.n	8008c7c <TIM_OC6_SetConfig+0x84>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a15      	ldr	r2, [pc, #84]	; (8008ccc <TIM_OC6_SetConfig+0xd4>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d109      	bne.n	8008c90 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	029b      	lsls	r3, r3, #10
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	621a      	str	r2, [r3, #32]
}
 8008caa:	bf00      	nop
 8008cac:	371c      	adds	r7, #28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	40012c00 	.word	0x40012c00
 8008cbc:	40013400 	.word	0x40013400
 8008cc0:	40014000 	.word	0x40014000
 8008cc4:	40014400 	.word	0x40014400
 8008cc8:	40014800 	.word	0x40014800
 8008ccc:	40015000 	.word	0x40015000

08008cd0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	f023 0201 	bic.w	r2, r3, #1
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	4a28      	ldr	r2, [pc, #160]	; (8008d9c <TIM_TI1_SetConfig+0xcc>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d01b      	beq.n	8008d36 <TIM_TI1_SetConfig+0x66>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d04:	d017      	beq.n	8008d36 <TIM_TI1_SetConfig+0x66>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	4a25      	ldr	r2, [pc, #148]	; (8008da0 <TIM_TI1_SetConfig+0xd0>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d013      	beq.n	8008d36 <TIM_TI1_SetConfig+0x66>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	4a24      	ldr	r2, [pc, #144]	; (8008da4 <TIM_TI1_SetConfig+0xd4>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d00f      	beq.n	8008d36 <TIM_TI1_SetConfig+0x66>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	4a23      	ldr	r2, [pc, #140]	; (8008da8 <TIM_TI1_SetConfig+0xd8>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d00b      	beq.n	8008d36 <TIM_TI1_SetConfig+0x66>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	4a22      	ldr	r2, [pc, #136]	; (8008dac <TIM_TI1_SetConfig+0xdc>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d007      	beq.n	8008d36 <TIM_TI1_SetConfig+0x66>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	4a21      	ldr	r2, [pc, #132]	; (8008db0 <TIM_TI1_SetConfig+0xe0>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d003      	beq.n	8008d36 <TIM_TI1_SetConfig+0x66>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	4a20      	ldr	r2, [pc, #128]	; (8008db4 <TIM_TI1_SetConfig+0xe4>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d101      	bne.n	8008d3a <TIM_TI1_SetConfig+0x6a>
 8008d36:	2301      	movs	r3, #1
 8008d38:	e000      	b.n	8008d3c <TIM_TI1_SetConfig+0x6c>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d008      	beq.n	8008d52 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f023 0303 	bic.w	r3, r3, #3
 8008d46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	617b      	str	r3, [r7, #20]
 8008d50:	e003      	b.n	8008d5a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f043 0301 	orr.w	r3, r3, #1
 8008d58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	011b      	lsls	r3, r3, #4
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f023 030a 	bic.w	r3, r3, #10
 8008d74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	f003 030a 	and.w	r3, r3, #10
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	621a      	str	r2, [r3, #32]
}
 8008d8e:	bf00      	nop
 8008d90:	371c      	adds	r7, #28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	40012c00 	.word	0x40012c00
 8008da0:	40000400 	.word	0x40000400
 8008da4:	40000800 	.word	0x40000800
 8008da8:	40000c00 	.word	0x40000c00
 8008dac:	40013400 	.word	0x40013400
 8008db0:	40014000 	.word	0x40014000
 8008db4:	40015000 	.word	0x40015000

08008db8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b087      	sub	sp, #28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
 8008dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6a1b      	ldr	r3, [r3, #32]
 8008dca:	f023 0210 	bic.w	r2, r3, #16
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6a1b      	ldr	r3, [r3, #32]
 8008ddc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008de4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	021b      	lsls	r3, r3, #8
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008df6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	031b      	lsls	r3, r3, #12
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	697a      	ldr	r2, [r7, #20]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e0a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	011b      	lsls	r3, r3, #4
 8008e10:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	697a      	ldr	r2, [r7, #20]
 8008e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	693a      	ldr	r2, [r7, #16]
 8008e24:	621a      	str	r2, [r3, #32]
}
 8008e26:	bf00      	nop
 8008e28:	371c      	adds	r7, #28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b087      	sub	sp, #28
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	607a      	str	r2, [r7, #4]
 8008e3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	69db      	ldr	r3, [r3, #28]
 8008e50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	6a1b      	ldr	r3, [r3, #32]
 8008e56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	f023 0303 	bic.w	r3, r3, #3
 8008e5e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e6e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	011b      	lsls	r3, r3, #4
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008e82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	021b      	lsls	r3, r3, #8
 8008e88:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008e8c:	693a      	ldr	r2, [r7, #16]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	697a      	ldr	r2, [r7, #20]
 8008e96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	621a      	str	r2, [r3, #32]
}
 8008e9e:	bf00      	nop
 8008ea0:	371c      	adds	r7, #28
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr

08008eaa <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008eaa:	b480      	push	{r7}
 8008eac:	b087      	sub	sp, #28
 8008eae:	af00      	add	r7, sp, #0
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	607a      	str	r2, [r7, #4]
 8008eb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6a1b      	ldr	r3, [r3, #32]
 8008ebc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	69db      	ldr	r3, [r3, #28]
 8008ec8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ed6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	021b      	lsls	r3, r3, #8
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ee8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	031b      	lsls	r3, r3, #12
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008efc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	031b      	lsls	r3, r3, #12
 8008f02:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	621a      	str	r2, [r3, #32]
}
 8008f18:	bf00      	nop
 8008f1a:	371c      	adds	r7, #28
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	f003 031f 	and.w	r3, r3, #31
 8008f36:	2201      	movs	r2, #1
 8008f38:	fa02 f303 	lsl.w	r3, r2, r3
 8008f3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6a1a      	ldr	r2, [r3, #32]
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	43db      	mvns	r3, r3
 8008f46:	401a      	ands	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6a1a      	ldr	r2, [r3, #32]
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f003 031f 	and.w	r3, r3, #31
 8008f56:	6879      	ldr	r1, [r7, #4]
 8008f58:	fa01 f303 	lsl.w	r3, r1, r3
 8008f5c:	431a      	orrs	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	621a      	str	r2, [r3, #32]
}
 8008f62:	bf00      	nop
 8008f64:	371c      	adds	r7, #28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
	...

08008f70 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d109      	bne.n	8008f94 <HAL_TIMEx_PWMN_Start+0x24>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	bf14      	ite	ne
 8008f8c:	2301      	movne	r3, #1
 8008f8e:	2300      	moveq	r3, #0
 8008f90:	b2db      	uxtb	r3, r3
 8008f92:	e022      	b.n	8008fda <HAL_TIMEx_PWMN_Start+0x6a>
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	2b04      	cmp	r3, #4
 8008f98:	d109      	bne.n	8008fae <HAL_TIMEx_PWMN_Start+0x3e>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	bf14      	ite	ne
 8008fa6:	2301      	movne	r3, #1
 8008fa8:	2300      	moveq	r3, #0
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	e015      	b.n	8008fda <HAL_TIMEx_PWMN_Start+0x6a>
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	2b08      	cmp	r3, #8
 8008fb2:	d109      	bne.n	8008fc8 <HAL_TIMEx_PWMN_Start+0x58>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	bf14      	ite	ne
 8008fc0:	2301      	movne	r3, #1
 8008fc2:	2300      	moveq	r3, #0
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	e008      	b.n	8008fda <HAL_TIMEx_PWMN_Start+0x6a>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	bf14      	ite	ne
 8008fd4:	2301      	movne	r3, #1
 8008fd6:	2300      	moveq	r3, #0
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d001      	beq.n	8008fe2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e073      	b.n	80090ca <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d104      	bne.n	8008ff2 <HAL_TIMEx_PWMN_Start+0x82>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2202      	movs	r2, #2
 8008fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ff0:	e013      	b.n	800901a <HAL_TIMEx_PWMN_Start+0xaa>
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	2b04      	cmp	r3, #4
 8008ff6:	d104      	bne.n	8009002 <HAL_TIMEx_PWMN_Start+0x92>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2202      	movs	r2, #2
 8008ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009000:	e00b      	b.n	800901a <HAL_TIMEx_PWMN_Start+0xaa>
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b08      	cmp	r3, #8
 8009006:	d104      	bne.n	8009012 <HAL_TIMEx_PWMN_Start+0xa2>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2202      	movs	r2, #2
 800900c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009010:	e003      	b.n	800901a <HAL_TIMEx_PWMN_Start+0xaa>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2202      	movs	r2, #2
 8009016:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2204      	movs	r2, #4
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	4618      	mov	r0, r3
 8009024:	f000 f9ae 	bl	8009384 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009036:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a25      	ldr	r2, [pc, #148]	; (80090d4 <HAL_TIMEx_PWMN_Start+0x164>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d022      	beq.n	8009088 <HAL_TIMEx_PWMN_Start+0x118>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800904a:	d01d      	beq.n	8009088 <HAL_TIMEx_PWMN_Start+0x118>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a21      	ldr	r2, [pc, #132]	; (80090d8 <HAL_TIMEx_PWMN_Start+0x168>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d018      	beq.n	8009088 <HAL_TIMEx_PWMN_Start+0x118>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a20      	ldr	r2, [pc, #128]	; (80090dc <HAL_TIMEx_PWMN_Start+0x16c>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d013      	beq.n	8009088 <HAL_TIMEx_PWMN_Start+0x118>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a1e      	ldr	r2, [pc, #120]	; (80090e0 <HAL_TIMEx_PWMN_Start+0x170>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d00e      	beq.n	8009088 <HAL_TIMEx_PWMN_Start+0x118>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a1d      	ldr	r2, [pc, #116]	; (80090e4 <HAL_TIMEx_PWMN_Start+0x174>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d009      	beq.n	8009088 <HAL_TIMEx_PWMN_Start+0x118>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a1b      	ldr	r2, [pc, #108]	; (80090e8 <HAL_TIMEx_PWMN_Start+0x178>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d004      	beq.n	8009088 <HAL_TIMEx_PWMN_Start+0x118>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a1a      	ldr	r2, [pc, #104]	; (80090ec <HAL_TIMEx_PWMN_Start+0x17c>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d115      	bne.n	80090b4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	689a      	ldr	r2, [r3, #8]
 800908e:	4b18      	ldr	r3, [pc, #96]	; (80090f0 <HAL_TIMEx_PWMN_Start+0x180>)
 8009090:	4013      	ands	r3, r2
 8009092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2b06      	cmp	r3, #6
 8009098:	d015      	beq.n	80090c6 <HAL_TIMEx_PWMN_Start+0x156>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090a0:	d011      	beq.n	80090c6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f042 0201 	orr.w	r2, r2, #1
 80090b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090b2:	e008      	b.n	80090c6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0201 	orr.w	r2, r2, #1
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	e000      	b.n	80090c8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	40012c00 	.word	0x40012c00
 80090d8:	40000400 	.word	0x40000400
 80090dc:	40000800 	.word	0x40000800
 80090e0:	40000c00 	.word	0x40000c00
 80090e4:	40013400 	.word	0x40013400
 80090e8:	40014000 	.word	0x40014000
 80090ec:	40015000 	.word	0x40015000
 80090f0:	00010007 	.word	0x00010007

080090f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009104:	2b01      	cmp	r3, #1
 8009106:	d101      	bne.n	800910c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009108:	2302      	movs	r3, #2
 800910a:	e074      	b.n	80091f6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2202      	movs	r2, #2
 8009118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a34      	ldr	r2, [pc, #208]	; (8009204 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d009      	beq.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a33      	ldr	r2, [pc, #204]	; (8009208 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d004      	beq.n	800914a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a31      	ldr	r2, [pc, #196]	; (800920c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d108      	bne.n	800915c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009150:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	4313      	orrs	r3, r2
 800915a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009166:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	4313      	orrs	r3, r2
 8009170:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a21      	ldr	r2, [pc, #132]	; (8009204 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d022      	beq.n	80091ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800918c:	d01d      	beq.n	80091ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a1f      	ldr	r2, [pc, #124]	; (8009210 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d018      	beq.n	80091ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a1d      	ldr	r2, [pc, #116]	; (8009214 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d013      	beq.n	80091ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a1c      	ldr	r2, [pc, #112]	; (8009218 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d00e      	beq.n	80091ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a15      	ldr	r2, [pc, #84]	; (8009208 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d009      	beq.n	80091ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a18      	ldr	r2, [pc, #96]	; (800921c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d004      	beq.n	80091ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a11      	ldr	r2, [pc, #68]	; (800920c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d10c      	bne.n	80091e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	4313      	orrs	r3, r2
 80091da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	40012c00 	.word	0x40012c00
 8009208:	40013400 	.word	0x40013400
 800920c:	40015000 	.word	0x40015000
 8009210:	40000400 	.word	0x40000400
 8009214:	40000800 	.word	0x40000800
 8009218:	40000c00 	.word	0x40000c00
 800921c:	40014000 	.word	0x40014000

08009220 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009234:	2b01      	cmp	r3, #1
 8009236:	d101      	bne.n	800923c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009238:	2302      	movs	r3, #2
 800923a:	e096      	b.n	800936a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2201      	movs	r2, #1
 8009240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	4313      	orrs	r3, r2
 8009250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	4313      	orrs	r3, r2
 800925e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	4313      	orrs	r3, r2
 800926c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4313      	orrs	r3, r2
 800927a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	4313      	orrs	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a2:	4313      	orrs	r3, r2
 80092a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	041b      	lsls	r3, r3, #16
 80092b2:	4313      	orrs	r3, r2
 80092b4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a2f      	ldr	r2, [pc, #188]	; (8009378 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d009      	beq.n	80092d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a2d      	ldr	r2, [pc, #180]	; (800937c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d004      	beq.n	80092d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a2c      	ldr	r2, [pc, #176]	; (8009380 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d106      	bne.n	80092e2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	4313      	orrs	r3, r2
 80092e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a24      	ldr	r2, [pc, #144]	; (8009378 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d009      	beq.n	8009300 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a22      	ldr	r2, [pc, #136]	; (800937c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d004      	beq.n	8009300 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a21      	ldr	r2, [pc, #132]	; (8009380 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d12b      	bne.n	8009358 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930a:	051b      	lsls	r3, r3, #20
 800930c:	4313      	orrs	r3, r2
 800930e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	4313      	orrs	r3, r2
 800931c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009328:	4313      	orrs	r3, r2
 800932a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a11      	ldr	r2, [pc, #68]	; (8009378 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d009      	beq.n	800934a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a10      	ldr	r2, [pc, #64]	; (800937c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d004      	beq.n	800934a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a0e      	ldr	r2, [pc, #56]	; (8009380 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d106      	bne.n	8009358 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009354:	4313      	orrs	r3, r2
 8009356:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3714      	adds	r7, #20
 800936e:	46bd      	mov	sp, r7
 8009370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	40012c00 	.word	0x40012c00
 800937c:	40013400 	.word	0x40013400
 8009380:	40015000 	.word	0x40015000

08009384 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009384:	b480      	push	{r7}
 8009386:	b087      	sub	sp, #28
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	f003 031f 	and.w	r3, r3, #31
 8009396:	2204      	movs	r2, #4
 8009398:	fa02 f303 	lsl.w	r3, r2, r3
 800939c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6a1a      	ldr	r2, [r3, #32]
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	43db      	mvns	r3, r3
 80093a6:	401a      	ands	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6a1a      	ldr	r2, [r3, #32]
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	f003 031f 	and.w	r3, r3, #31
 80093b6:	6879      	ldr	r1, [r7, #4]
 80093b8:	fa01 f303 	lsl.w	r3, r1, r3
 80093bc:	431a      	orrs	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	621a      	str	r2, [r3, #32]
}
 80093c2:	bf00      	nop
 80093c4:	371c      	adds	r7, #28
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b082      	sub	sp, #8
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e042      	b.n	8009466 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d106      	bne.n	80093f8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7f9 fa5c 	bl	80028b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2224      	movs	r2, #36	; 0x24
 80093fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f022 0201 	bic.w	r2, r2, #1
 800940e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 f82d 	bl	8009470 <UART_SetConfig>
 8009416:	4603      	mov	r3, r0
 8009418:	2b01      	cmp	r3, #1
 800941a:	d101      	bne.n	8009420 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e022      	b.n	8009466 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 fb1d 	bl	8009a68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800943c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800944c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f042 0201 	orr.w	r2, r2, #1
 800945c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fba4 	bl	8009bac <UART_CheckIdleState>
 8009464:	4603      	mov	r3, r0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3708      	adds	r7, #8
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
	...

08009470 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009470:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009474:	b08c      	sub	sp, #48	; 0x30
 8009476:	af00      	add	r7, sp, #0
 8009478:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	689a      	ldr	r2, [r3, #8]
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	431a      	orrs	r2, r3
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	431a      	orrs	r2, r3
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	4313      	orrs	r3, r2
 8009496:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	4baa      	ldr	r3, [pc, #680]	; (8009748 <UART_SetConfig+0x2d8>)
 80094a0:	4013      	ands	r3, r2
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	6812      	ldr	r2, [r2, #0]
 80094a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094a8:	430b      	orrs	r3, r1
 80094aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	68da      	ldr	r2, [r3, #12]
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	430a      	orrs	r2, r1
 80094c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a9f      	ldr	r2, [pc, #636]	; (800974c <UART_SetConfig+0x2dc>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d004      	beq.n	80094dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094d8:	4313      	orrs	r3, r2
 80094da:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80094e6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	6812      	ldr	r2, [r2, #0]
 80094ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094f0:	430b      	orrs	r3, r1
 80094f2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fa:	f023 010f 	bic.w	r1, r3, #15
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	430a      	orrs	r2, r1
 8009508:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a90      	ldr	r2, [pc, #576]	; (8009750 <UART_SetConfig+0x2e0>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d125      	bne.n	8009560 <UART_SetConfig+0xf0>
 8009514:	4b8f      	ldr	r3, [pc, #572]	; (8009754 <UART_SetConfig+0x2e4>)
 8009516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800951a:	f003 0303 	and.w	r3, r3, #3
 800951e:	2b03      	cmp	r3, #3
 8009520:	d81a      	bhi.n	8009558 <UART_SetConfig+0xe8>
 8009522:	a201      	add	r2, pc, #4	; (adr r2, 8009528 <UART_SetConfig+0xb8>)
 8009524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009528:	08009539 	.word	0x08009539
 800952c:	08009549 	.word	0x08009549
 8009530:	08009541 	.word	0x08009541
 8009534:	08009551 	.word	0x08009551
 8009538:	2301      	movs	r3, #1
 800953a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800953e:	e116      	b.n	800976e <UART_SetConfig+0x2fe>
 8009540:	2302      	movs	r3, #2
 8009542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009546:	e112      	b.n	800976e <UART_SetConfig+0x2fe>
 8009548:	2304      	movs	r3, #4
 800954a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800954e:	e10e      	b.n	800976e <UART_SetConfig+0x2fe>
 8009550:	2308      	movs	r3, #8
 8009552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009556:	e10a      	b.n	800976e <UART_SetConfig+0x2fe>
 8009558:	2310      	movs	r3, #16
 800955a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800955e:	e106      	b.n	800976e <UART_SetConfig+0x2fe>
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a7c      	ldr	r2, [pc, #496]	; (8009758 <UART_SetConfig+0x2e8>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d138      	bne.n	80095dc <UART_SetConfig+0x16c>
 800956a:	4b7a      	ldr	r3, [pc, #488]	; (8009754 <UART_SetConfig+0x2e4>)
 800956c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009570:	f003 030c 	and.w	r3, r3, #12
 8009574:	2b0c      	cmp	r3, #12
 8009576:	d82d      	bhi.n	80095d4 <UART_SetConfig+0x164>
 8009578:	a201      	add	r2, pc, #4	; (adr r2, 8009580 <UART_SetConfig+0x110>)
 800957a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957e:	bf00      	nop
 8009580:	080095b5 	.word	0x080095b5
 8009584:	080095d5 	.word	0x080095d5
 8009588:	080095d5 	.word	0x080095d5
 800958c:	080095d5 	.word	0x080095d5
 8009590:	080095c5 	.word	0x080095c5
 8009594:	080095d5 	.word	0x080095d5
 8009598:	080095d5 	.word	0x080095d5
 800959c:	080095d5 	.word	0x080095d5
 80095a0:	080095bd 	.word	0x080095bd
 80095a4:	080095d5 	.word	0x080095d5
 80095a8:	080095d5 	.word	0x080095d5
 80095ac:	080095d5 	.word	0x080095d5
 80095b0:	080095cd 	.word	0x080095cd
 80095b4:	2300      	movs	r3, #0
 80095b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095ba:	e0d8      	b.n	800976e <UART_SetConfig+0x2fe>
 80095bc:	2302      	movs	r3, #2
 80095be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095c2:	e0d4      	b.n	800976e <UART_SetConfig+0x2fe>
 80095c4:	2304      	movs	r3, #4
 80095c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095ca:	e0d0      	b.n	800976e <UART_SetConfig+0x2fe>
 80095cc:	2308      	movs	r3, #8
 80095ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095d2:	e0cc      	b.n	800976e <UART_SetConfig+0x2fe>
 80095d4:	2310      	movs	r3, #16
 80095d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095da:	e0c8      	b.n	800976e <UART_SetConfig+0x2fe>
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a5e      	ldr	r2, [pc, #376]	; (800975c <UART_SetConfig+0x2ec>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d125      	bne.n	8009632 <UART_SetConfig+0x1c2>
 80095e6:	4b5b      	ldr	r3, [pc, #364]	; (8009754 <UART_SetConfig+0x2e4>)
 80095e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80095f0:	2b30      	cmp	r3, #48	; 0x30
 80095f2:	d016      	beq.n	8009622 <UART_SetConfig+0x1b2>
 80095f4:	2b30      	cmp	r3, #48	; 0x30
 80095f6:	d818      	bhi.n	800962a <UART_SetConfig+0x1ba>
 80095f8:	2b20      	cmp	r3, #32
 80095fa:	d00a      	beq.n	8009612 <UART_SetConfig+0x1a2>
 80095fc:	2b20      	cmp	r3, #32
 80095fe:	d814      	bhi.n	800962a <UART_SetConfig+0x1ba>
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <UART_SetConfig+0x19a>
 8009604:	2b10      	cmp	r3, #16
 8009606:	d008      	beq.n	800961a <UART_SetConfig+0x1aa>
 8009608:	e00f      	b.n	800962a <UART_SetConfig+0x1ba>
 800960a:	2300      	movs	r3, #0
 800960c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009610:	e0ad      	b.n	800976e <UART_SetConfig+0x2fe>
 8009612:	2302      	movs	r3, #2
 8009614:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009618:	e0a9      	b.n	800976e <UART_SetConfig+0x2fe>
 800961a:	2304      	movs	r3, #4
 800961c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009620:	e0a5      	b.n	800976e <UART_SetConfig+0x2fe>
 8009622:	2308      	movs	r3, #8
 8009624:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009628:	e0a1      	b.n	800976e <UART_SetConfig+0x2fe>
 800962a:	2310      	movs	r3, #16
 800962c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009630:	e09d      	b.n	800976e <UART_SetConfig+0x2fe>
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a4a      	ldr	r2, [pc, #296]	; (8009760 <UART_SetConfig+0x2f0>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d125      	bne.n	8009688 <UART_SetConfig+0x218>
 800963c:	4b45      	ldr	r3, [pc, #276]	; (8009754 <UART_SetConfig+0x2e4>)
 800963e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009642:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009646:	2bc0      	cmp	r3, #192	; 0xc0
 8009648:	d016      	beq.n	8009678 <UART_SetConfig+0x208>
 800964a:	2bc0      	cmp	r3, #192	; 0xc0
 800964c:	d818      	bhi.n	8009680 <UART_SetConfig+0x210>
 800964e:	2b80      	cmp	r3, #128	; 0x80
 8009650:	d00a      	beq.n	8009668 <UART_SetConfig+0x1f8>
 8009652:	2b80      	cmp	r3, #128	; 0x80
 8009654:	d814      	bhi.n	8009680 <UART_SetConfig+0x210>
 8009656:	2b00      	cmp	r3, #0
 8009658:	d002      	beq.n	8009660 <UART_SetConfig+0x1f0>
 800965a:	2b40      	cmp	r3, #64	; 0x40
 800965c:	d008      	beq.n	8009670 <UART_SetConfig+0x200>
 800965e:	e00f      	b.n	8009680 <UART_SetConfig+0x210>
 8009660:	2300      	movs	r3, #0
 8009662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009666:	e082      	b.n	800976e <UART_SetConfig+0x2fe>
 8009668:	2302      	movs	r3, #2
 800966a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800966e:	e07e      	b.n	800976e <UART_SetConfig+0x2fe>
 8009670:	2304      	movs	r3, #4
 8009672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009676:	e07a      	b.n	800976e <UART_SetConfig+0x2fe>
 8009678:	2308      	movs	r3, #8
 800967a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800967e:	e076      	b.n	800976e <UART_SetConfig+0x2fe>
 8009680:	2310      	movs	r3, #16
 8009682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009686:	e072      	b.n	800976e <UART_SetConfig+0x2fe>
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a35      	ldr	r2, [pc, #212]	; (8009764 <UART_SetConfig+0x2f4>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d12a      	bne.n	80096e8 <UART_SetConfig+0x278>
 8009692:	4b30      	ldr	r3, [pc, #192]	; (8009754 <UART_SetConfig+0x2e4>)
 8009694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800969c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096a0:	d01a      	beq.n	80096d8 <UART_SetConfig+0x268>
 80096a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096a6:	d81b      	bhi.n	80096e0 <UART_SetConfig+0x270>
 80096a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096ac:	d00c      	beq.n	80096c8 <UART_SetConfig+0x258>
 80096ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096b2:	d815      	bhi.n	80096e0 <UART_SetConfig+0x270>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d003      	beq.n	80096c0 <UART_SetConfig+0x250>
 80096b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096bc:	d008      	beq.n	80096d0 <UART_SetConfig+0x260>
 80096be:	e00f      	b.n	80096e0 <UART_SetConfig+0x270>
 80096c0:	2300      	movs	r3, #0
 80096c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096c6:	e052      	b.n	800976e <UART_SetConfig+0x2fe>
 80096c8:	2302      	movs	r3, #2
 80096ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096ce:	e04e      	b.n	800976e <UART_SetConfig+0x2fe>
 80096d0:	2304      	movs	r3, #4
 80096d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096d6:	e04a      	b.n	800976e <UART_SetConfig+0x2fe>
 80096d8:	2308      	movs	r3, #8
 80096da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096de:	e046      	b.n	800976e <UART_SetConfig+0x2fe>
 80096e0:	2310      	movs	r3, #16
 80096e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096e6:	e042      	b.n	800976e <UART_SetConfig+0x2fe>
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a17      	ldr	r2, [pc, #92]	; (800974c <UART_SetConfig+0x2dc>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d13a      	bne.n	8009768 <UART_SetConfig+0x2f8>
 80096f2:	4b18      	ldr	r3, [pc, #96]	; (8009754 <UART_SetConfig+0x2e4>)
 80096f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80096fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009700:	d01a      	beq.n	8009738 <UART_SetConfig+0x2c8>
 8009702:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009706:	d81b      	bhi.n	8009740 <UART_SetConfig+0x2d0>
 8009708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800970c:	d00c      	beq.n	8009728 <UART_SetConfig+0x2b8>
 800970e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009712:	d815      	bhi.n	8009740 <UART_SetConfig+0x2d0>
 8009714:	2b00      	cmp	r3, #0
 8009716:	d003      	beq.n	8009720 <UART_SetConfig+0x2b0>
 8009718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800971c:	d008      	beq.n	8009730 <UART_SetConfig+0x2c0>
 800971e:	e00f      	b.n	8009740 <UART_SetConfig+0x2d0>
 8009720:	2300      	movs	r3, #0
 8009722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009726:	e022      	b.n	800976e <UART_SetConfig+0x2fe>
 8009728:	2302      	movs	r3, #2
 800972a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800972e:	e01e      	b.n	800976e <UART_SetConfig+0x2fe>
 8009730:	2304      	movs	r3, #4
 8009732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009736:	e01a      	b.n	800976e <UART_SetConfig+0x2fe>
 8009738:	2308      	movs	r3, #8
 800973a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800973e:	e016      	b.n	800976e <UART_SetConfig+0x2fe>
 8009740:	2310      	movs	r3, #16
 8009742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009746:	e012      	b.n	800976e <UART_SetConfig+0x2fe>
 8009748:	cfff69f3 	.word	0xcfff69f3
 800974c:	40008000 	.word	0x40008000
 8009750:	40013800 	.word	0x40013800
 8009754:	40021000 	.word	0x40021000
 8009758:	40004400 	.word	0x40004400
 800975c:	40004800 	.word	0x40004800
 8009760:	40004c00 	.word	0x40004c00
 8009764:	40005000 	.word	0x40005000
 8009768:	2310      	movs	r3, #16
 800976a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4aae      	ldr	r2, [pc, #696]	; (8009a2c <UART_SetConfig+0x5bc>)
 8009774:	4293      	cmp	r3, r2
 8009776:	f040 8097 	bne.w	80098a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800977a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800977e:	2b08      	cmp	r3, #8
 8009780:	d823      	bhi.n	80097ca <UART_SetConfig+0x35a>
 8009782:	a201      	add	r2, pc, #4	; (adr r2, 8009788 <UART_SetConfig+0x318>)
 8009784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009788:	080097ad 	.word	0x080097ad
 800978c:	080097cb 	.word	0x080097cb
 8009790:	080097b5 	.word	0x080097b5
 8009794:	080097cb 	.word	0x080097cb
 8009798:	080097bb 	.word	0x080097bb
 800979c:	080097cb 	.word	0x080097cb
 80097a0:	080097cb 	.word	0x080097cb
 80097a4:	080097cb 	.word	0x080097cb
 80097a8:	080097c3 	.word	0x080097c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097ac:	f7fd fdd4 	bl	8007358 <HAL_RCC_GetPCLK1Freq>
 80097b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80097b2:	e010      	b.n	80097d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097b4:	4b9e      	ldr	r3, [pc, #632]	; (8009a30 <UART_SetConfig+0x5c0>)
 80097b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80097b8:	e00d      	b.n	80097d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097ba:	f7fd fd5f 	bl	800727c <HAL_RCC_GetSysClockFreq>
 80097be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80097c0:	e009      	b.n	80097d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80097c8:	e005      	b.n	80097d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80097ca:	2300      	movs	r3, #0
 80097cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80097d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80097d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f000 8130 	beq.w	8009a3e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e2:	4a94      	ldr	r2, [pc, #592]	; (8009a34 <UART_SetConfig+0x5c4>)
 80097e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097e8:	461a      	mov	r2, r3
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80097f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	685a      	ldr	r2, [r3, #4]
 80097f6:	4613      	mov	r3, r2
 80097f8:	005b      	lsls	r3, r3, #1
 80097fa:	4413      	add	r3, r2
 80097fc:	69ba      	ldr	r2, [r7, #24]
 80097fe:	429a      	cmp	r2, r3
 8009800:	d305      	bcc.n	800980e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009808:	69ba      	ldr	r2, [r7, #24]
 800980a:	429a      	cmp	r2, r3
 800980c:	d903      	bls.n	8009816 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800980e:	2301      	movs	r3, #1
 8009810:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009814:	e113      	b.n	8009a3e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009818:	2200      	movs	r2, #0
 800981a:	60bb      	str	r3, [r7, #8]
 800981c:	60fa      	str	r2, [r7, #12]
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009822:	4a84      	ldr	r2, [pc, #528]	; (8009a34 <UART_SetConfig+0x5c4>)
 8009824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009828:	b29b      	uxth	r3, r3
 800982a:	2200      	movs	r2, #0
 800982c:	603b      	str	r3, [r7, #0]
 800982e:	607a      	str	r2, [r7, #4]
 8009830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009834:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009838:	f7f6 fcee 	bl	8000218 <__aeabi_uldivmod>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	4610      	mov	r0, r2
 8009842:	4619      	mov	r1, r3
 8009844:	f04f 0200 	mov.w	r2, #0
 8009848:	f04f 0300 	mov.w	r3, #0
 800984c:	020b      	lsls	r3, r1, #8
 800984e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009852:	0202      	lsls	r2, r0, #8
 8009854:	6979      	ldr	r1, [r7, #20]
 8009856:	6849      	ldr	r1, [r1, #4]
 8009858:	0849      	lsrs	r1, r1, #1
 800985a:	2000      	movs	r0, #0
 800985c:	460c      	mov	r4, r1
 800985e:	4605      	mov	r5, r0
 8009860:	eb12 0804 	adds.w	r8, r2, r4
 8009864:	eb43 0905 	adc.w	r9, r3, r5
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	469a      	mov	sl, r3
 8009870:	4693      	mov	fp, r2
 8009872:	4652      	mov	r2, sl
 8009874:	465b      	mov	r3, fp
 8009876:	4640      	mov	r0, r8
 8009878:	4649      	mov	r1, r9
 800987a:	f7f6 fccd 	bl	8000218 <__aeabi_uldivmod>
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	4613      	mov	r3, r2
 8009884:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800988c:	d308      	bcc.n	80098a0 <UART_SetConfig+0x430>
 800988e:	6a3b      	ldr	r3, [r7, #32]
 8009890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009894:	d204      	bcs.n	80098a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	6a3a      	ldr	r2, [r7, #32]
 800989c:	60da      	str	r2, [r3, #12]
 800989e:	e0ce      	b.n	8009a3e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80098a6:	e0ca      	b.n	8009a3e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	69db      	ldr	r3, [r3, #28]
 80098ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098b0:	d166      	bne.n	8009980 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80098b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80098b6:	2b08      	cmp	r3, #8
 80098b8:	d827      	bhi.n	800990a <UART_SetConfig+0x49a>
 80098ba:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <UART_SetConfig+0x450>)
 80098bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c0:	080098e5 	.word	0x080098e5
 80098c4:	080098ed 	.word	0x080098ed
 80098c8:	080098f5 	.word	0x080098f5
 80098cc:	0800990b 	.word	0x0800990b
 80098d0:	080098fb 	.word	0x080098fb
 80098d4:	0800990b 	.word	0x0800990b
 80098d8:	0800990b 	.word	0x0800990b
 80098dc:	0800990b 	.word	0x0800990b
 80098e0:	08009903 	.word	0x08009903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098e4:	f7fd fd38 	bl	8007358 <HAL_RCC_GetPCLK1Freq>
 80098e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80098ea:	e014      	b.n	8009916 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098ec:	f7fd fd4a 	bl	8007384 <HAL_RCC_GetPCLK2Freq>
 80098f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80098f2:	e010      	b.n	8009916 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098f4:	4b4e      	ldr	r3, [pc, #312]	; (8009a30 <UART_SetConfig+0x5c0>)
 80098f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80098f8:	e00d      	b.n	8009916 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098fa:	f7fd fcbf 	bl	800727c <HAL_RCC_GetSysClockFreq>
 80098fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009900:	e009      	b.n	8009916 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009906:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009908:	e005      	b.n	8009916 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800990a:	2300      	movs	r3, #0
 800990c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009914:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 8090 	beq.w	8009a3e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009922:	4a44      	ldr	r2, [pc, #272]	; (8009a34 <UART_SetConfig+0x5c4>)
 8009924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009928:	461a      	mov	r2, r3
 800992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009930:	005a      	lsls	r2, r3, #1
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	085b      	lsrs	r3, r3, #1
 8009938:	441a      	add	r2, r3
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009942:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	2b0f      	cmp	r3, #15
 8009948:	d916      	bls.n	8009978 <UART_SetConfig+0x508>
 800994a:	6a3b      	ldr	r3, [r7, #32]
 800994c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009950:	d212      	bcs.n	8009978 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009952:	6a3b      	ldr	r3, [r7, #32]
 8009954:	b29b      	uxth	r3, r3
 8009956:	f023 030f 	bic.w	r3, r3, #15
 800995a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	085b      	lsrs	r3, r3, #1
 8009960:	b29b      	uxth	r3, r3
 8009962:	f003 0307 	and.w	r3, r3, #7
 8009966:	b29a      	uxth	r2, r3
 8009968:	8bfb      	ldrh	r3, [r7, #30]
 800996a:	4313      	orrs	r3, r2
 800996c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	8bfa      	ldrh	r2, [r7, #30]
 8009974:	60da      	str	r2, [r3, #12]
 8009976:	e062      	b.n	8009a3e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800997e:	e05e      	b.n	8009a3e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009980:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009984:	2b08      	cmp	r3, #8
 8009986:	d828      	bhi.n	80099da <UART_SetConfig+0x56a>
 8009988:	a201      	add	r2, pc, #4	; (adr r2, 8009990 <UART_SetConfig+0x520>)
 800998a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998e:	bf00      	nop
 8009990:	080099b5 	.word	0x080099b5
 8009994:	080099bd 	.word	0x080099bd
 8009998:	080099c5 	.word	0x080099c5
 800999c:	080099db 	.word	0x080099db
 80099a0:	080099cb 	.word	0x080099cb
 80099a4:	080099db 	.word	0x080099db
 80099a8:	080099db 	.word	0x080099db
 80099ac:	080099db 	.word	0x080099db
 80099b0:	080099d3 	.word	0x080099d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099b4:	f7fd fcd0 	bl	8007358 <HAL_RCC_GetPCLK1Freq>
 80099b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099ba:	e014      	b.n	80099e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099bc:	f7fd fce2 	bl	8007384 <HAL_RCC_GetPCLK2Freq>
 80099c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099c2:	e010      	b.n	80099e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099c4:	4b1a      	ldr	r3, [pc, #104]	; (8009a30 <UART_SetConfig+0x5c0>)
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80099c8:	e00d      	b.n	80099e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099ca:	f7fd fc57 	bl	800727c <HAL_RCC_GetSysClockFreq>
 80099ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80099d0:	e009      	b.n	80099e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80099d8:	e005      	b.n	80099e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80099da:	2300      	movs	r3, #0
 80099dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80099e4:	bf00      	nop
    }

    if (pclk != 0U)
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d028      	beq.n	8009a3e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f0:	4a10      	ldr	r2, [pc, #64]	; (8009a34 <UART_SetConfig+0x5c4>)
 80099f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099f6:	461a      	mov	r2, r3
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	085b      	lsrs	r3, r3, #1
 8009a04:	441a      	add	r2, r3
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a10:	6a3b      	ldr	r3, [r7, #32]
 8009a12:	2b0f      	cmp	r3, #15
 8009a14:	d910      	bls.n	8009a38 <UART_SetConfig+0x5c8>
 8009a16:	6a3b      	ldr	r3, [r7, #32]
 8009a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a1c:	d20c      	bcs.n	8009a38 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a1e:	6a3b      	ldr	r3, [r7, #32]
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	60da      	str	r2, [r3, #12]
 8009a28:	e009      	b.n	8009a3e <UART_SetConfig+0x5ce>
 8009a2a:	bf00      	nop
 8009a2c:	40008000 	.word	0x40008000
 8009a30:	00f42400 	.word	0x00f42400
 8009a34:	0800b020 	.word	0x0800b020
      }
      else
      {
        ret = HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	2200      	movs	r2, #0
 8009a52:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	2200      	movs	r2, #0
 8009a58:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009a5a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3730      	adds	r7, #48	; 0x30
 8009a62:	46bd      	mov	sp, r7
 8009a64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00a      	beq.n	8009a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	430a      	orrs	r2, r1
 8009a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a96:	f003 0302 	and.w	r3, r3, #2
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00a      	beq.n	8009ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	430a      	orrs	r2, r1
 8009ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab8:	f003 0304 	and.w	r3, r3, #4
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00a      	beq.n	8009ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ada:	f003 0308 	and.w	r3, r3, #8
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00a      	beq.n	8009af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	430a      	orrs	r2, r1
 8009af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afc:	f003 0310 	and.w	r3, r3, #16
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00a      	beq.n	8009b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	430a      	orrs	r2, r1
 8009b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1e:	f003 0320 	and.w	r3, r3, #32
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00a      	beq.n	8009b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d01a      	beq.n	8009b7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	430a      	orrs	r2, r1
 8009b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b66:	d10a      	bne.n	8009b7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d00a      	beq.n	8009ba0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	430a      	orrs	r2, r1
 8009b9e:	605a      	str	r2, [r3, #4]
  }
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b086      	sub	sp, #24
 8009bb0:	af02      	add	r7, sp, #8
 8009bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009bbc:	f7f9 f8f0 	bl	8002da0 <HAL_GetTick>
 8009bc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f003 0308 	and.w	r3, r3, #8
 8009bcc:	2b08      	cmp	r3, #8
 8009bce:	d10e      	bne.n	8009bee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bd4:	9300      	str	r3, [sp, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f82f 	bl	8009c42 <UART_WaitOnFlagUntilTimeout>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d001      	beq.n	8009bee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e025      	b.n	8009c3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f003 0304 	and.w	r3, r3, #4
 8009bf8:	2b04      	cmp	r3, #4
 8009bfa:	d10e      	bne.n	8009c1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f819 	bl	8009c42 <UART_WaitOnFlagUntilTimeout>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d001      	beq.n	8009c1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e00f      	b.n	8009c3a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2220      	movs	r2, #32
 8009c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2220      	movs	r2, #32
 8009c26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b09c      	sub	sp, #112	; 0x70
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	60f8      	str	r0, [r7, #12]
 8009c4a:	60b9      	str	r1, [r7, #8]
 8009c4c:	603b      	str	r3, [r7, #0]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c52:	e0a9      	b.n	8009da8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5a:	f000 80a5 	beq.w	8009da8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c5e:	f7f9 f89f 	bl	8002da0 <HAL_GetTick>
 8009c62:	4602      	mov	r2, r0
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	1ad3      	subs	r3, r2, r3
 8009c68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d302      	bcc.n	8009c74 <UART_WaitOnFlagUntilTimeout+0x32>
 8009c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d140      	bne.n	8009cf6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c7c:	e853 3f00 	ldrex	r3, [r3]
 8009c80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c88:	667b      	str	r3, [r7, #100]	; 0x64
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c9a:	e841 2300 	strex	r3, r2, [r1]
 8009c9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d1e6      	bne.n	8009c74 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3308      	adds	r3, #8
 8009cac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb0:	e853 3f00 	ldrex	r3, [r3]
 8009cb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb8:	f023 0301 	bic.w	r3, r3, #1
 8009cbc:	663b      	str	r3, [r7, #96]	; 0x60
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3308      	adds	r3, #8
 8009cc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009cc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8009cc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ccc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009cce:	e841 2300 	strex	r3, r2, [r1]
 8009cd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1e5      	bne.n	8009ca6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2220      	movs	r2, #32
 8009cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2220      	movs	r2, #32
 8009ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2200      	movs	r2, #0
 8009cee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e069      	b.n	8009dca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0304 	and.w	r3, r3, #4
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d051      	beq.n	8009da8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d12:	d149      	bne.n	8009da8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d26:	e853 3f00 	ldrex	r3, [r3]
 8009d2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	461a      	mov	r2, r3
 8009d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d44:	e841 2300 	strex	r3, r2, [r1]
 8009d48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1e6      	bne.n	8009d1e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	3308      	adds	r3, #8
 8009d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	e853 3f00 	ldrex	r3, [r3]
 8009d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	f023 0301 	bic.w	r3, r3, #1
 8009d66:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	3308      	adds	r3, #8
 8009d6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d70:	623a      	str	r2, [r7, #32]
 8009d72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d74:	69f9      	ldr	r1, [r7, #28]
 8009d76:	6a3a      	ldr	r2, [r7, #32]
 8009d78:	e841 2300 	strex	r3, r2, [r1]
 8009d7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d1e5      	bne.n	8009d50 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2220      	movs	r2, #32
 8009d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2220      	movs	r2, #32
 8009d90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2220      	movs	r2, #32
 8009d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009da4:	2303      	movs	r3, #3
 8009da6:	e010      	b.n	8009dca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	69da      	ldr	r2, [r3, #28]
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	4013      	ands	r3, r2
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	429a      	cmp	r2, r3
 8009db6:	bf0c      	ite	eq
 8009db8:	2301      	moveq	r3, #1
 8009dba:	2300      	movne	r3, #0
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	79fb      	ldrb	r3, [r7, #7]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	f43f af46 	beq.w	8009c54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3770      	adds	r7, #112	; 0x70
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	b085      	sub	sp, #20
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d101      	bne.n	8009de8 <HAL_UARTEx_DisableFifoMode+0x16>
 8009de4:	2302      	movs	r3, #2
 8009de6:	e027      	b.n	8009e38 <HAL_UARTEx_DisableFifoMode+0x66>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2224      	movs	r2, #36	; 0x24
 8009df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f022 0201 	bic.w	r2, r2, #1
 8009e0e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009e16:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2220      	movs	r2, #32
 8009e2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3714      	adds	r7, #20
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d101      	bne.n	8009e5c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e58:	2302      	movs	r3, #2
 8009e5a:	e02d      	b.n	8009eb8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2224      	movs	r2, #36	; 0x24
 8009e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f022 0201 	bic.w	r2, r2, #1
 8009e82:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	689b      	ldr	r3, [r3, #8]
 8009e8a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	430a      	orrs	r2, r1
 8009e96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f84f 	bl	8009f3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2220      	movs	r2, #32
 8009eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d101      	bne.n	8009ed8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	e02d      	b.n	8009f34 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2224      	movs	r2, #36	; 0x24
 8009ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f022 0201 	bic.w	r2, r2, #1
 8009efe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	430a      	orrs	r2, r1
 8009f12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f811 	bl	8009f3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2220      	movs	r2, #32
 8009f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d108      	bne.n	8009f5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009f5c:	e031      	b.n	8009fc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009f5e:	2308      	movs	r3, #8
 8009f60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009f62:	2308      	movs	r3, #8
 8009f64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	0e5b      	lsrs	r3, r3, #25
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	f003 0307 	and.w	r3, r3, #7
 8009f74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	0f5b      	lsrs	r3, r3, #29
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	f003 0307 	and.w	r3, r3, #7
 8009f84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	7b3a      	ldrb	r2, [r7, #12]
 8009f8a:	4911      	ldr	r1, [pc, #68]	; (8009fd0 <UARTEx_SetNbDataToProcess+0x94>)
 8009f8c:	5c8a      	ldrb	r2, [r1, r2]
 8009f8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009f92:	7b3a      	ldrb	r2, [r7, #12]
 8009f94:	490f      	ldr	r1, [pc, #60]	; (8009fd4 <UARTEx_SetNbDataToProcess+0x98>)
 8009f96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009f98:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f9c:	b29a      	uxth	r2, r3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
 8009fa6:	7b7a      	ldrb	r2, [r7, #13]
 8009fa8:	4909      	ldr	r1, [pc, #36]	; (8009fd0 <UARTEx_SetNbDataToProcess+0x94>)
 8009faa:	5c8a      	ldrb	r2, [r1, r2]
 8009fac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009fb0:	7b7a      	ldrb	r2, [r7, #13]
 8009fb2:	4908      	ldr	r1, [pc, #32]	; (8009fd4 <UARTEx_SetNbDataToProcess+0x98>)
 8009fb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009fb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009fc2:	bf00      	nop
 8009fc4:	3714      	adds	r7, #20
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	0800b038 	.word	0x0800b038
 8009fd4:	0800b040 	.word	0x0800b040

08009fd8 <__errno>:
 8009fd8:	4b01      	ldr	r3, [pc, #4]	; (8009fe0 <__errno+0x8>)
 8009fda:	6818      	ldr	r0, [r3, #0]
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	2000000c 	.word	0x2000000c

08009fe4 <__libc_init_array>:
 8009fe4:	b570      	push	{r4, r5, r6, lr}
 8009fe6:	4d0d      	ldr	r5, [pc, #52]	; (800a01c <__libc_init_array+0x38>)
 8009fe8:	4c0d      	ldr	r4, [pc, #52]	; (800a020 <__libc_init_array+0x3c>)
 8009fea:	1b64      	subs	r4, r4, r5
 8009fec:	10a4      	asrs	r4, r4, #2
 8009fee:	2600      	movs	r6, #0
 8009ff0:	42a6      	cmp	r6, r4
 8009ff2:	d109      	bne.n	800a008 <__libc_init_array+0x24>
 8009ff4:	4d0b      	ldr	r5, [pc, #44]	; (800a024 <__libc_init_array+0x40>)
 8009ff6:	4c0c      	ldr	r4, [pc, #48]	; (800a028 <__libc_init_array+0x44>)
 8009ff8:	f000 fffa 	bl	800aff0 <_init>
 8009ffc:	1b64      	subs	r4, r4, r5
 8009ffe:	10a4      	asrs	r4, r4, #2
 800a000:	2600      	movs	r6, #0
 800a002:	42a6      	cmp	r6, r4
 800a004:	d105      	bne.n	800a012 <__libc_init_array+0x2e>
 800a006:	bd70      	pop	{r4, r5, r6, pc}
 800a008:	f855 3b04 	ldr.w	r3, [r5], #4
 800a00c:	4798      	blx	r3
 800a00e:	3601      	adds	r6, #1
 800a010:	e7ee      	b.n	8009ff0 <__libc_init_array+0xc>
 800a012:	f855 3b04 	ldr.w	r3, [r5], #4
 800a016:	4798      	blx	r3
 800a018:	3601      	adds	r6, #1
 800a01a:	e7f2      	b.n	800a002 <__libc_init_array+0x1e>
 800a01c:	0800b460 	.word	0x0800b460
 800a020:	0800b460 	.word	0x0800b460
 800a024:	0800b460 	.word	0x0800b460
 800a028:	0800b464 	.word	0x0800b464

0800a02c <memset>:
 800a02c:	4402      	add	r2, r0
 800a02e:	4603      	mov	r3, r0
 800a030:	4293      	cmp	r3, r2
 800a032:	d100      	bne.n	800a036 <memset+0xa>
 800a034:	4770      	bx	lr
 800a036:	f803 1b01 	strb.w	r1, [r3], #1
 800a03a:	e7f9      	b.n	800a030 <memset+0x4>

0800a03c <cosf>:
 800a03c:	ee10 3a10 	vmov	r3, s0
 800a040:	b507      	push	{r0, r1, r2, lr}
 800a042:	4a1e      	ldr	r2, [pc, #120]	; (800a0bc <cosf+0x80>)
 800a044:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a048:	4293      	cmp	r3, r2
 800a04a:	dc06      	bgt.n	800a05a <cosf+0x1e>
 800a04c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800a0c0 <cosf+0x84>
 800a050:	b003      	add	sp, #12
 800a052:	f85d eb04 	ldr.w	lr, [sp], #4
 800a056:	f000 bb1d 	b.w	800a694 <__kernel_cosf>
 800a05a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a05e:	db04      	blt.n	800a06a <cosf+0x2e>
 800a060:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a064:	b003      	add	sp, #12
 800a066:	f85d fb04 	ldr.w	pc, [sp], #4
 800a06a:	4668      	mov	r0, sp
 800a06c:	f000 f9d2 	bl	800a414 <__ieee754_rem_pio2f>
 800a070:	f000 0003 	and.w	r0, r0, #3
 800a074:	2801      	cmp	r0, #1
 800a076:	d009      	beq.n	800a08c <cosf+0x50>
 800a078:	2802      	cmp	r0, #2
 800a07a:	d010      	beq.n	800a09e <cosf+0x62>
 800a07c:	b9b0      	cbnz	r0, 800a0ac <cosf+0x70>
 800a07e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a082:	ed9d 0a00 	vldr	s0, [sp]
 800a086:	f000 fb05 	bl	800a694 <__kernel_cosf>
 800a08a:	e7eb      	b.n	800a064 <cosf+0x28>
 800a08c:	eddd 0a01 	vldr	s1, [sp, #4]
 800a090:	ed9d 0a00 	vldr	s0, [sp]
 800a094:	f000 fdd4 	bl	800ac40 <__kernel_sinf>
 800a098:	eeb1 0a40 	vneg.f32	s0, s0
 800a09c:	e7e2      	b.n	800a064 <cosf+0x28>
 800a09e:	eddd 0a01 	vldr	s1, [sp, #4]
 800a0a2:	ed9d 0a00 	vldr	s0, [sp]
 800a0a6:	f000 faf5 	bl	800a694 <__kernel_cosf>
 800a0aa:	e7f5      	b.n	800a098 <cosf+0x5c>
 800a0ac:	eddd 0a01 	vldr	s1, [sp, #4]
 800a0b0:	ed9d 0a00 	vldr	s0, [sp]
 800a0b4:	2001      	movs	r0, #1
 800a0b6:	f000 fdc3 	bl	800ac40 <__kernel_sinf>
 800a0ba:	e7d3      	b.n	800a064 <cosf+0x28>
 800a0bc:	3f490fd8 	.word	0x3f490fd8
 800a0c0:	00000000 	.word	0x00000000

0800a0c4 <sinf>:
 800a0c4:	ee10 3a10 	vmov	r3, s0
 800a0c8:	b507      	push	{r0, r1, r2, lr}
 800a0ca:	4a1f      	ldr	r2, [pc, #124]	; (800a148 <sinf+0x84>)
 800a0cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	dc07      	bgt.n	800a0e4 <sinf+0x20>
 800a0d4:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a14c <sinf+0x88>
 800a0d8:	2000      	movs	r0, #0
 800a0da:	b003      	add	sp, #12
 800a0dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0e0:	f000 bdae 	b.w	800ac40 <__kernel_sinf>
 800a0e4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a0e8:	db04      	blt.n	800a0f4 <sinf+0x30>
 800a0ea:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a0ee:	b003      	add	sp, #12
 800a0f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a0f4:	4668      	mov	r0, sp
 800a0f6:	f000 f98d 	bl	800a414 <__ieee754_rem_pio2f>
 800a0fa:	f000 0003 	and.w	r0, r0, #3
 800a0fe:	2801      	cmp	r0, #1
 800a100:	d00a      	beq.n	800a118 <sinf+0x54>
 800a102:	2802      	cmp	r0, #2
 800a104:	d00f      	beq.n	800a126 <sinf+0x62>
 800a106:	b9c0      	cbnz	r0, 800a13a <sinf+0x76>
 800a108:	eddd 0a01 	vldr	s1, [sp, #4]
 800a10c:	ed9d 0a00 	vldr	s0, [sp]
 800a110:	2001      	movs	r0, #1
 800a112:	f000 fd95 	bl	800ac40 <__kernel_sinf>
 800a116:	e7ea      	b.n	800a0ee <sinf+0x2a>
 800a118:	eddd 0a01 	vldr	s1, [sp, #4]
 800a11c:	ed9d 0a00 	vldr	s0, [sp]
 800a120:	f000 fab8 	bl	800a694 <__kernel_cosf>
 800a124:	e7e3      	b.n	800a0ee <sinf+0x2a>
 800a126:	eddd 0a01 	vldr	s1, [sp, #4]
 800a12a:	ed9d 0a00 	vldr	s0, [sp]
 800a12e:	2001      	movs	r0, #1
 800a130:	f000 fd86 	bl	800ac40 <__kernel_sinf>
 800a134:	eeb1 0a40 	vneg.f32	s0, s0
 800a138:	e7d9      	b.n	800a0ee <sinf+0x2a>
 800a13a:	eddd 0a01 	vldr	s1, [sp, #4]
 800a13e:	ed9d 0a00 	vldr	s0, [sp]
 800a142:	f000 faa7 	bl	800a694 <__kernel_cosf>
 800a146:	e7f5      	b.n	800a134 <sinf+0x70>
 800a148:	3f490fd8 	.word	0x3f490fd8
 800a14c:	00000000 	.word	0x00000000

0800a150 <atan2f>:
 800a150:	f000 b83e 	b.w	800a1d0 <__ieee754_atan2f>

0800a154 <fmodf>:
 800a154:	b508      	push	{r3, lr}
 800a156:	ed2d 8b02 	vpush	{d8}
 800a15a:	eef0 8a40 	vmov.f32	s17, s0
 800a15e:	eeb0 8a60 	vmov.f32	s16, s1
 800a162:	f000 f8d5 	bl	800a310 <__ieee754_fmodf>
 800a166:	eef4 8a48 	vcmp.f32	s17, s16
 800a16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a16e:	d60c      	bvs.n	800a18a <fmodf+0x36>
 800a170:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a190 <fmodf+0x3c>
 800a174:	eeb4 8a68 	vcmp.f32	s16, s17
 800a178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a17c:	d105      	bne.n	800a18a <fmodf+0x36>
 800a17e:	f7ff ff2b 	bl	8009fd8 <__errno>
 800a182:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a186:	2321      	movs	r3, #33	; 0x21
 800a188:	6003      	str	r3, [r0, #0]
 800a18a:	ecbd 8b02 	vpop	{d8}
 800a18e:	bd08      	pop	{r3, pc}
 800a190:	00000000 	.word	0x00000000

0800a194 <sqrtf>:
 800a194:	b508      	push	{r3, lr}
 800a196:	ed2d 8b02 	vpush	{d8}
 800a19a:	eeb0 8a40 	vmov.f32	s16, s0
 800a19e:	f000 fa75 	bl	800a68c <__ieee754_sqrtf>
 800a1a2:	eeb4 8a48 	vcmp.f32	s16, s16
 800a1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1aa:	d60c      	bvs.n	800a1c6 <sqrtf+0x32>
 800a1ac:	eddf 8a07 	vldr	s17, [pc, #28]	; 800a1cc <sqrtf+0x38>
 800a1b0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1b8:	d505      	bpl.n	800a1c6 <sqrtf+0x32>
 800a1ba:	f7ff ff0d 	bl	8009fd8 <__errno>
 800a1be:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a1c2:	2321      	movs	r3, #33	; 0x21
 800a1c4:	6003      	str	r3, [r0, #0]
 800a1c6:	ecbd 8b02 	vpop	{d8}
 800a1ca:	bd08      	pop	{r3, pc}
 800a1cc:	00000000 	.word	0x00000000

0800a1d0 <__ieee754_atan2f>:
 800a1d0:	ee10 2a90 	vmov	r2, s1
 800a1d4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a1d8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a1dc:	b510      	push	{r4, lr}
 800a1de:	eef0 7a40 	vmov.f32	s15, s0
 800a1e2:	dc06      	bgt.n	800a1f2 <__ieee754_atan2f+0x22>
 800a1e4:	ee10 0a10 	vmov	r0, s0
 800a1e8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a1ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a1f0:	dd04      	ble.n	800a1fc <__ieee754_atan2f+0x2c>
 800a1f2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a1f6:	eeb0 0a67 	vmov.f32	s0, s15
 800a1fa:	bd10      	pop	{r4, pc}
 800a1fc:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800a200:	d103      	bne.n	800a20a <__ieee754_atan2f+0x3a>
 800a202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a206:	f000 bd63 	b.w	800acd0 <atanf>
 800a20a:	1794      	asrs	r4, r2, #30
 800a20c:	f004 0402 	and.w	r4, r4, #2
 800a210:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a214:	b943      	cbnz	r3, 800a228 <__ieee754_atan2f+0x58>
 800a216:	2c02      	cmp	r4, #2
 800a218:	d05e      	beq.n	800a2d8 <__ieee754_atan2f+0x108>
 800a21a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a2ec <__ieee754_atan2f+0x11c>
 800a21e:	2c03      	cmp	r4, #3
 800a220:	bf08      	it	eq
 800a222:	eef0 7a47 	vmoveq.f32	s15, s14
 800a226:	e7e6      	b.n	800a1f6 <__ieee754_atan2f+0x26>
 800a228:	b941      	cbnz	r1, 800a23c <__ieee754_atan2f+0x6c>
 800a22a:	eddf 7a31 	vldr	s15, [pc, #196]	; 800a2f0 <__ieee754_atan2f+0x120>
 800a22e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 800a2f4 <__ieee754_atan2f+0x124>
 800a232:	2800      	cmp	r0, #0
 800a234:	bfb8      	it	lt
 800a236:	eef0 7a40 	vmovlt.f32	s15, s0
 800a23a:	e7dc      	b.n	800a1f6 <__ieee754_atan2f+0x26>
 800a23c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a240:	d110      	bne.n	800a264 <__ieee754_atan2f+0x94>
 800a242:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a246:	f104 34ff 	add.w	r4, r4, #4294967295
 800a24a:	d107      	bne.n	800a25c <__ieee754_atan2f+0x8c>
 800a24c:	2c02      	cmp	r4, #2
 800a24e:	d846      	bhi.n	800a2de <__ieee754_atan2f+0x10e>
 800a250:	4b29      	ldr	r3, [pc, #164]	; (800a2f8 <__ieee754_atan2f+0x128>)
 800a252:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a256:	edd4 7a00 	vldr	s15, [r4]
 800a25a:	e7cc      	b.n	800a1f6 <__ieee754_atan2f+0x26>
 800a25c:	2c02      	cmp	r4, #2
 800a25e:	d841      	bhi.n	800a2e4 <__ieee754_atan2f+0x114>
 800a260:	4b26      	ldr	r3, [pc, #152]	; (800a2fc <__ieee754_atan2f+0x12c>)
 800a262:	e7f6      	b.n	800a252 <__ieee754_atan2f+0x82>
 800a264:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a268:	d0df      	beq.n	800a22a <__ieee754_atan2f+0x5a>
 800a26a:	1a5b      	subs	r3, r3, r1
 800a26c:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800a270:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a274:	da1a      	bge.n	800a2ac <__ieee754_atan2f+0xdc>
 800a276:	2a00      	cmp	r2, #0
 800a278:	da01      	bge.n	800a27e <__ieee754_atan2f+0xae>
 800a27a:	313c      	adds	r1, #60	; 0x3c
 800a27c:	db19      	blt.n	800a2b2 <__ieee754_atan2f+0xe2>
 800a27e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a282:	f000 fdf9 	bl	800ae78 <fabsf>
 800a286:	f000 fd23 	bl	800acd0 <atanf>
 800a28a:	eef0 7a40 	vmov.f32	s15, s0
 800a28e:	2c01      	cmp	r4, #1
 800a290:	d012      	beq.n	800a2b8 <__ieee754_atan2f+0xe8>
 800a292:	2c02      	cmp	r4, #2
 800a294:	d017      	beq.n	800a2c6 <__ieee754_atan2f+0xf6>
 800a296:	2c00      	cmp	r4, #0
 800a298:	d0ad      	beq.n	800a1f6 <__ieee754_atan2f+0x26>
 800a29a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800a300 <__ieee754_atan2f+0x130>
 800a29e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a2a2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800a304 <__ieee754_atan2f+0x134>
 800a2a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a2aa:	e7a4      	b.n	800a1f6 <__ieee754_atan2f+0x26>
 800a2ac:	eddf 7a10 	vldr	s15, [pc, #64]	; 800a2f0 <__ieee754_atan2f+0x120>
 800a2b0:	e7ed      	b.n	800a28e <__ieee754_atan2f+0xbe>
 800a2b2:	eddf 7a15 	vldr	s15, [pc, #84]	; 800a308 <__ieee754_atan2f+0x138>
 800a2b6:	e7ea      	b.n	800a28e <__ieee754_atan2f+0xbe>
 800a2b8:	ee17 3a90 	vmov	r3, s15
 800a2bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a2c0:	ee07 3a90 	vmov	s15, r3
 800a2c4:	e797      	b.n	800a1f6 <__ieee754_atan2f+0x26>
 800a2c6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800a300 <__ieee754_atan2f+0x130>
 800a2ca:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a2ce:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800a304 <__ieee754_atan2f+0x134>
 800a2d2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a2d6:	e78e      	b.n	800a1f6 <__ieee754_atan2f+0x26>
 800a2d8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800a304 <__ieee754_atan2f+0x134>
 800a2dc:	e78b      	b.n	800a1f6 <__ieee754_atan2f+0x26>
 800a2de:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800a30c <__ieee754_atan2f+0x13c>
 800a2e2:	e788      	b.n	800a1f6 <__ieee754_atan2f+0x26>
 800a2e4:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a308 <__ieee754_atan2f+0x138>
 800a2e8:	e785      	b.n	800a1f6 <__ieee754_atan2f+0x26>
 800a2ea:	bf00      	nop
 800a2ec:	c0490fdb 	.word	0xc0490fdb
 800a2f0:	3fc90fdb 	.word	0x3fc90fdb
 800a2f4:	bfc90fdb 	.word	0xbfc90fdb
 800a2f8:	0800b048 	.word	0x0800b048
 800a2fc:	0800b054 	.word	0x0800b054
 800a300:	33bbbd2e 	.word	0x33bbbd2e
 800a304:	40490fdb 	.word	0x40490fdb
 800a308:	00000000 	.word	0x00000000
 800a30c:	3f490fdb 	.word	0x3f490fdb

0800a310 <__ieee754_fmodf>:
 800a310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a312:	ee10 5a90 	vmov	r5, s1
 800a316:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800a31a:	d009      	beq.n	800a330 <__ieee754_fmodf+0x20>
 800a31c:	ee10 2a10 	vmov	r2, s0
 800a320:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a324:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a328:	da02      	bge.n	800a330 <__ieee754_fmodf+0x20>
 800a32a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a32e:	dd04      	ble.n	800a33a <__ieee754_fmodf+0x2a>
 800a330:	ee60 0a20 	vmul.f32	s1, s0, s1
 800a334:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800a338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a33a:	42a3      	cmp	r3, r4
 800a33c:	dbfc      	blt.n	800a338 <__ieee754_fmodf+0x28>
 800a33e:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800a342:	d105      	bne.n	800a350 <__ieee754_fmodf+0x40>
 800a344:	4b32      	ldr	r3, [pc, #200]	; (800a410 <__ieee754_fmodf+0x100>)
 800a346:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800a34a:	ed93 0a00 	vldr	s0, [r3]
 800a34e:	e7f3      	b.n	800a338 <__ieee754_fmodf+0x28>
 800a350:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800a354:	d13f      	bne.n	800a3d6 <__ieee754_fmodf+0xc6>
 800a356:	0219      	lsls	r1, r3, #8
 800a358:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800a35c:	2900      	cmp	r1, #0
 800a35e:	dc37      	bgt.n	800a3d0 <__ieee754_fmodf+0xc0>
 800a360:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800a364:	d13d      	bne.n	800a3e2 <__ieee754_fmodf+0xd2>
 800a366:	0227      	lsls	r7, r4, #8
 800a368:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800a36c:	2f00      	cmp	r7, #0
 800a36e:	da35      	bge.n	800a3dc <__ieee754_fmodf+0xcc>
 800a370:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800a374:	bfbb      	ittet	lt
 800a376:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800a37a:	1a12      	sublt	r2, r2, r0
 800a37c:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800a380:	4093      	lsllt	r3, r2
 800a382:	bfa8      	it	ge
 800a384:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800a388:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a38c:	bfb5      	itete	lt
 800a38e:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800a392:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800a396:	1a52      	sublt	r2, r2, r1
 800a398:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800a39c:	bfb8      	it	lt
 800a39e:	4094      	lsllt	r4, r2
 800a3a0:	1a40      	subs	r0, r0, r1
 800a3a2:	1b1a      	subs	r2, r3, r4
 800a3a4:	bb00      	cbnz	r0, 800a3e8 <__ieee754_fmodf+0xd8>
 800a3a6:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800a3aa:	bf38      	it	cc
 800a3ac:	4613      	movcc	r3, r2
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0c8      	beq.n	800a344 <__ieee754_fmodf+0x34>
 800a3b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a3b6:	db1f      	blt.n	800a3f8 <__ieee754_fmodf+0xe8>
 800a3b8:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a3bc:	db1f      	blt.n	800a3fe <__ieee754_fmodf+0xee>
 800a3be:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800a3c2:	317f      	adds	r1, #127	; 0x7f
 800a3c4:	4333      	orrs	r3, r6
 800a3c6:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800a3ca:	ee00 3a10 	vmov	s0, r3
 800a3ce:	e7b3      	b.n	800a338 <__ieee754_fmodf+0x28>
 800a3d0:	3801      	subs	r0, #1
 800a3d2:	0049      	lsls	r1, r1, #1
 800a3d4:	e7c2      	b.n	800a35c <__ieee754_fmodf+0x4c>
 800a3d6:	15d8      	asrs	r0, r3, #23
 800a3d8:	387f      	subs	r0, #127	; 0x7f
 800a3da:	e7c1      	b.n	800a360 <__ieee754_fmodf+0x50>
 800a3dc:	3901      	subs	r1, #1
 800a3de:	007f      	lsls	r7, r7, #1
 800a3e0:	e7c4      	b.n	800a36c <__ieee754_fmodf+0x5c>
 800a3e2:	15e1      	asrs	r1, r4, #23
 800a3e4:	397f      	subs	r1, #127	; 0x7f
 800a3e6:	e7c3      	b.n	800a370 <__ieee754_fmodf+0x60>
 800a3e8:	2a00      	cmp	r2, #0
 800a3ea:	da02      	bge.n	800a3f2 <__ieee754_fmodf+0xe2>
 800a3ec:	005b      	lsls	r3, r3, #1
 800a3ee:	3801      	subs	r0, #1
 800a3f0:	e7d7      	b.n	800a3a2 <__ieee754_fmodf+0x92>
 800a3f2:	d0a7      	beq.n	800a344 <__ieee754_fmodf+0x34>
 800a3f4:	0053      	lsls	r3, r2, #1
 800a3f6:	e7fa      	b.n	800a3ee <__ieee754_fmodf+0xde>
 800a3f8:	005b      	lsls	r3, r3, #1
 800a3fa:	3901      	subs	r1, #1
 800a3fc:	e7d9      	b.n	800a3b2 <__ieee754_fmodf+0xa2>
 800a3fe:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800a402:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800a406:	3182      	adds	r1, #130	; 0x82
 800a408:	410b      	asrs	r3, r1
 800a40a:	4333      	orrs	r3, r6
 800a40c:	e7dd      	b.n	800a3ca <__ieee754_fmodf+0xba>
 800a40e:	bf00      	nop
 800a410:	0800b060 	.word	0x0800b060

0800a414 <__ieee754_rem_pio2f>:
 800a414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a416:	ee10 6a10 	vmov	r6, s0
 800a41a:	4b8e      	ldr	r3, [pc, #568]	; (800a654 <__ieee754_rem_pio2f+0x240>)
 800a41c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a420:	429d      	cmp	r5, r3
 800a422:	b087      	sub	sp, #28
 800a424:	eef0 7a40 	vmov.f32	s15, s0
 800a428:	4604      	mov	r4, r0
 800a42a:	dc05      	bgt.n	800a438 <__ieee754_rem_pio2f+0x24>
 800a42c:	2300      	movs	r3, #0
 800a42e:	ed80 0a00 	vstr	s0, [r0]
 800a432:	6043      	str	r3, [r0, #4]
 800a434:	2000      	movs	r0, #0
 800a436:	e01a      	b.n	800a46e <__ieee754_rem_pio2f+0x5a>
 800a438:	4b87      	ldr	r3, [pc, #540]	; (800a658 <__ieee754_rem_pio2f+0x244>)
 800a43a:	429d      	cmp	r5, r3
 800a43c:	dc46      	bgt.n	800a4cc <__ieee754_rem_pio2f+0xb8>
 800a43e:	2e00      	cmp	r6, #0
 800a440:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800a65c <__ieee754_rem_pio2f+0x248>
 800a444:	4b86      	ldr	r3, [pc, #536]	; (800a660 <__ieee754_rem_pio2f+0x24c>)
 800a446:	f025 050f 	bic.w	r5, r5, #15
 800a44a:	dd1f      	ble.n	800a48c <__ieee754_rem_pio2f+0x78>
 800a44c:	429d      	cmp	r5, r3
 800a44e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a452:	d00e      	beq.n	800a472 <__ieee754_rem_pio2f+0x5e>
 800a454:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800a664 <__ieee754_rem_pio2f+0x250>
 800a458:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a45c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a460:	ed80 0a00 	vstr	s0, [r0]
 800a464:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a468:	2001      	movs	r0, #1
 800a46a:	edc4 7a01 	vstr	s15, [r4, #4]
 800a46e:	b007      	add	sp, #28
 800a470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a472:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800a668 <__ieee754_rem_pio2f+0x254>
 800a476:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a66c <__ieee754_rem_pio2f+0x258>
 800a47a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a47e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a482:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a486:	edc0 6a00 	vstr	s13, [r0]
 800a48a:	e7eb      	b.n	800a464 <__ieee754_rem_pio2f+0x50>
 800a48c:	429d      	cmp	r5, r3
 800a48e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a492:	d00e      	beq.n	800a4b2 <__ieee754_rem_pio2f+0x9e>
 800a494:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a664 <__ieee754_rem_pio2f+0x250>
 800a498:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a49c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a4a0:	ed80 0a00 	vstr	s0, [r0]
 800a4a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	edc4 7a01 	vstr	s15, [r4, #4]
 800a4b0:	e7dd      	b.n	800a46e <__ieee754_rem_pio2f+0x5a>
 800a4b2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800a668 <__ieee754_rem_pio2f+0x254>
 800a4b6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800a66c <__ieee754_rem_pio2f+0x258>
 800a4ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a4be:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a4c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a4c6:	edc0 6a00 	vstr	s13, [r0]
 800a4ca:	e7eb      	b.n	800a4a4 <__ieee754_rem_pio2f+0x90>
 800a4cc:	4b68      	ldr	r3, [pc, #416]	; (800a670 <__ieee754_rem_pio2f+0x25c>)
 800a4ce:	429d      	cmp	r5, r3
 800a4d0:	dc72      	bgt.n	800a5b8 <__ieee754_rem_pio2f+0x1a4>
 800a4d2:	f000 fcd1 	bl	800ae78 <fabsf>
 800a4d6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a674 <__ieee754_rem_pio2f+0x260>
 800a4da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a4de:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a4e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a4e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a4ea:	ee17 0a90 	vmov	r0, s15
 800a4ee:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a65c <__ieee754_rem_pio2f+0x248>
 800a4f2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a4f6:	281f      	cmp	r0, #31
 800a4f8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a664 <__ieee754_rem_pio2f+0x250>
 800a4fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a500:	eeb1 6a47 	vneg.f32	s12, s14
 800a504:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a508:	ee16 2a90 	vmov	r2, s13
 800a50c:	dc1c      	bgt.n	800a548 <__ieee754_rem_pio2f+0x134>
 800a50e:	495a      	ldr	r1, [pc, #360]	; (800a678 <__ieee754_rem_pio2f+0x264>)
 800a510:	1e47      	subs	r7, r0, #1
 800a512:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a516:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a51a:	428b      	cmp	r3, r1
 800a51c:	d014      	beq.n	800a548 <__ieee754_rem_pio2f+0x134>
 800a51e:	6022      	str	r2, [r4, #0]
 800a520:	ed94 7a00 	vldr	s14, [r4]
 800a524:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a528:	2e00      	cmp	r6, #0
 800a52a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a52e:	ed84 0a01 	vstr	s0, [r4, #4]
 800a532:	da9c      	bge.n	800a46e <__ieee754_rem_pio2f+0x5a>
 800a534:	eeb1 7a47 	vneg.f32	s14, s14
 800a538:	eeb1 0a40 	vneg.f32	s0, s0
 800a53c:	ed84 7a00 	vstr	s14, [r4]
 800a540:	ed84 0a01 	vstr	s0, [r4, #4]
 800a544:	4240      	negs	r0, r0
 800a546:	e792      	b.n	800a46e <__ieee754_rem_pio2f+0x5a>
 800a548:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a54c:	15eb      	asrs	r3, r5, #23
 800a54e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800a552:	2d08      	cmp	r5, #8
 800a554:	dde3      	ble.n	800a51e <__ieee754_rem_pio2f+0x10a>
 800a556:	eddf 7a44 	vldr	s15, [pc, #272]	; 800a668 <__ieee754_rem_pio2f+0x254>
 800a55a:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a66c <__ieee754_rem_pio2f+0x258>
 800a55e:	eef0 6a40 	vmov.f32	s13, s0
 800a562:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a566:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a56a:	eea6 0a27 	vfma.f32	s0, s12, s15
 800a56e:	eef0 7a40 	vmov.f32	s15, s0
 800a572:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a576:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a57a:	ee15 2a90 	vmov	r2, s11
 800a57e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a582:	1a5b      	subs	r3, r3, r1
 800a584:	2b19      	cmp	r3, #25
 800a586:	dc04      	bgt.n	800a592 <__ieee754_rem_pio2f+0x17e>
 800a588:	edc4 5a00 	vstr	s11, [r4]
 800a58c:	eeb0 0a66 	vmov.f32	s0, s13
 800a590:	e7c6      	b.n	800a520 <__ieee754_rem_pio2f+0x10c>
 800a592:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a67c <__ieee754_rem_pio2f+0x268>
 800a596:	eeb0 0a66 	vmov.f32	s0, s13
 800a59a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a59e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a5a2:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a680 <__ieee754_rem_pio2f+0x26c>
 800a5a6:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a5aa:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a5ae:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a5b2:	ed84 7a00 	vstr	s14, [r4]
 800a5b6:	e7b3      	b.n	800a520 <__ieee754_rem_pio2f+0x10c>
 800a5b8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a5bc:	db06      	blt.n	800a5cc <__ieee754_rem_pio2f+0x1b8>
 800a5be:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a5c2:	edc0 7a01 	vstr	s15, [r0, #4]
 800a5c6:	edc0 7a00 	vstr	s15, [r0]
 800a5ca:	e733      	b.n	800a434 <__ieee754_rem_pio2f+0x20>
 800a5cc:	15ea      	asrs	r2, r5, #23
 800a5ce:	3a86      	subs	r2, #134	; 0x86
 800a5d0:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a5d4:	ee07 3a90 	vmov	s15, r3
 800a5d8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a5dc:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a684 <__ieee754_rem_pio2f+0x270>
 800a5e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a5e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5e8:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a5ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a5f0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a5f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a5f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5fc:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a600:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a604:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a60c:	edcd 7a05 	vstr	s15, [sp, #20]
 800a610:	d11e      	bne.n	800a650 <__ieee754_rem_pio2f+0x23c>
 800a612:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a61a:	bf14      	ite	ne
 800a61c:	2302      	movne	r3, #2
 800a61e:	2301      	moveq	r3, #1
 800a620:	4919      	ldr	r1, [pc, #100]	; (800a688 <__ieee754_rem_pio2f+0x274>)
 800a622:	9101      	str	r1, [sp, #4]
 800a624:	2102      	movs	r1, #2
 800a626:	9100      	str	r1, [sp, #0]
 800a628:	a803      	add	r0, sp, #12
 800a62a:	4621      	mov	r1, r4
 800a62c:	f000 f892 	bl	800a754 <__kernel_rem_pio2f>
 800a630:	2e00      	cmp	r6, #0
 800a632:	f6bf af1c 	bge.w	800a46e <__ieee754_rem_pio2f+0x5a>
 800a636:	edd4 7a00 	vldr	s15, [r4]
 800a63a:	eef1 7a67 	vneg.f32	s15, s15
 800a63e:	edc4 7a00 	vstr	s15, [r4]
 800a642:	edd4 7a01 	vldr	s15, [r4, #4]
 800a646:	eef1 7a67 	vneg.f32	s15, s15
 800a64a:	edc4 7a01 	vstr	s15, [r4, #4]
 800a64e:	e779      	b.n	800a544 <__ieee754_rem_pio2f+0x130>
 800a650:	2303      	movs	r3, #3
 800a652:	e7e5      	b.n	800a620 <__ieee754_rem_pio2f+0x20c>
 800a654:	3f490fd8 	.word	0x3f490fd8
 800a658:	4016cbe3 	.word	0x4016cbe3
 800a65c:	3fc90f80 	.word	0x3fc90f80
 800a660:	3fc90fd0 	.word	0x3fc90fd0
 800a664:	37354443 	.word	0x37354443
 800a668:	37354400 	.word	0x37354400
 800a66c:	2e85a308 	.word	0x2e85a308
 800a670:	43490f80 	.word	0x43490f80
 800a674:	3f22f984 	.word	0x3f22f984
 800a678:	0800b068 	.word	0x0800b068
 800a67c:	2e85a300 	.word	0x2e85a300
 800a680:	248d3132 	.word	0x248d3132
 800a684:	43800000 	.word	0x43800000
 800a688:	0800b0e8 	.word	0x0800b0e8

0800a68c <__ieee754_sqrtf>:
 800a68c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a690:	4770      	bx	lr
	...

0800a694 <__kernel_cosf>:
 800a694:	ee10 3a10 	vmov	r3, s0
 800a698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a69c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800a6a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a6a4:	da05      	bge.n	800a6b2 <__kernel_cosf+0x1e>
 800a6a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a6aa:	ee17 2a90 	vmov	r2, s15
 800a6ae:	2a00      	cmp	r2, #0
 800a6b0:	d03d      	beq.n	800a72e <__kernel_cosf+0x9a>
 800a6b2:	ee60 5a00 	vmul.f32	s11, s0, s0
 800a6b6:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a734 <__kernel_cosf+0xa0>
 800a6ba:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800a738 <__kernel_cosf+0xa4>
 800a6be:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a73c <__kernel_cosf+0xa8>
 800a6c2:	4a1f      	ldr	r2, [pc, #124]	; (800a740 <__kernel_cosf+0xac>)
 800a6c4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800a744 <__kernel_cosf+0xb0>
 800a6ce:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a6d2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800a748 <__kernel_cosf+0xb4>
 800a6d6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a6da:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800a74c <__kernel_cosf+0xb8>
 800a6de:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a6e2:	eeb0 7a66 	vmov.f32	s14, s13
 800a6e6:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800a6ea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800a6ee:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800a6f2:	ee67 6a25 	vmul.f32	s13, s14, s11
 800a6f6:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800a6fa:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a6fe:	dc04      	bgt.n	800a70a <__kernel_cosf+0x76>
 800a700:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800a704:	ee36 0a47 	vsub.f32	s0, s12, s14
 800a708:	4770      	bx	lr
 800a70a:	4a11      	ldr	r2, [pc, #68]	; (800a750 <__kernel_cosf+0xbc>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	bfda      	itte	le
 800a710:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800a714:	ee06 3a90 	vmovle	s13, r3
 800a718:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800a71c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a720:	ee36 0a66 	vsub.f32	s0, s12, s13
 800a724:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a728:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a72c:	4770      	bx	lr
 800a72e:	eeb0 0a46 	vmov.f32	s0, s12
 800a732:	4770      	bx	lr
 800a734:	ad47d74e 	.word	0xad47d74e
 800a738:	310f74f6 	.word	0x310f74f6
 800a73c:	3d2aaaab 	.word	0x3d2aaaab
 800a740:	3e999999 	.word	0x3e999999
 800a744:	b493f27c 	.word	0xb493f27c
 800a748:	37d00d01 	.word	0x37d00d01
 800a74c:	bab60b61 	.word	0xbab60b61
 800a750:	3f480000 	.word	0x3f480000

0800a754 <__kernel_rem_pio2f>:
 800a754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a758:	ed2d 8b04 	vpush	{d8-d9}
 800a75c:	b0d9      	sub	sp, #356	; 0x164
 800a75e:	4688      	mov	r8, r1
 800a760:	9002      	str	r0, [sp, #8]
 800a762:	49bb      	ldr	r1, [pc, #748]	; (800aa50 <__kernel_rem_pio2f+0x2fc>)
 800a764:	9866      	ldr	r0, [sp, #408]	; 0x198
 800a766:	9301      	str	r3, [sp, #4]
 800a768:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800a76c:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800a770:	1e59      	subs	r1, r3, #1
 800a772:	1d13      	adds	r3, r2, #4
 800a774:	db27      	blt.n	800a7c6 <__kernel_rem_pio2f+0x72>
 800a776:	f1b2 0b03 	subs.w	fp, r2, #3
 800a77a:	bf48      	it	mi
 800a77c:	f102 0b04 	addmi.w	fp, r2, #4
 800a780:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800a784:	1c45      	adds	r5, r0, #1
 800a786:	00ec      	lsls	r4, r5, #3
 800a788:	1a47      	subs	r7, r0, r1
 800a78a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800aa60 <__kernel_rem_pio2f+0x30c>
 800a78e:	9403      	str	r4, [sp, #12]
 800a790:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800a794:	eb0a 0c01 	add.w	ip, sl, r1
 800a798:	ae1c      	add	r6, sp, #112	; 0x70
 800a79a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800a79e:	2400      	movs	r4, #0
 800a7a0:	4564      	cmp	r4, ip
 800a7a2:	dd12      	ble.n	800a7ca <__kernel_rem_pio2f+0x76>
 800a7a4:	9b01      	ldr	r3, [sp, #4]
 800a7a6:	ac1c      	add	r4, sp, #112	; 0x70
 800a7a8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800a7ac:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800a7b0:	f04f 0c00 	mov.w	ip, #0
 800a7b4:	45d4      	cmp	ip, sl
 800a7b6:	dc27      	bgt.n	800a808 <__kernel_rem_pio2f+0xb4>
 800a7b8:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800a7bc:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800aa60 <__kernel_rem_pio2f+0x30c>
 800a7c0:	4627      	mov	r7, r4
 800a7c2:	2600      	movs	r6, #0
 800a7c4:	e016      	b.n	800a7f4 <__kernel_rem_pio2f+0xa0>
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	e7dc      	b.n	800a784 <__kernel_rem_pio2f+0x30>
 800a7ca:	42e7      	cmn	r7, r4
 800a7cc:	bf5d      	ittte	pl
 800a7ce:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800a7d2:	ee07 3a90 	vmovpl	s15, r3
 800a7d6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800a7da:	eef0 7a47 	vmovmi.f32	s15, s14
 800a7de:	ece6 7a01 	vstmia	r6!, {s15}
 800a7e2:	3401      	adds	r4, #1
 800a7e4:	e7dc      	b.n	800a7a0 <__kernel_rem_pio2f+0x4c>
 800a7e6:	ecf9 6a01 	vldmia	r9!, {s13}
 800a7ea:	ed97 7a00 	vldr	s14, [r7]
 800a7ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a7f2:	3601      	adds	r6, #1
 800a7f4:	428e      	cmp	r6, r1
 800a7f6:	f1a7 0704 	sub.w	r7, r7, #4
 800a7fa:	ddf4      	ble.n	800a7e6 <__kernel_rem_pio2f+0x92>
 800a7fc:	eceb 7a01 	vstmia	fp!, {s15}
 800a800:	f10c 0c01 	add.w	ip, ip, #1
 800a804:	3404      	adds	r4, #4
 800a806:	e7d5      	b.n	800a7b4 <__kernel_rem_pio2f+0x60>
 800a808:	ab08      	add	r3, sp, #32
 800a80a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a80e:	eddf 8a93 	vldr	s17, [pc, #588]	; 800aa5c <__kernel_rem_pio2f+0x308>
 800a812:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800aa58 <__kernel_rem_pio2f+0x304>
 800a816:	9304      	str	r3, [sp, #16]
 800a818:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800a81c:	4656      	mov	r6, sl
 800a81e:	00b3      	lsls	r3, r6, #2
 800a820:	9305      	str	r3, [sp, #20]
 800a822:	ab58      	add	r3, sp, #352	; 0x160
 800a824:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a828:	ac08      	add	r4, sp, #32
 800a82a:	ab44      	add	r3, sp, #272	; 0x110
 800a82c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800a830:	46a4      	mov	ip, r4
 800a832:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800a836:	4637      	mov	r7, r6
 800a838:	2f00      	cmp	r7, #0
 800a83a:	f1a0 0004 	sub.w	r0, r0, #4
 800a83e:	dc4f      	bgt.n	800a8e0 <__kernel_rem_pio2f+0x18c>
 800a840:	4628      	mov	r0, r5
 800a842:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a846:	f000 fb61 	bl	800af0c <scalbnf>
 800a84a:	eeb0 8a40 	vmov.f32	s16, s0
 800a84e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800a852:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a856:	f000 fb17 	bl	800ae88 <floorf>
 800a85a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800a85e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800a862:	2d00      	cmp	r5, #0
 800a864:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a868:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800a86c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800a870:	ee17 9a90 	vmov	r9, s15
 800a874:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a878:	dd44      	ble.n	800a904 <__kernel_rem_pio2f+0x1b0>
 800a87a:	f106 3cff 	add.w	ip, r6, #4294967295
 800a87e:	ab08      	add	r3, sp, #32
 800a880:	f1c5 0e08 	rsb	lr, r5, #8
 800a884:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800a888:	fa47 f00e 	asr.w	r0, r7, lr
 800a88c:	4481      	add	r9, r0
 800a88e:	fa00 f00e 	lsl.w	r0, r0, lr
 800a892:	1a3f      	subs	r7, r7, r0
 800a894:	f1c5 0007 	rsb	r0, r5, #7
 800a898:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800a89c:	4107      	asrs	r7, r0
 800a89e:	2f00      	cmp	r7, #0
 800a8a0:	dd3f      	ble.n	800a922 <__kernel_rem_pio2f+0x1ce>
 800a8a2:	f04f 0e00 	mov.w	lr, #0
 800a8a6:	f109 0901 	add.w	r9, r9, #1
 800a8aa:	4673      	mov	r3, lr
 800a8ac:	4576      	cmp	r6, lr
 800a8ae:	dc6b      	bgt.n	800a988 <__kernel_rem_pio2f+0x234>
 800a8b0:	2d00      	cmp	r5, #0
 800a8b2:	dd04      	ble.n	800a8be <__kernel_rem_pio2f+0x16a>
 800a8b4:	2d01      	cmp	r5, #1
 800a8b6:	d078      	beq.n	800a9aa <__kernel_rem_pio2f+0x256>
 800a8b8:	2d02      	cmp	r5, #2
 800a8ba:	f000 8081 	beq.w	800a9c0 <__kernel_rem_pio2f+0x26c>
 800a8be:	2f02      	cmp	r7, #2
 800a8c0:	d12f      	bne.n	800a922 <__kernel_rem_pio2f+0x1ce>
 800a8c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a8c6:	ee30 8a48 	vsub.f32	s16, s0, s16
 800a8ca:	b353      	cbz	r3, 800a922 <__kernel_rem_pio2f+0x1ce>
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800a8d2:	f000 fb1b 	bl	800af0c <scalbnf>
 800a8d6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800a8da:	ee38 8a40 	vsub.f32	s16, s16, s0
 800a8de:	e020      	b.n	800a922 <__kernel_rem_pio2f+0x1ce>
 800a8e0:	ee60 7a28 	vmul.f32	s15, s0, s17
 800a8e4:	3f01      	subs	r7, #1
 800a8e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a8ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a8ee:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800a8f2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800a8f6:	ecac 0a01 	vstmia	ip!, {s0}
 800a8fa:	ed90 0a00 	vldr	s0, [r0]
 800a8fe:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a902:	e799      	b.n	800a838 <__kernel_rem_pio2f+0xe4>
 800a904:	d105      	bne.n	800a912 <__kernel_rem_pio2f+0x1be>
 800a906:	1e70      	subs	r0, r6, #1
 800a908:	ab08      	add	r3, sp, #32
 800a90a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800a90e:	11ff      	asrs	r7, r7, #7
 800a910:	e7c5      	b.n	800a89e <__kernel_rem_pio2f+0x14a>
 800a912:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a916:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a91e:	da31      	bge.n	800a984 <__kernel_rem_pio2f+0x230>
 800a920:	2700      	movs	r7, #0
 800a922:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a92a:	f040 809b 	bne.w	800aa64 <__kernel_rem_pio2f+0x310>
 800a92e:	1e74      	subs	r4, r6, #1
 800a930:	46a4      	mov	ip, r4
 800a932:	2000      	movs	r0, #0
 800a934:	45d4      	cmp	ip, sl
 800a936:	da4a      	bge.n	800a9ce <__kernel_rem_pio2f+0x27a>
 800a938:	2800      	cmp	r0, #0
 800a93a:	d07a      	beq.n	800aa32 <__kernel_rem_pio2f+0x2de>
 800a93c:	ab08      	add	r3, sp, #32
 800a93e:	3d08      	subs	r5, #8
 800a940:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a944:	2b00      	cmp	r3, #0
 800a946:	f000 8081 	beq.w	800aa4c <__kernel_rem_pio2f+0x2f8>
 800a94a:	4628      	mov	r0, r5
 800a94c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a950:	00a5      	lsls	r5, r4, #2
 800a952:	f000 fadb 	bl	800af0c <scalbnf>
 800a956:	aa44      	add	r2, sp, #272	; 0x110
 800a958:	1d2b      	adds	r3, r5, #4
 800a95a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800aa5c <__kernel_rem_pio2f+0x308>
 800a95e:	18d1      	adds	r1, r2, r3
 800a960:	4622      	mov	r2, r4
 800a962:	2a00      	cmp	r2, #0
 800a964:	f280 80ae 	bge.w	800aac4 <__kernel_rem_pio2f+0x370>
 800a968:	4622      	mov	r2, r4
 800a96a:	2a00      	cmp	r2, #0
 800a96c:	f2c0 80cc 	blt.w	800ab08 <__kernel_rem_pio2f+0x3b4>
 800a970:	a944      	add	r1, sp, #272	; 0x110
 800a972:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800a976:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800aa54 <__kernel_rem_pio2f+0x300>
 800a97a:	eddf 7a39 	vldr	s15, [pc, #228]	; 800aa60 <__kernel_rem_pio2f+0x30c>
 800a97e:	2000      	movs	r0, #0
 800a980:	1aa1      	subs	r1, r4, r2
 800a982:	e0b6      	b.n	800aaf2 <__kernel_rem_pio2f+0x39e>
 800a984:	2702      	movs	r7, #2
 800a986:	e78c      	b.n	800a8a2 <__kernel_rem_pio2f+0x14e>
 800a988:	6820      	ldr	r0, [r4, #0]
 800a98a:	b94b      	cbnz	r3, 800a9a0 <__kernel_rem_pio2f+0x24c>
 800a98c:	b118      	cbz	r0, 800a996 <__kernel_rem_pio2f+0x242>
 800a98e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800a992:	6020      	str	r0, [r4, #0]
 800a994:	2001      	movs	r0, #1
 800a996:	f10e 0e01 	add.w	lr, lr, #1
 800a99a:	3404      	adds	r4, #4
 800a99c:	4603      	mov	r3, r0
 800a99e:	e785      	b.n	800a8ac <__kernel_rem_pio2f+0x158>
 800a9a0:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800a9a4:	6020      	str	r0, [r4, #0]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	e7f5      	b.n	800a996 <__kernel_rem_pio2f+0x242>
 800a9aa:	1e74      	subs	r4, r6, #1
 800a9ac:	a808      	add	r0, sp, #32
 800a9ae:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a9b2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800a9b6:	f10d 0c20 	add.w	ip, sp, #32
 800a9ba:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800a9be:	e77e      	b.n	800a8be <__kernel_rem_pio2f+0x16a>
 800a9c0:	1e74      	subs	r4, r6, #1
 800a9c2:	a808      	add	r0, sp, #32
 800a9c4:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800a9c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800a9cc:	e7f3      	b.n	800a9b6 <__kernel_rem_pio2f+0x262>
 800a9ce:	ab08      	add	r3, sp, #32
 800a9d0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800a9d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a9d8:	4318      	orrs	r0, r3
 800a9da:	e7ab      	b.n	800a934 <__kernel_rem_pio2f+0x1e0>
 800a9dc:	f10c 0c01 	add.w	ip, ip, #1
 800a9e0:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800a9e4:	2c00      	cmp	r4, #0
 800a9e6:	d0f9      	beq.n	800a9dc <__kernel_rem_pio2f+0x288>
 800a9e8:	9b05      	ldr	r3, [sp, #20]
 800a9ea:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800a9ee:	eb0d 0003 	add.w	r0, sp, r3
 800a9f2:	9b01      	ldr	r3, [sp, #4]
 800a9f4:	18f4      	adds	r4, r6, r3
 800a9f6:	ab1c      	add	r3, sp, #112	; 0x70
 800a9f8:	1c77      	adds	r7, r6, #1
 800a9fa:	384c      	subs	r0, #76	; 0x4c
 800a9fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa00:	4466      	add	r6, ip
 800aa02:	42be      	cmp	r6, r7
 800aa04:	f6ff af0b 	blt.w	800a81e <__kernel_rem_pio2f+0xca>
 800aa08:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800aa0c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800aa10:	ee07 3a90 	vmov	s15, r3
 800aa14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa18:	f04f 0c00 	mov.w	ip, #0
 800aa1c:	ece4 7a01 	vstmia	r4!, {s15}
 800aa20:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800aa60 <__kernel_rem_pio2f+0x30c>
 800aa24:	46a1      	mov	r9, r4
 800aa26:	458c      	cmp	ip, r1
 800aa28:	dd07      	ble.n	800aa3a <__kernel_rem_pio2f+0x2e6>
 800aa2a:	ece0 7a01 	vstmia	r0!, {s15}
 800aa2e:	3701      	adds	r7, #1
 800aa30:	e7e7      	b.n	800aa02 <__kernel_rem_pio2f+0x2ae>
 800aa32:	9804      	ldr	r0, [sp, #16]
 800aa34:	f04f 0c01 	mov.w	ip, #1
 800aa38:	e7d2      	b.n	800a9e0 <__kernel_rem_pio2f+0x28c>
 800aa3a:	ecfe 6a01 	vldmia	lr!, {s13}
 800aa3e:	ed39 7a01 	vldmdb	r9!, {s14}
 800aa42:	f10c 0c01 	add.w	ip, ip, #1
 800aa46:	eee6 7a87 	vfma.f32	s15, s13, s14
 800aa4a:	e7ec      	b.n	800aa26 <__kernel_rem_pio2f+0x2d2>
 800aa4c:	3c01      	subs	r4, #1
 800aa4e:	e775      	b.n	800a93c <__kernel_rem_pio2f+0x1e8>
 800aa50:	0800b42c 	.word	0x0800b42c
 800aa54:	0800b400 	.word	0x0800b400
 800aa58:	43800000 	.word	0x43800000
 800aa5c:	3b800000 	.word	0x3b800000
 800aa60:	00000000 	.word	0x00000000
 800aa64:	9b03      	ldr	r3, [sp, #12]
 800aa66:	eeb0 0a48 	vmov.f32	s0, s16
 800aa6a:	1a98      	subs	r0, r3, r2
 800aa6c:	f000 fa4e 	bl	800af0c <scalbnf>
 800aa70:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800aa58 <__kernel_rem_pio2f+0x304>
 800aa74:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800aa78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa7c:	db19      	blt.n	800aab2 <__kernel_rem_pio2f+0x35e>
 800aa7e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800aa5c <__kernel_rem_pio2f+0x308>
 800aa82:	ee60 7a27 	vmul.f32	s15, s0, s15
 800aa86:	aa08      	add	r2, sp, #32
 800aa88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa8c:	1c74      	adds	r4, r6, #1
 800aa8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa92:	3508      	adds	r5, #8
 800aa94:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800aa98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa9c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800aaa0:	ee10 3a10 	vmov	r3, s0
 800aaa4:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800aaa8:	ee17 3a90 	vmov	r3, s15
 800aaac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800aab0:	e74b      	b.n	800a94a <__kernel_rem_pio2f+0x1f6>
 800aab2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800aab6:	aa08      	add	r2, sp, #32
 800aab8:	ee10 3a10 	vmov	r3, s0
 800aabc:	4634      	mov	r4, r6
 800aabe:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800aac2:	e742      	b.n	800a94a <__kernel_rem_pio2f+0x1f6>
 800aac4:	a808      	add	r0, sp, #32
 800aac6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800aaca:	9001      	str	r0, [sp, #4]
 800aacc:	ee07 0a90 	vmov	s15, r0
 800aad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aad4:	3a01      	subs	r2, #1
 800aad6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800aada:	ee20 0a07 	vmul.f32	s0, s0, s14
 800aade:	ed61 7a01 	vstmdb	r1!, {s15}
 800aae2:	e73e      	b.n	800a962 <__kernel_rem_pio2f+0x20e>
 800aae4:	ecfc 6a01 	vldmia	ip!, {s13}
 800aae8:	ecb6 7a01 	vldmia	r6!, {s14}
 800aaec:	eee6 7a87 	vfma.f32	s15, s13, s14
 800aaf0:	3001      	adds	r0, #1
 800aaf2:	4550      	cmp	r0, sl
 800aaf4:	dc01      	bgt.n	800aafa <__kernel_rem_pio2f+0x3a6>
 800aaf6:	4288      	cmp	r0, r1
 800aaf8:	ddf4      	ble.n	800aae4 <__kernel_rem_pio2f+0x390>
 800aafa:	a858      	add	r0, sp, #352	; 0x160
 800aafc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab00:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800ab04:	3a01      	subs	r2, #1
 800ab06:	e730      	b.n	800a96a <__kernel_rem_pio2f+0x216>
 800ab08:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800ab0a:	2a02      	cmp	r2, #2
 800ab0c:	dc09      	bgt.n	800ab22 <__kernel_rem_pio2f+0x3ce>
 800ab0e:	2a00      	cmp	r2, #0
 800ab10:	dc2a      	bgt.n	800ab68 <__kernel_rem_pio2f+0x414>
 800ab12:	d043      	beq.n	800ab9c <__kernel_rem_pio2f+0x448>
 800ab14:	f009 0007 	and.w	r0, r9, #7
 800ab18:	b059      	add	sp, #356	; 0x164
 800ab1a:	ecbd 8b04 	vpop	{d8-d9}
 800ab1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab22:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800ab24:	2b03      	cmp	r3, #3
 800ab26:	d1f5      	bne.n	800ab14 <__kernel_rem_pio2f+0x3c0>
 800ab28:	ab30      	add	r3, sp, #192	; 0xc0
 800ab2a:	442b      	add	r3, r5
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	4619      	mov	r1, r3
 800ab30:	4620      	mov	r0, r4
 800ab32:	2800      	cmp	r0, #0
 800ab34:	f1a1 0104 	sub.w	r1, r1, #4
 800ab38:	dc51      	bgt.n	800abde <__kernel_rem_pio2f+0x48a>
 800ab3a:	4621      	mov	r1, r4
 800ab3c:	2901      	cmp	r1, #1
 800ab3e:	f1a2 0204 	sub.w	r2, r2, #4
 800ab42:	dc5c      	bgt.n	800abfe <__kernel_rem_pio2f+0x4aa>
 800ab44:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800aa60 <__kernel_rem_pio2f+0x30c>
 800ab48:	3304      	adds	r3, #4
 800ab4a:	2c01      	cmp	r4, #1
 800ab4c:	dc67      	bgt.n	800ac1e <__kernel_rem_pio2f+0x4ca>
 800ab4e:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800ab52:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800ab56:	2f00      	cmp	r7, #0
 800ab58:	d167      	bne.n	800ac2a <__kernel_rem_pio2f+0x4d6>
 800ab5a:	edc8 6a00 	vstr	s13, [r8]
 800ab5e:	ed88 7a01 	vstr	s14, [r8, #4]
 800ab62:	edc8 7a02 	vstr	s15, [r8, #8]
 800ab66:	e7d5      	b.n	800ab14 <__kernel_rem_pio2f+0x3c0>
 800ab68:	aa30      	add	r2, sp, #192	; 0xc0
 800ab6a:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800aa60 <__kernel_rem_pio2f+0x30c>
 800ab6e:	4413      	add	r3, r2
 800ab70:	4622      	mov	r2, r4
 800ab72:	2a00      	cmp	r2, #0
 800ab74:	da24      	bge.n	800abc0 <__kernel_rem_pio2f+0x46c>
 800ab76:	b34f      	cbz	r7, 800abcc <__kernel_rem_pio2f+0x478>
 800ab78:	eef1 7a47 	vneg.f32	s15, s14
 800ab7c:	edc8 7a00 	vstr	s15, [r8]
 800ab80:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800ab84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab88:	aa31      	add	r2, sp, #196	; 0xc4
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	429c      	cmp	r4, r3
 800ab8e:	da20      	bge.n	800abd2 <__kernel_rem_pio2f+0x47e>
 800ab90:	b10f      	cbz	r7, 800ab96 <__kernel_rem_pio2f+0x442>
 800ab92:	eef1 7a67 	vneg.f32	s15, s15
 800ab96:	edc8 7a01 	vstr	s15, [r8, #4]
 800ab9a:	e7bb      	b.n	800ab14 <__kernel_rem_pio2f+0x3c0>
 800ab9c:	aa30      	add	r2, sp, #192	; 0xc0
 800ab9e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800aa60 <__kernel_rem_pio2f+0x30c>
 800aba2:	4413      	add	r3, r2
 800aba4:	2c00      	cmp	r4, #0
 800aba6:	da05      	bge.n	800abb4 <__kernel_rem_pio2f+0x460>
 800aba8:	b10f      	cbz	r7, 800abae <__kernel_rem_pio2f+0x45a>
 800abaa:	eef1 7a67 	vneg.f32	s15, s15
 800abae:	edc8 7a00 	vstr	s15, [r8]
 800abb2:	e7af      	b.n	800ab14 <__kernel_rem_pio2f+0x3c0>
 800abb4:	ed33 7a01 	vldmdb	r3!, {s14}
 800abb8:	3c01      	subs	r4, #1
 800abba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abbe:	e7f1      	b.n	800aba4 <__kernel_rem_pio2f+0x450>
 800abc0:	ed73 7a01 	vldmdb	r3!, {s15}
 800abc4:	3a01      	subs	r2, #1
 800abc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800abca:	e7d2      	b.n	800ab72 <__kernel_rem_pio2f+0x41e>
 800abcc:	eef0 7a47 	vmov.f32	s15, s14
 800abd0:	e7d4      	b.n	800ab7c <__kernel_rem_pio2f+0x428>
 800abd2:	ecb2 7a01 	vldmia	r2!, {s14}
 800abd6:	3301      	adds	r3, #1
 800abd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800abdc:	e7d6      	b.n	800ab8c <__kernel_rem_pio2f+0x438>
 800abde:	edd1 7a00 	vldr	s15, [r1]
 800abe2:	edd1 6a01 	vldr	s13, [r1, #4]
 800abe6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800abea:	3801      	subs	r0, #1
 800abec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800abf0:	ed81 7a00 	vstr	s14, [r1]
 800abf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abf8:	edc1 7a01 	vstr	s15, [r1, #4]
 800abfc:	e799      	b.n	800ab32 <__kernel_rem_pio2f+0x3de>
 800abfe:	edd2 7a00 	vldr	s15, [r2]
 800ac02:	edd2 6a01 	vldr	s13, [r2, #4]
 800ac06:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ac0a:	3901      	subs	r1, #1
 800ac0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac10:	ed82 7a00 	vstr	s14, [r2]
 800ac14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac18:	edc2 7a01 	vstr	s15, [r2, #4]
 800ac1c:	e78e      	b.n	800ab3c <__kernel_rem_pio2f+0x3e8>
 800ac1e:	ed33 7a01 	vldmdb	r3!, {s14}
 800ac22:	3c01      	subs	r4, #1
 800ac24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ac28:	e78f      	b.n	800ab4a <__kernel_rem_pio2f+0x3f6>
 800ac2a:	eef1 6a66 	vneg.f32	s13, s13
 800ac2e:	eeb1 7a47 	vneg.f32	s14, s14
 800ac32:	edc8 6a00 	vstr	s13, [r8]
 800ac36:	ed88 7a01 	vstr	s14, [r8, #4]
 800ac3a:	eef1 7a67 	vneg.f32	s15, s15
 800ac3e:	e790      	b.n	800ab62 <__kernel_rem_pio2f+0x40e>

0800ac40 <__kernel_sinf>:
 800ac40:	ee10 3a10 	vmov	r3, s0
 800ac44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac48:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800ac4c:	da04      	bge.n	800ac58 <__kernel_sinf+0x18>
 800ac4e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ac52:	ee17 3a90 	vmov	r3, s15
 800ac56:	b35b      	cbz	r3, 800acb0 <__kernel_sinf+0x70>
 800ac58:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ac5c:	eddf 7a15 	vldr	s15, [pc, #84]	; 800acb4 <__kernel_sinf+0x74>
 800ac60:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800acb8 <__kernel_sinf+0x78>
 800ac64:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ac68:	eddf 7a14 	vldr	s15, [pc, #80]	; 800acbc <__kernel_sinf+0x7c>
 800ac6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ac70:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800acc0 <__kernel_sinf+0x80>
 800ac74:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ac78:	eddf 7a12 	vldr	s15, [pc, #72]	; 800acc4 <__kernel_sinf+0x84>
 800ac7c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ac80:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ac84:	b930      	cbnz	r0, 800ac94 <__kernel_sinf+0x54>
 800ac86:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800acc8 <__kernel_sinf+0x88>
 800ac8a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ac8e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ac92:	4770      	bx	lr
 800ac94:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ac98:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800ac9c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800aca0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800aca4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800accc <__kernel_sinf+0x8c>
 800aca8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800acac:	ee30 0a60 	vsub.f32	s0, s0, s1
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	2f2ec9d3 	.word	0x2f2ec9d3
 800acb8:	b2d72f34 	.word	0xb2d72f34
 800acbc:	3638ef1b 	.word	0x3638ef1b
 800acc0:	b9500d01 	.word	0xb9500d01
 800acc4:	3c088889 	.word	0x3c088889
 800acc8:	be2aaaab 	.word	0xbe2aaaab
 800accc:	3e2aaaab 	.word	0x3e2aaaab

0800acd0 <atanf>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	ee10 5a10 	vmov	r5, s0
 800acd6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800acda:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800acde:	eef0 7a40 	vmov.f32	s15, s0
 800ace2:	db10      	blt.n	800ad06 <atanf+0x36>
 800ace4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ace8:	dd04      	ble.n	800acf4 <atanf+0x24>
 800acea:	ee70 7a00 	vadd.f32	s15, s0, s0
 800acee:	eeb0 0a67 	vmov.f32	s0, s15
 800acf2:	bd38      	pop	{r3, r4, r5, pc}
 800acf4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ae2c <atanf+0x15c>
 800acf8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800ae30 <atanf+0x160>
 800acfc:	2d00      	cmp	r5, #0
 800acfe:	bfd8      	it	le
 800ad00:	eef0 7a40 	vmovle.f32	s15, s0
 800ad04:	e7f3      	b.n	800acee <atanf+0x1e>
 800ad06:	4b4b      	ldr	r3, [pc, #300]	; (800ae34 <atanf+0x164>)
 800ad08:	429c      	cmp	r4, r3
 800ad0a:	dc10      	bgt.n	800ad2e <atanf+0x5e>
 800ad0c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800ad10:	da0a      	bge.n	800ad28 <atanf+0x58>
 800ad12:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800ae38 <atanf+0x168>
 800ad16:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ad1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad1e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ad22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad26:	dce2      	bgt.n	800acee <atanf+0x1e>
 800ad28:	f04f 33ff 	mov.w	r3, #4294967295
 800ad2c:	e013      	b.n	800ad56 <atanf+0x86>
 800ad2e:	f000 f8a3 	bl	800ae78 <fabsf>
 800ad32:	4b42      	ldr	r3, [pc, #264]	; (800ae3c <atanf+0x16c>)
 800ad34:	429c      	cmp	r4, r3
 800ad36:	dc4f      	bgt.n	800add8 <atanf+0x108>
 800ad38:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ad3c:	429c      	cmp	r4, r3
 800ad3e:	dc41      	bgt.n	800adc4 <atanf+0xf4>
 800ad40:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ad44:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ad48:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ad52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ad56:	1c5a      	adds	r2, r3, #1
 800ad58:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ad5c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ae40 <atanf+0x170>
 800ad60:	eddf 5a38 	vldr	s11, [pc, #224]	; 800ae44 <atanf+0x174>
 800ad64:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800ae48 <atanf+0x178>
 800ad68:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ad6c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ad70:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ae4c <atanf+0x17c>
 800ad74:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ad78:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ae50 <atanf+0x180>
 800ad7c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ad80:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800ae54 <atanf+0x184>
 800ad84:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ad88:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ae58 <atanf+0x188>
 800ad8c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ad90:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800ae5c <atanf+0x18c>
 800ad94:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ad98:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800ae60 <atanf+0x190>
 800ad9c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ada0:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800ae64 <atanf+0x194>
 800ada4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ada8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ae68 <atanf+0x198>
 800adac:	eea5 7a26 	vfma.f32	s14, s10, s13
 800adb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800adb4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800adb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800adbc:	d121      	bne.n	800ae02 <atanf+0x132>
 800adbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800adc2:	e794      	b.n	800acee <atanf+0x1e>
 800adc4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800adc8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800adcc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800add0:	2301      	movs	r3, #1
 800add2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800add6:	e7be      	b.n	800ad56 <atanf+0x86>
 800add8:	4b24      	ldr	r3, [pc, #144]	; (800ae6c <atanf+0x19c>)
 800adda:	429c      	cmp	r4, r3
 800addc:	dc0b      	bgt.n	800adf6 <atanf+0x126>
 800adde:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ade2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ade6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800adea:	2302      	movs	r3, #2
 800adec:	ee70 6a67 	vsub.f32	s13, s0, s15
 800adf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adf4:	e7af      	b.n	800ad56 <atanf+0x86>
 800adf6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800adfa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800adfe:	2303      	movs	r3, #3
 800ae00:	e7a9      	b.n	800ad56 <atanf+0x86>
 800ae02:	4a1b      	ldr	r2, [pc, #108]	; (800ae70 <atanf+0x1a0>)
 800ae04:	491b      	ldr	r1, [pc, #108]	; (800ae74 <atanf+0x1a4>)
 800ae06:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ae0a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ae0e:	ed93 0a00 	vldr	s0, [r3]
 800ae12:	ee37 7a40 	vsub.f32	s14, s14, s0
 800ae16:	ed92 0a00 	vldr	s0, [r2]
 800ae1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae1e:	2d00      	cmp	r5, #0
 800ae20:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ae24:	bfb8      	it	lt
 800ae26:	eef1 7a67 	vneglt.f32	s15, s15
 800ae2a:	e760      	b.n	800acee <atanf+0x1e>
 800ae2c:	3fc90fdb 	.word	0x3fc90fdb
 800ae30:	bfc90fdb 	.word	0xbfc90fdb
 800ae34:	3edfffff 	.word	0x3edfffff
 800ae38:	7149f2ca 	.word	0x7149f2ca
 800ae3c:	3f97ffff 	.word	0x3f97ffff
 800ae40:	3c8569d7 	.word	0x3c8569d7
 800ae44:	3d4bda59 	.word	0x3d4bda59
 800ae48:	bd6ef16b 	.word	0xbd6ef16b
 800ae4c:	3d886b35 	.word	0x3d886b35
 800ae50:	3dba2e6e 	.word	0x3dba2e6e
 800ae54:	3e124925 	.word	0x3e124925
 800ae58:	3eaaaaab 	.word	0x3eaaaaab
 800ae5c:	bd15a221 	.word	0xbd15a221
 800ae60:	bd9d8795 	.word	0xbd9d8795
 800ae64:	bde38e38 	.word	0xbde38e38
 800ae68:	be4ccccd 	.word	0xbe4ccccd
 800ae6c:	401bffff 	.word	0x401bffff
 800ae70:	0800b438 	.word	0x0800b438
 800ae74:	0800b448 	.word	0x0800b448

0800ae78 <fabsf>:
 800ae78:	ee10 3a10 	vmov	r3, s0
 800ae7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae80:	ee00 3a10 	vmov	s0, r3
 800ae84:	4770      	bx	lr
	...

0800ae88 <floorf>:
 800ae88:	ee10 3a10 	vmov	r3, s0
 800ae8c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ae90:	3a7f      	subs	r2, #127	; 0x7f
 800ae92:	2a16      	cmp	r2, #22
 800ae94:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ae98:	dc2a      	bgt.n	800aef0 <floorf+0x68>
 800ae9a:	2a00      	cmp	r2, #0
 800ae9c:	da11      	bge.n	800aec2 <floorf+0x3a>
 800ae9e:	eddf 7a18 	vldr	s15, [pc, #96]	; 800af00 <floorf+0x78>
 800aea2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aea6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aeaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeae:	dd05      	ble.n	800aebc <floorf+0x34>
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	da23      	bge.n	800aefc <floorf+0x74>
 800aeb4:	4a13      	ldr	r2, [pc, #76]	; (800af04 <floorf+0x7c>)
 800aeb6:	2900      	cmp	r1, #0
 800aeb8:	bf18      	it	ne
 800aeba:	4613      	movne	r3, r2
 800aebc:	ee00 3a10 	vmov	s0, r3
 800aec0:	4770      	bx	lr
 800aec2:	4911      	ldr	r1, [pc, #68]	; (800af08 <floorf+0x80>)
 800aec4:	4111      	asrs	r1, r2
 800aec6:	420b      	tst	r3, r1
 800aec8:	d0fa      	beq.n	800aec0 <floorf+0x38>
 800aeca:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800af00 <floorf+0x78>
 800aece:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aed2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeda:	ddef      	ble.n	800aebc <floorf+0x34>
 800aedc:	2b00      	cmp	r3, #0
 800aede:	bfbe      	ittt	lt
 800aee0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800aee4:	fa40 f202 	asrlt.w	r2, r0, r2
 800aee8:	189b      	addlt	r3, r3, r2
 800aeea:	ea23 0301 	bic.w	r3, r3, r1
 800aeee:	e7e5      	b.n	800aebc <floorf+0x34>
 800aef0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800aef4:	d3e4      	bcc.n	800aec0 <floorf+0x38>
 800aef6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800aefa:	4770      	bx	lr
 800aefc:	2300      	movs	r3, #0
 800aefe:	e7dd      	b.n	800aebc <floorf+0x34>
 800af00:	7149f2ca 	.word	0x7149f2ca
 800af04:	bf800000 	.word	0xbf800000
 800af08:	007fffff 	.word	0x007fffff

0800af0c <scalbnf>:
 800af0c:	ee10 3a10 	vmov	r3, s0
 800af10:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800af14:	d025      	beq.n	800af62 <scalbnf+0x56>
 800af16:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800af1a:	d302      	bcc.n	800af22 <scalbnf+0x16>
 800af1c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800af20:	4770      	bx	lr
 800af22:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800af26:	d122      	bne.n	800af6e <scalbnf+0x62>
 800af28:	4b2a      	ldr	r3, [pc, #168]	; (800afd4 <scalbnf+0xc8>)
 800af2a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800afd8 <scalbnf+0xcc>
 800af2e:	4298      	cmp	r0, r3
 800af30:	ee20 0a27 	vmul.f32	s0, s0, s15
 800af34:	db16      	blt.n	800af64 <scalbnf+0x58>
 800af36:	ee10 3a10 	vmov	r3, s0
 800af3a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800af3e:	3a19      	subs	r2, #25
 800af40:	4402      	add	r2, r0
 800af42:	2afe      	cmp	r2, #254	; 0xfe
 800af44:	dd15      	ble.n	800af72 <scalbnf+0x66>
 800af46:	ee10 3a10 	vmov	r3, s0
 800af4a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800afdc <scalbnf+0xd0>
 800af4e:	eddf 6a24 	vldr	s13, [pc, #144]	; 800afe0 <scalbnf+0xd4>
 800af52:	2b00      	cmp	r3, #0
 800af54:	eeb0 7a67 	vmov.f32	s14, s15
 800af58:	bfb8      	it	lt
 800af5a:	eef0 7a66 	vmovlt.f32	s15, s13
 800af5e:	ee27 0a27 	vmul.f32	s0, s14, s15
 800af62:	4770      	bx	lr
 800af64:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800afe4 <scalbnf+0xd8>
 800af68:	ee20 0a27 	vmul.f32	s0, s0, s15
 800af6c:	4770      	bx	lr
 800af6e:	0dd2      	lsrs	r2, r2, #23
 800af70:	e7e6      	b.n	800af40 <scalbnf+0x34>
 800af72:	2a00      	cmp	r2, #0
 800af74:	dd06      	ble.n	800af84 <scalbnf+0x78>
 800af76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800af7a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800af7e:	ee00 3a10 	vmov	s0, r3
 800af82:	4770      	bx	lr
 800af84:	f112 0f16 	cmn.w	r2, #22
 800af88:	da1a      	bge.n	800afc0 <scalbnf+0xb4>
 800af8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800af8e:	4298      	cmp	r0, r3
 800af90:	ee10 3a10 	vmov	r3, s0
 800af94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af98:	dd0a      	ble.n	800afb0 <scalbnf+0xa4>
 800af9a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800afdc <scalbnf+0xd0>
 800af9e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800afe0 <scalbnf+0xd4>
 800afa2:	eef0 7a40 	vmov.f32	s15, s0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	bf18      	it	ne
 800afaa:	eeb0 0a47 	vmovne.f32	s0, s14
 800afae:	e7db      	b.n	800af68 <scalbnf+0x5c>
 800afb0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800afe4 <scalbnf+0xd8>
 800afb4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800afe8 <scalbnf+0xdc>
 800afb8:	eef0 7a40 	vmov.f32	s15, s0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	e7f3      	b.n	800afa8 <scalbnf+0x9c>
 800afc0:	3219      	adds	r2, #25
 800afc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800afc6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800afca:	eddf 7a08 	vldr	s15, [pc, #32]	; 800afec <scalbnf+0xe0>
 800afce:	ee07 3a10 	vmov	s14, r3
 800afd2:	e7c4      	b.n	800af5e <scalbnf+0x52>
 800afd4:	ffff3cb0 	.word	0xffff3cb0
 800afd8:	4c000000 	.word	0x4c000000
 800afdc:	7149f2ca 	.word	0x7149f2ca
 800afe0:	f149f2ca 	.word	0xf149f2ca
 800afe4:	0da24260 	.word	0x0da24260
 800afe8:	8da24260 	.word	0x8da24260
 800afec:	33000000 	.word	0x33000000

0800aff0 <_init>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	bf00      	nop
 800aff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aff6:	bc08      	pop	{r3}
 800aff8:	469e      	mov	lr, r3
 800affa:	4770      	bx	lr

0800affc <_fini>:
 800affc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affe:	bf00      	nop
 800b000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b002:	bc08      	pop	{r3}
 800b004:	469e      	mov	lr, r3
 800b006:	4770      	bx	lr
