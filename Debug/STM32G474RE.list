
STM32G474RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009054  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  0800922c  0800922c  0001922c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009644  08009644  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009644  08009644  00019644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800964c  0800964c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800964c  0800964c  0001964c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009650  08009650  00019650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08009654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000070  080096c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  080096c4  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000194a3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e4e  00000000  00000000  00039543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  0003c398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  0003d8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000036c8  00000000  00000000  0003ed18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fde  00000000  00000000  000423e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011231a  00000000  00000000  0005b3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d6d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ddc  00000000  00000000  0016d728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000070 	.word	0x20000070
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009214 	.word	0x08009214

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000074 	.word	0x20000074
 8000214:	08009214 	.word	0x08009214

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <gfWrapTheta>:

	result = num / den;
	return result;
}

float gfWrapTheta(float theta){
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWOPI);
 8000526:	eddf 0a19 	vldr	s1, [pc, #100]	; 800058c <gfWrapTheta+0x70>
 800052a:	ed97 0a01 	vldr	s0, [r7, #4]
 800052e:	f008 f8b9 	bl	80086a4 <fmodf>
 8000532:	ed87 0a01 	vstr	s0, [r7, #4]
	if( theta > PI)
 8000536:	edd7 7a01 	vldr	s15, [r7, #4]
 800053a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000590 <gfWrapTheta+0x74>
 800053e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000546:	dd08      	ble.n	800055a <gfWrapTheta+0x3e>
		theta -= TWOPI;
 8000548:	edd7 7a01 	vldr	s15, [r7, #4]
 800054c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800058c <gfWrapTheta+0x70>
 8000550:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000554:	edc7 7a01 	vstr	s15, [r7, #4]
 8000558:	e010      	b.n	800057c <gfWrapTheta+0x60>
	else if( theta < -PI)
 800055a:	edd7 7a01 	vldr	s15, [r7, #4]
 800055e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000594 <gfWrapTheta+0x78>
 8000562:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800056a:	d507      	bpl.n	800057c <gfWrapTheta+0x60>
		theta += TWOPI;
 800056c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000570:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800058c <gfWrapTheta+0x70>
 8000574:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000578:	edc7 7a01 	vstr	s15, [r7, #4]

	return theta;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	ee07 3a90 	vmov	s15, r3
}
 8000582:	eeb0 0a67 	vmov.f32	s0, s15
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40c90fdb 	.word	0x40c90fdb
 8000590:	40490fdb 	.word	0x40490fdb
 8000594:	c0490fdb 	.word	0xc0490fdb

08000598 <readButton1>:



uint16_t Bemf_AD[3];

uint8_t readButton1(void){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
	uint8_t B1;

	B1 = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 800059e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <readButton1+0x20>)
 80005a4:	f004 fc8e 	bl	8004ec4 <HAL_GPIO_ReadPin>
 80005a8:	4603      	mov	r3, r0
 80005aa:	71fb      	strb	r3, [r7, #7]
	return B1;
 80005ac:	79fb      	ldrb	r3, [r7, #7]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	48000800 	.word	0x48000800

080005bc <readVolume>:
	timeInterval = inputCaptureCntDiff * SYSTEMCLOCKCYCLE;

	return timeInterval;
}

float readVolume(void){
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Volume is connected to PB1(ADC12)
	// BLM_KIT_Ver1_5, Accel is connected  is connected to PC2(ADC8)
	float Volume;
	uint16_t Volume_ad = gAdcValue[1];
 80005c2:	4b0d      	ldr	r3, [pc, #52]	; (80005f8 <readVolume+0x3c>)
 80005c4:	885b      	ldrh	r3, [r3, #2]
 80005c6:	80fb      	strh	r3, [r7, #6]

	//Volume = Volume_ad * 0.0002442f;
	Volume = ((int16_t)Volume_ad - 856) * 0.000573394f;
 80005c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005cc:	f5a3 7356 	sub.w	r3, r3, #856	; 0x358
 80005d0:	ee07 3a90 	vmov	s15, r3
 80005d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005d8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80005fc <readVolume+0x40>
 80005dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005e0:	edc7 7a00 	vstr	s15, [r7]
	return Volume;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	ee07 3a90 	vmov	s15, r3
}
 80005ea:	eeb0 0a67 	vmov.f32	s0, s15
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	2000008c 	.word	0x2000008c
 80005fc:	3a164fd2 	.word	0x3a164fd2

08000600 <readVdc>:

float readVdc(void){
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
	// P-NUCLEO-IHM001(or 002), Vdc is connected to PA1(ADC2)
	float Vdc;
	uint16_t Vdc_ad = gAdcValue[0];
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <readVdc+0x38>)
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	80fb      	strh	r3, [r7, #6]
	Vdc = Vdc_ad * 0.0154305f; // 1/(9.31/(9.31+169)*4096/3.3V)
 800060c:	88fb      	ldrh	r3, [r7, #6]
 800060e:	ee07 3a90 	vmov	s15, r3
 8000612:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000616:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800063c <readVdc+0x3c>
 800061a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800061e:	edc7 7a00 	vstr	s15, [r7]
	return Vdc;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	ee07 3a90 	vmov	s15, r3
}
 8000628:	eeb0 0a67 	vmov.f32	s0, s15
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	2000008c 	.word	0x2000008c
 800063c:	3c7cd035 	.word	0x3c7cd035

08000640 <readCurrent>:

void readCurrent(uint16_t* Iuvw_AD, float* Iuvw){
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
	Iuvw_AD[0] = ADC1 -> JDR1; // Iu
 800064a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800064e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000652:	b29a      	uxth	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[1] = ADC1 -> JDR2; // Iv
 8000658:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800065c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3302      	adds	r3, #2
 8000664:	b292      	uxth	r2, r2
 8000666:	801a      	strh	r2, [r3, #0]
	Iuvw_AD[2] = ADC1 -> JDR3; // Iw
 8000668:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800066c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3304      	adds	r3, #4
 8000674:	b292      	uxth	r2, r2
 8000676:	801a      	strh	r2, [r3, #0]

	Iuvw[0] = ((float)Iuvw_AD[0] - 1901) * -0.00193586253f;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	ee07 3a90 	vmov	s15, r3
 8000680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000684:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80006f4 <readCurrent+0xb4>
 8000688:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800068c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80006f8 <readCurrent+0xb8>
 8000690:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[1] = ((float)Iuvw_AD[1] - 1864) * -0.00193586253f;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	3302      	adds	r3, #2
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	ee07 3a90 	vmov	s15, r3
 80006a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006a8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80006fc <readCurrent+0xbc>
 80006ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	3304      	adds	r3, #4
 80006b4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80006f8 <readCurrent+0xb8>
 80006b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006bc:	edc3 7a00 	vstr	s15, [r3]
	Iuvw[2] = ((float)Iuvw_AD[2] - 1871) * -0.00193586253f;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3304      	adds	r3, #4
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	ee07 3a90 	vmov	s15, r3
 80006ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ce:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000700 <readCurrent+0xc0>
 80006d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	3308      	adds	r3, #8
 80006da:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80006f8 <readCurrent+0xb8>
 80006de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006e2:	edc3 7a00 	vstr	s15, [r3]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	44eda000 	.word	0x44eda000
 80006f8:	bafdbcc5 	.word	0xbafdbcc5
 80006fc:	44e90000 	.word	0x44e90000
 8000700:	44e9e000 	.word	0x44e9e000

08000704 <writeOutputMode>:
	Hall[0] = HAL_GPIO_ReadPin(H1_GPIO_Port, H1_Pin);
	Hall[1] = HAL_GPIO_ReadPin(GPIOB, H2_Pin);
	Hall[2] = HAL_GPIO_ReadPin(GPIOB, H3_Pin);
}

void writeOutputMode(int8_t* outputMode){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

	// if the outputMode is OPEN, set Enable Pin to RESET.
	if(outputMode[0] == OUTPUTMODE_OPEN )
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f993 3000 	ldrsb.w	r3, [r3]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d106      	bne.n	8000724 <writeOutputMode+0x20>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071c:	4819      	ldr	r0, [pc, #100]	; (8000784 <writeOutputMode+0x80>)
 800071e:	f004 fbe9 	bl	8004ef4 <HAL_GPIO_WritePin>
 8000722:	e005      	b.n	8000730 <writeOutputMode+0x2c>
	else
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800072a:	4816      	ldr	r0, [pc, #88]	; (8000784 <writeOutputMode+0x80>)
 800072c:	f004 fbe2 	bl	8004ef4 <HAL_GPIO_WritePin>

	if(outputMode[1] == OUTPUTMODE_OPEN )
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	f993 3000 	ldrsb.w	r3, [r3]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d106      	bne.n	800074a <writeOutputMode+0x46>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000742:	4810      	ldr	r0, [pc, #64]	; (8000784 <writeOutputMode+0x80>)
 8000744:	f004 fbd6 	bl	8004ef4 <HAL_GPIO_WritePin>
 8000748:	e005      	b.n	8000756 <writeOutputMode+0x52>
	else
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000750:	480c      	ldr	r0, [pc, #48]	; (8000784 <writeOutputMode+0x80>)
 8000752:	f004 fbcf 	bl	8004ef4 <HAL_GPIO_WritePin>

	if(outputMode[2] == OUTPUTMODE_OPEN )
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	3302      	adds	r3, #2
 800075a:	f993 3000 	ldrsb.w	r3, [r3]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d106      	bne.n	8000770 <writeOutputMode+0x6c>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000768:	4806      	ldr	r0, [pc, #24]	; (8000784 <writeOutputMode+0x80>)
 800076a:	f004 fbc3 	bl	8004ef4 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
}
 800076e:	e005      	b.n	800077c <writeOutputMode+0x78>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000776:	4803      	ldr	r0, [pc, #12]	; (8000784 <writeOutputMode+0x80>)
 8000778:	f004 fbbc 	bl	8004ef4 <HAL_GPIO_WritePin>
}
 800077c:	bf00      	nop
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	48000800 	.word	0x48000800

08000788 <writeDuty>:

void writeDuty(float* Duty){
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	// TIM1 -> ARR Means Counter Period of TIM1
	TIM1 -> CCR1 = Duty[0] * (TIM1 -> ARR);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	ed93 7a00 	vldr	s14, [r3]
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <writeDuty+0x80>)
 8000798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079a:	ee07 3a90 	vmov	s15, r3
 800079e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <writeDuty+0x80>)
 80007a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007ac:	ee17 2a90 	vmov	r2, s15
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1 -> CCR2 = Duty[1] * (TIM1 -> ARR);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	3304      	adds	r3, #4
 80007b6:	ed93 7a00 	vldr	s14, [r3]
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <writeDuty+0x80>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007be:	ee07 3a90 	vmov	s15, r3
 80007c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <writeDuty+0x80>)
 80007cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007d0:	ee17 2a90 	vmov	r2, s15
 80007d4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1 -> CCR3 = Duty[2] * (TIM1 -> ARR);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3308      	adds	r3, #8
 80007da:	ed93 7a00 	vldr	s14, [r3]
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <writeDuty+0x80>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e2:	ee07 3a90 	vmov	s15, r3
 80007e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <writeDuty+0x80>)
 80007f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007f4:	ee17 2a90 	vmov	r2, s15
 80007f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40012c00 	.word	0x40012c00

0800080c <OpenLoopTasks>:
	writeOutputMode(outputMode);
	writeDuty(Duty);

}

void OpenLoopTasks(float VamRef, float theta, float *Iuvw, float Vdc, float* Duty){
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	ed87 0a05 	vstr	s0, [r7, #20]
 8000816:	edc7 0a04 	vstr	s1, [r7, #16]
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000820:	6079      	str	r1, [r7, #4]
	uint8_t outputMode[3];
	outputMode[0] = OUTPUTMODE_POSITIVE;
 8000822:	2301      	movs	r3, #1
 8000824:	773b      	strb	r3, [r7, #28]
	outputMode[1] = OUTPUTMODE_POSITIVE;
 8000826:	2301      	movs	r3, #1
 8000828:	777b      	strb	r3, [r7, #29]
	outputMode[2] = OUTPUTMODE_POSITIVE;
 800082a:	2301      	movs	r3, #1
 800082c:	77bb      	strb	r3, [r7, #30]

	uvw2ab(gIuvw, sIab);
 800082e:	4916      	ldr	r1, [pc, #88]	; (8000888 <OpenLoopTasks+0x7c>)
 8000830:	4816      	ldr	r0, [pc, #88]	; (800088c <OpenLoopTasks+0x80>)
 8000832:	f000 f835 	bl	80008a0 <uvw2ab>
	ab2dq(theta, sIab, sIdq);
 8000836:	4916      	ldr	r1, [pc, #88]	; (8000890 <OpenLoopTasks+0x84>)
 8000838:	4813      	ldr	r0, [pc, #76]	; (8000888 <OpenLoopTasks+0x7c>)
 800083a:	ed97 0a04 	vldr	s0, [r7, #16]
 800083e:	f000 f8b9 	bl	80009b4 <ab2dq>
	sVdq[0] = 0.0f;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <OpenLoopTasks+0x88>)
 8000844:	f04f 0200 	mov.w	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
	sVdq[1] = VamRef;
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <OpenLoopTasks+0x88>)
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	6053      	str	r3, [r2, #4]
	dq2ab(theta, sVdq, sVab);
 8000850:	4911      	ldr	r1, [pc, #68]	; (8000898 <OpenLoopTasks+0x8c>)
 8000852:	4810      	ldr	r0, [pc, #64]	; (8000894 <OpenLoopTasks+0x88>)
 8000854:	ed97 0a04 	vldr	s0, [r7, #16]
 8000858:	f000 f8ee 	bl	8000a38 <dq2ab>
	ab2uvw(sVab, sVuvw);
 800085c:	490f      	ldr	r1, [pc, #60]	; (800089c <OpenLoopTasks+0x90>)
 800085e:	480e      	ldr	r0, [pc, #56]	; (8000898 <OpenLoopTasks+0x8c>)
 8000860:	f000 f866 	bl	8000930 <ab2uvw>
	Vuvw2Duty(Vdc, sVuvw, Duty);
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	480d      	ldr	r0, [pc, #52]	; (800089c <OpenLoopTasks+0x90>)
 8000868:	ed97 0a02 	vldr	s0, [r7, #8]
 800086c:	f000 f924 	bl	8000ab8 <Vuvw2Duty>
	writeOutputMode(outputMode);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff45 	bl	8000704 <writeOutputMode>
	writeDuty(Duty);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff84 	bl	8000788 <writeDuty>

}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000c4 	.word	0x200000c4
 800088c:	200000a0 	.word	0x200000a0
 8000890:	200000cc 	.word	0x200000cc
 8000894:	200000d4 	.word	0x200000d4
 8000898:	200000dc 	.word	0x200000dc
 800089c:	200000e4 	.word	0x200000e4

080008a0 <uvw2ab>:

static void uvw2ab(float* uvw, float* ab){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
	ab[0] = SQRT_2DIV3 * ( uvw[0] - 0.5f * uvw[1] - 0.5f * uvw[2] );
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	ed93 7a00 	vldr	s14, [r3]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3304      	adds	r3, #4
 80008b4:	edd3 7a00 	vldr	s15, [r3]
 80008b8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80008bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3308      	adds	r3, #8
 80008c8:	edd3 7a00 	vldr	s15, [r3]
 80008cc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80008d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80008d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008d8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000928 <uvw2ab+0x88>
 80008dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = SQRT_2DIV3 * ( SQRT3_DIV3 * uvw[1] - SQRT3_DIV3 * uvw[2] );
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3304      	adds	r3, #4
 80008ea:	edd3 7a00 	vldr	s15, [r3]
 80008ee:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800092c <uvw2ab+0x8c>
 80008f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3308      	adds	r3, #8
 80008fa:	edd3 7a00 	vldr	s15, [r3]
 80008fe:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800092c <uvw2ab+0x8c>
 8000902:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	3304      	adds	r3, #4
 800090e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000928 <uvw2ab+0x88>
 8000912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000916:	edc3 7a00 	vstr	s15, [r3]
}
 800091a:	bf00      	nop
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	3f5105ec 	.word	0x3f5105ec
 800092c:	3f5db3d7 	.word	0x3f5db3d7

08000930 <ab2uvw>:

static void ab2uvw(float* ab, float* uvw){
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	6039      	str	r1, [r7, #0]
	uvw[0] = SQRT_2DIV3 * ab[0];
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	edd3 7a00 	vldr	s15, [r3]
 8000940:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80009ac <ab2uvw+0x7c>
 8000944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	edc3 7a00 	vstr	s15, [r3]
	uvw[1] = SQRT_2DIV3 * ( -0.5f * ab[0] + SQRT3_DIV3 * ab[1] );
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	edd3 7a00 	vldr	s15, [r3]
 8000954:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8000958:	ee27 7a87 	vmul.f32	s14, s15, s14
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3304      	adds	r3, #4
 8000960:	edd3 7a00 	vldr	s15, [r3]
 8000964:	eddf 6a12 	vldr	s13, [pc, #72]	; 80009b0 <ab2uvw+0x80>
 8000968:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800096c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	3304      	adds	r3, #4
 8000974:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80009ac <ab2uvw+0x7c>
 8000978:	ee67 7a87 	vmul.f32	s15, s15, s14
 800097c:	edc3 7a00 	vstr	s15, [r3]
	uvw[2] = - uvw[0] - uvw[1];
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	edd3 7a00 	vldr	s15, [r3]
 8000986:	eeb1 7a67 	vneg.f32	s14, s15
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	3304      	adds	r3, #4
 800098e:	edd3 7a00 	vldr	s15, [r3]
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	3308      	adds	r3, #8
 8000996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800099a:	edc3 7a00 	vstr	s15, [r3]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	3f5105ec 	.word	0x3f5105ec
 80009b0:	3f5db3d7 	.word	0x3f5db3d7

080009b4 <ab2dq>:

static void ab2dq(float theta, float* ab, float* dq){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80009be:	60b8      	str	r0, [r7, #8]
 80009c0:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 80009c2:	ed97 0a03 	vldr	s0, [r7, #12]
 80009c6:	f007 fe27 	bl	8008618 <sinf>
 80009ca:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 80009ce:	ed97 0a03 	vldr	s0, [r7, #12]
 80009d2:	f007 fddd 	bl	8008590 <cosf>
 80009d6:	ed87 0a04 	vstr	s0, [r7, #16]
	dq[0] = ab[0] * cosTheta + ab[1] * sinTheta;
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	ed93 7a00 	vldr	s14, [r3]
 80009e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80009e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	3304      	adds	r3, #4
 80009ec:	edd3 6a00 	vldr	s13, [r3]
 80009f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80009f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	edc3 7a00 	vstr	s15, [r3]
	dq[1] = - ab[0] * sinTheta + ab[1] * cosTheta;
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	edd3 7a00 	vldr	s15, [r3]
 8000a08:	eeb1 7a67 	vneg.f32	s14, s15
 8000a0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	3304      	adds	r3, #4
 8000a18:	edd3 6a00 	vldr	s13, [r3]
 8000a1c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3304      	adds	r3, #4
 8000a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a2c:	edc3 7a00 	vstr	s15, [r3]
}
 8000a30:	bf00      	nop
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <dq2ab>:

static void dq2ab(float theta, float* dq, float* ab){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000a42:	60b8      	str	r0, [r7, #8]
 8000a44:	6079      	str	r1, [r7, #4]
	float sinTheta;
	float cosTheta;
	sinTheta = sinf(theta);
 8000a46:	ed97 0a03 	vldr	s0, [r7, #12]
 8000a4a:	f007 fde5 	bl	8008618 <sinf>
 8000a4e:	ed87 0a05 	vstr	s0, [r7, #20]
	cosTheta = cosf(theta);
 8000a52:	ed97 0a03 	vldr	s0, [r7, #12]
 8000a56:	f007 fd9b 	bl	8008590 <cosf>
 8000a5a:	ed87 0a04 	vstr	s0, [r7, #16]
	ab[0] = dq[0] * cosTheta - dq[1] * sinTheta;
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	ed93 7a00 	vldr	s14, [r3]
 8000a64:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	3304      	adds	r3, #4
 8000a70:	edd3 6a00 	vldr	s13, [r3]
 8000a74:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	edc3 7a00 	vstr	s15, [r3]
	ab[1] = dq[0] * sinTheta + dq[1] * cosTheta;
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	ed93 7a00 	vldr	s14, [r3]
 8000a8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	3304      	adds	r3, #4
 8000a98:	edd3 6a00 	vldr	s13, [r3]
 8000a9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000aa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000aac:	edc3 7a00 	vstr	s15, [r3]
}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <Vuvw2Duty>:

static void Vuvw2Duty(float Vdc, float* Vuvw, float* Duty){
 8000ab8:	b480      	push	{r7}
 8000aba:	b087      	sub	sp, #28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ac2:	60b8      	str	r0, [r7, #8]
 8000ac4:	6079      	str	r1, [r7, #4]
	float TwoDivVH;

	TwoDivVH = 0.2f; //2/VH
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <Vuvw2Duty+0x68>)
 8000ac8:	617b      	str	r3, [r7, #20]
	// Vuvw2Duty Vu/(VH*0.5) *
	Duty[0] = (Vuvw[0] * TwoDivVH);
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	ed93 7a00 	vldr	s14, [r3]
 8000ad0:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	edc3 7a00 	vstr	s15, [r3]
	Duty[1] = (Vuvw[1] * TwoDivVH);
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	ed93 7a00 	vldr	s14, [r3]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	edd7 7a05 	vldr	s15, [r7, #20]
 8000aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000af2:	edc3 7a00 	vstr	s15, [r3]
	Duty[2] = -Duty[0] - Duty[1];
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	edd3 7a00 	vldr	s15, [r3]
 8000afc:	eeb1 7a67 	vneg.f32	s14, s15
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3304      	adds	r3, #4
 8000b04:	edd3 7a00 	vldr	s15, [r3]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3308      	adds	r3, #8
 8000b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b10:	edc3 7a00 	vstr	s15, [r3]

}
 8000b14:	bf00      	nop
 8000b16:	371c      	adds	r7, #28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	3e4ccccd 	.word	0x3e4ccccd

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b28:	f000 fed5 	bl	80018d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2c:	f000 f862 	bl	8000bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b30:	f000 fb20 	bl	8001174 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b34:	f000 faf4 	bl	8001120 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000b38:	f000 f984 	bl	8000e44 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000b3c:	f000 f8a6 	bl	8000c8c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000b40:	f000 f9ca 	bl	8000ed8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000b44:	f000 fa82 	bl	800104c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000b48:	4824      	ldr	r0, [pc, #144]	; (8000bdc <main+0xb8>)
 8000b4a:	f005 fa5f 	bl	800600c <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_InjectedStart_IT(&hadc1);
 8000b4e:	4824      	ldr	r0, [pc, #144]	; (8000be0 <main+0xbc>)
 8000b50:	f002 fd48 	bl	80035e4 <HAL_ADCEx_InjectedStart_IT>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5a:	4822      	ldr	r0, [pc, #136]	; (8000be4 <main+0xc0>)
 8000b5c:	f004 f9ca 	bl	8004ef4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000b60:	2201      	movs	r2, #1
 8000b62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b66:	481f      	ldr	r0, [pc, #124]	; (8000be4 <main+0xc0>)
 8000b68:	f004 f9c4 	bl	8004ef4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b72:	481c      	ldr	r0, [pc, #112]	; (8000be4 <main+0xc0>)
 8000b74:	f004 f9be 	bl	8004ef4 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4818      	ldr	r0, [pc, #96]	; (8000bdc <main+0xb8>)
 8000b7c:	f005 fb16 	bl	80061ac <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000b80:	2100      	movs	r1, #0
 8000b82:	4816      	ldr	r0, [pc, #88]	; (8000bdc <main+0xb8>)
 8000b84:	f006 fc9e 	bl	80074c4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b88:	2104      	movs	r1, #4
 8000b8a:	4814      	ldr	r0, [pc, #80]	; (8000bdc <main+0xb8>)
 8000b8c:	f005 fb0e 	bl	80061ac <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000b90:	2104      	movs	r1, #4
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <main+0xb8>)
 8000b94:	f006 fc96 	bl	80074c4 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000b98:	2108      	movs	r1, #8
 8000b9a:	4810      	ldr	r0, [pc, #64]	; (8000bdc <main+0xb8>)
 8000b9c:	f005 fb06 	bl	80061ac <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	480e      	ldr	r0, [pc, #56]	; (8000bdc <main+0xb8>)
 8000ba4:	f006 fc8e 	bl	80074c4 <HAL_TIMEx_PWMN_Start>

  TIM1 -> CCR4 = (TIM1 -> ARR) - 10;//for Carrier Top Interrupt
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <main+0xc4>)
 8000baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <main+0xc4>)
 8000bae:	3b0a      	subs	r3, #10
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40

  // Start TIM2 Input Capture
  HAL_TIM_Base_Start_IT(&htim2);
 8000bb2:	480e      	ldr	r0, [pc, #56]	; (8000bec <main+0xc8>)
 8000bb4:	f005 fa2a 	bl	800600c <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	480c      	ldr	r0, [pc, #48]	; (8000bec <main+0xc8>)
 8000bbc:	f005 fc60 	bl	8006480 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	480a      	ldr	r0, [pc, #40]	; (8000bec <main+0xc8>)
 8000bc4:	f005 fc5c 	bl	8006480 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000bc8:	2108      	movs	r1, #8
 8000bca:	4808      	ldr	r0, [pc, #32]	; (8000bec <main+0xc8>)
 8000bcc:	f005 fc58 	bl	8006480 <HAL_TIM_IC_Start_IT>

  // Start DMA (This function needs to be called after Starting TIM1 & TIM2)
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)gAdcValue, 2);
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	4907      	ldr	r1, [pc, #28]	; (8000bf0 <main+0xcc>)
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <main+0xbc>)
 8000bd6:	f001 faf5 	bl	80021c4 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <main+0xb6>
 8000bdc:	2000024c 	.word	0x2000024c
 8000be0:	200000f0 	.word	0x200000f0
 8000be4:	48000800 	.word	0x48000800
 8000be8:	40012c00 	.word	0x40012c00
 8000bec:	20000298 	.word	0x20000298
 8000bf0:	2000008c 	.word	0x2000008c

08000bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b094      	sub	sp, #80	; 0x50
 8000bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	2238      	movs	r2, #56	; 0x38
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f007 fcbc 	bl	8008580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f004 f9c2 	bl	8004fa0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c26:	2340      	movs	r3, #64	; 0x40
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c32:	2304      	movs	r3, #4
 8000c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c36:	2355      	movs	r3, #85	; 0x55
 8000c38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c46:	f107 0318 	add.w	r3, r7, #24
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f004 fa5c 	bl	8005108 <HAL_RCC_OscConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c56:	f000 fb11 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5a:	230f      	movs	r3, #15
 8000c5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	2104      	movs	r1, #4
 8000c72:	4618      	mov	r0, r3
 8000c74:	f004 fd60 	bl	8005738 <HAL_RCC_ClockConfig>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c7e:	f000 fafd 	bl	800127c <Error_Handler>
  }
}
 8000c82:	bf00      	nop
 8000c84:	3750      	adds	r7, #80	; 0x50
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b09a      	sub	sp, #104	; 0x68
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ca2:	2220      	movs	r2, #32
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f007 fc6a 	bl	8008580 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000cac:	463b      	mov	r3, r7
 8000cae:	223c      	movs	r2, #60	; 0x3c
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f007 fc64 	bl	8008580 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cb8:	4b5c      	ldr	r3, [pc, #368]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000cba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cc0:	4b5a      	ldr	r3, [pc, #360]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000cc2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc8:	4b58      	ldr	r3, [pc, #352]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cce:	4b57      	ldr	r3, [pc, #348]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000cd4:	4b55      	ldr	r3, [pc, #340]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000cda:	4b54      	ldr	r3, [pc, #336]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce0:	4b52      	ldr	r3, [pc, #328]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000ce2:	2204      	movs	r2, #4
 8000ce4:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ce6:	4b51      	ldr	r3, [pc, #324]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000cec:	4b4f      	ldr	r3, [pc, #316]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000cf2:	4b4e      	ldr	r3, [pc, #312]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cf8:	4b4c      	ldr	r3, [pc, #304]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d00:	4b4a      	ldr	r3, [pc, #296]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d06:	4b49      	ldr	r3, [pc, #292]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d0c:	4b47      	ldr	r3, [pc, #284]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d14:	4b45      	ldr	r3, [pc, #276]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d1a:	4b44      	ldr	r3, [pc, #272]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d22:	4842      	ldr	r0, [pc, #264]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000d24:	f001 f88c 	bl	8001e40 <HAL_ADC_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000d2e:	f000 faa5 	bl	800127c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d32:	2300      	movs	r3, #0
 8000d34:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	483b      	ldr	r0, [pc, #236]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000d3e:	f003 fab5 	bl	80042ac <HAL_ADCEx_MultiModeConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8000d48:	f000 fa98 	bl	800127c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d4c:	4b38      	ldr	r3, [pc, #224]	; (8000e30 <MX_ADC1_Init+0x1a4>)
 8000d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d50:	2306      	movs	r3, #6
 8000d52:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d54:	2300      	movs	r3, #0
 8000d56:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d58:	237f      	movs	r3, #127	; 0x7f
 8000d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4830      	ldr	r0, [pc, #192]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000d6c:	f001 fd86 	bl	800287c <HAL_ADC_ConfigChannel>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8000d76:	f000 fa81 	bl	800127c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000d7a:	4b2e      	ldr	r3, [pc, #184]	; (8000e34 <MX_ADC1_Init+0x1a8>)
 8000d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000d7e:	230c      	movs	r3, #12
 8000d80:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d82:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d86:	4619      	mov	r1, r3
 8000d88:	4828      	ldr	r0, [pc, #160]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000d8a:	f001 fd77 	bl	800287c <HAL_ADC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8000d94:	f000 fa72 	bl	800127c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <MX_ADC1_Init+0x1ac>)
 8000d9a:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000d9c:	2309      	movs	r3, #9
 8000d9e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000da4:	237f      	movs	r3, #127	; 0x7f
 8000da6:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000da8:	2304      	movs	r3, #4
 8000daa:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000db0:	2303      	movs	r3, #3
 8000db2:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4814      	ldr	r0, [pc, #80]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000dda:	f002 fd3b 	bl	8003854 <HAL_ADCEx_InjectedConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8000de4:	f000 fa4a 	bl	800127c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <MX_ADC1_Init+0x1b0>)
 8000dea:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000dec:	f240 130f 	movw	r3, #271	; 0x10f
 8000df0:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000df2:	463b      	mov	r3, r7
 8000df4:	4619      	mov	r1, r3
 8000df6:	480d      	ldr	r0, [pc, #52]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000df8:	f002 fd2c 	bl	8003854 <HAL_ADCEx_InjectedConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 8000e02:	f000 fa3b 	bl	800127c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <MX_ADC1_Init+0x1b4>)
 8000e08:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8000e0a:	f240 2315 	movw	r3, #533	; 0x215
 8000e0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_ADC1_Init+0x1a0>)
 8000e16:	f002 fd1d 	bl	8003854 <HAL_ADCEx_InjectedConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_ADC1_Init+0x198>
  {
    Error_Handler();
 8000e20:	f000 fa2c 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3768      	adds	r7, #104	; 0x68
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200000f0 	.word	0x200000f0
 8000e30:	08600004 	.word	0x08600004
 8000e34:	32601000 	.word	0x32601000
 8000e38:	04300002 	.word	0x04300002
 8000e3c:	1d500080 	.word	0x1d500080
 8000e40:	19200040 	.word	0x19200040

08000e44 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e4a:	4a22      	ldr	r2, [pc, #136]	; (8000ed4 <MX_LPUART1_UART_Init+0x90>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e54:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e86:	4812      	ldr	r0, [pc, #72]	; (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e88:	f006 fd4b 	bl	8007922 <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e92:	f000 f9f3 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e96:	2100      	movs	r1, #0
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e9a:	f007 fa7d 	bl	8008398 <HAL_UARTEx_SetTxFifoThreshold>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000ea4:	f000 f9ea 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000eac:	f007 fab2 	bl	8008414 <HAL_UARTEx_SetRxFifoThreshold>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000eb6:	f000 f9e1 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000ebc:	f007 fa33 	bl	8008326 <HAL_UARTEx_DisableFifoMode>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000ec6:	f000 f9d9 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200001bc 	.word	0x200001bc
 8000ed4:	40008000 	.word	0x40008000

08000ed8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b098      	sub	sp, #96	; 0x60
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ede:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]
 8000efa:	615a      	str	r2, [r3, #20]
 8000efc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2234      	movs	r2, #52	; 0x34
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f007 fb3b 	bl	8008580 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f0a:	4b4e      	ldr	r3, [pc, #312]	; (8001044 <MX_TIM1_Init+0x16c>)
 8000f0c:	4a4e      	ldr	r2, [pc, #312]	; (8001048 <MX_TIM1_Init+0x170>)
 8000f0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f10:	4b4c      	ldr	r3, [pc, #304]	; (8001044 <MX_TIM1_Init+0x16c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000f16:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <MX_TIM1_Init+0x16c>)
 8000f18:	2220      	movs	r2, #32
 8000f1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4999;
 8000f1c:	4b49      	ldr	r3, [pc, #292]	; (8001044 <MX_TIM1_Init+0x16c>)
 8000f1e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f24:	4b47      	ldr	r3, [pc, #284]	; (8001044 <MX_TIM1_Init+0x16c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f2a:	4b46      	ldr	r3, [pc, #280]	; (8001044 <MX_TIM1_Init+0x16c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b44      	ldr	r3, [pc, #272]	; (8001044 <MX_TIM1_Init+0x16c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f36:	4843      	ldr	r0, [pc, #268]	; (8001044 <MX_TIM1_Init+0x16c>)
 8000f38:	f005 f8e0 	bl	80060fc <HAL_TIM_PWM_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f42:	f000 f99b 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000f46:	2370      	movs	r3, #112	; 0x70
 8000f48:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f56:	4619      	mov	r1, r3
 8000f58:	483a      	ldr	r0, [pc, #232]	; (8001044 <MX_TIM1_Init+0x16c>)
 8000f5a:	f006 fb75 	bl	8007648 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f64:	f000 f98a 	bl	800127c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f68:	2360      	movs	r3, #96	; 0x60
 8000f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f70:	2300      	movs	r3, #0
 8000f72:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f74:	2300      	movs	r3, #0
 8000f76:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f88:	2200      	movs	r2, #0
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	482d      	ldr	r0, [pc, #180]	; (8001044 <MX_TIM1_Init+0x16c>)
 8000f8e:	f005 fc63 	bl	8006858 <HAL_TIM_PWM_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f98:	f000 f970 	bl	800127c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4827      	ldr	r0, [pc, #156]	; (8001044 <MX_TIM1_Init+0x16c>)
 8000fa6:	f005 fc57 	bl	8006858 <HAL_TIM_PWM_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000fb0:	f000 f964 	bl	800127c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fb8:	2208      	movs	r2, #8
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4821      	ldr	r0, [pc, #132]	; (8001044 <MX_TIM1_Init+0x16c>)
 8000fbe:	f005 fc4b 	bl	8006858 <HAL_TIM_PWM_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000fc8:	f000 f958 	bl	800127c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000fcc:	2370      	movs	r3, #112	; 0x70
 8000fce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fd0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fd4:	220c      	movs	r2, #12
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	481a      	ldr	r0, [pc, #104]	; (8001044 <MX_TIM1_Init+0x16c>)
 8000fda:	f005 fc3d 	bl	8006858 <HAL_TIM_PWM_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000fe4:	f000 f94a 	bl	800127c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001000:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800100e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4619      	mov	r1, r3
 8001024:	4807      	ldr	r0, [pc, #28]	; (8001044 <MX_TIM1_Init+0x16c>)
 8001026:	f006 fba5 	bl	8007774 <HAL_TIMEx_ConfigBreakDeadTime>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001030:	f000 f924 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001034:	4803      	ldr	r0, [pc, #12]	; (8001044 <MX_TIM1_Init+0x16c>)
 8001036:	f000 fae3 	bl	8001600 <HAL_TIM_MspPostInit>

}
 800103a:	bf00      	nop
 800103c:	3760      	adds	r7, #96	; 0x60
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	2000024c 	.word	0x2000024c
 8001048:	40012c00 	.word	0x40012c00

0800104c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <MX_TIM2_Init+0xd0>)
 800106c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001070:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001072:	4b2a      	ldr	r3, [pc, #168]	; (800111c <MX_TIM2_Init+0xd0>)
 8001074:	2200      	movs	r2, #0
 8001076:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001078:	4b28      	ldr	r3, [pc, #160]	; (800111c <MX_TIM2_Init+0xd0>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 800107e:	4b27      	ldr	r3, [pc, #156]	; (800111c <MX_TIM2_Init+0xd0>)
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <MX_TIM2_Init+0xd0>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108c:	4b23      	ldr	r3, [pc, #140]	; (800111c <MX_TIM2_Init+0xd0>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001092:	4822      	ldr	r0, [pc, #136]	; (800111c <MX_TIM2_Init+0xd0>)
 8001094:	f005 f99c 	bl	80063d0 <HAL_TIM_IC_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800109e:	f000 f8ed 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	481a      	ldr	r0, [pc, #104]	; (800111c <MX_TIM2_Init+0xd0>)
 80010b2:	f006 fac9 	bl	8007648 <HAL_TIMEx_MasterConfigSynchronization>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80010bc:	f000 f8de 	bl	800127c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010c4:	2301      	movs	r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2200      	movs	r2, #0
 80010d4:	4619      	mov	r1, r3
 80010d6:	4811      	ldr	r0, [pc, #68]	; (800111c <MX_TIM2_Init+0xd0>)
 80010d8:	f005 fb22 	bl	8006720 <HAL_TIM_IC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80010e2:	f000 f8cb 	bl	800127c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2204      	movs	r2, #4
 80010ea:	4619      	mov	r1, r3
 80010ec:	480b      	ldr	r0, [pc, #44]	; (800111c <MX_TIM2_Init+0xd0>)
 80010ee:	f005 fb17 	bl	8006720 <HAL_TIM_IC_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80010f8:	f000 f8c0 	bl	800127c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2208      	movs	r2, #8
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <MX_TIM2_Init+0xd0>)
 8001104:	f005 fb0c 	bl	8006720 <HAL_TIM_IC_ConfigChannel>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800110e:	f000 f8b5 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3720      	adds	r7, #32
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000298 	.word	0x20000298

08001120 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <MX_DMA_Init+0x50>)
 8001128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800112a:	4a11      	ldr	r2, [pc, #68]	; (8001170 <MX_DMA_Init+0x50>)
 800112c:	f043 0304 	orr.w	r3, r3, #4
 8001130:	6493      	str	r3, [r2, #72]	; 0x48
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_DMA_Init+0x50>)
 8001134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_DMA_Init+0x50>)
 8001140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <MX_DMA_Init+0x50>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6493      	str	r3, [r2, #72]	; 0x48
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_DMA_Init+0x50>)
 800114c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	200b      	movs	r0, #11
 800115c:	f003 fa89 	bl	8004672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001160:	200b      	movs	r0, #11
 8001162:	f003 faa0 	bl	80046a6 <HAL_NVIC_EnableIRQ>

}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000

08001174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <MX_GPIO_Init+0x100>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	4a39      	ldr	r2, [pc, #228]	; (8001274 <MX_GPIO_Init+0x100>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001196:	4b37      	ldr	r3, [pc, #220]	; (8001274 <MX_GPIO_Init+0x100>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a2:	4b34      	ldr	r3, [pc, #208]	; (8001274 <MX_GPIO_Init+0x100>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a6:	4a33      	ldr	r2, [pc, #204]	; (8001274 <MX_GPIO_Init+0x100>)
 80011a8:	f043 0320 	orr.w	r3, r3, #32
 80011ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ae:	4b31      	ldr	r3, [pc, #196]	; (8001274 <MX_GPIO_Init+0x100>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b2:	f003 0320 	and.w	r3, r3, #32
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	4b2e      	ldr	r3, [pc, #184]	; (8001274 <MX_GPIO_Init+0x100>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011be:	4a2d      	ldr	r2, [pc, #180]	; (8001274 <MX_GPIO_Init+0x100>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c6:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <MX_GPIO_Init+0x100>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]
 80011d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <MX_GPIO_Init+0x100>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	4a27      	ldr	r2, [pc, #156]	; (8001274 <MX_GPIO_Init+0x100>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011de:	4b25      	ldr	r3, [pc, #148]	; (8001274 <MX_GPIO_Init+0x100>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2120      	movs	r1, #32
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f003 fe7f 	bl	8004ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80011fc:	481e      	ldr	r0, [pc, #120]	; (8001278 <MX_GPIO_Init+0x104>)
 80011fe:	f003 fe79 	bl	8004ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001208:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	4817      	ldr	r0, [pc, #92]	; (8001278 <MX_GPIO_Init+0x104>)
 800121a:	f003 fcd1 	bl	8004bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800121e:	2320      	movs	r3, #32
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f003 fcc2 	bl	8004bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|EN3_Pin;
 800123c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	4808      	ldr	r0, [pc, #32]	; (8001278 <MX_GPIO_Init+0x104>)
 8001256:	f003 fcb3 	bl	8004bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800125a:	2200      	movs	r2, #0
 800125c:	2100      	movs	r1, #0
 800125e:	2028      	movs	r0, #40	; 0x28
 8001260:	f003 fa07 	bl	8004672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001264:	2028      	movs	r0, #40	; 0x28
 8001266:	f003 fa1e 	bl	80046a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	48000800 	.word	0x48000800

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_MspInit+0x44>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_MspInit+0x44>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6613      	str	r3, [r2, #96]	; 0x60
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_MspInit+0x44>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_MspInit+0x44>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_MspInit+0x44>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6593      	str	r3, [r2, #88]	; 0x58
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_MspInit+0x44>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012be:	f003 ff13 	bl	80050e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000

080012d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b0a0      	sub	sp, #128	; 0x80
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e8:	f107 0318 	add.w	r3, r7, #24
 80012ec:	2254      	movs	r2, #84	; 0x54
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f007 f945 	bl	8008580 <memset>
  if(hadc->Instance==ADC1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012fe:	f040 8098 	bne.w	8001432 <HAL_ADC_MspInit+0x162>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001306:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001308:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800130c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800130e:	f107 0318 	add.w	r3, r7, #24
 8001312:	4618      	mov	r0, r3
 8001314:	f004 fc2c 	bl	8005b70 <HAL_RCCEx_PeriphCLKConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800131e:	f7ff ffad 	bl	800127c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001322:	4b46      	ldr	r3, [pc, #280]	; (800143c <HAL_ADC_MspInit+0x16c>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	4a45      	ldr	r2, [pc, #276]	; (800143c <HAL_ADC_MspInit+0x16c>)
 8001328:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800132c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132e:	4b43      	ldr	r3, [pc, #268]	; (800143c <HAL_ADC_MspInit+0x16c>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	4b40      	ldr	r3, [pc, #256]	; (800143c <HAL_ADC_MspInit+0x16c>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	4a3f      	ldr	r2, [pc, #252]	; (800143c <HAL_ADC_MspInit+0x16c>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001346:	4b3d      	ldr	r3, [pc, #244]	; (800143c <HAL_ADC_MspInit+0x16c>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	4b3a      	ldr	r3, [pc, #232]	; (800143c <HAL_ADC_MspInit+0x16c>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	4a39      	ldr	r2, [pc, #228]	; (800143c <HAL_ADC_MspInit+0x16c>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135e:	4b37      	ldr	r3, [pc, #220]	; (800143c <HAL_ADC_MspInit+0x16c>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	4b34      	ldr	r3, [pc, #208]	; (800143c <HAL_ADC_MspInit+0x16c>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a33      	ldr	r2, [pc, #204]	; (800143c <HAL_ADC_MspInit+0x16c>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b31      	ldr	r3, [pc, #196]	; (800143c <HAL_ADC_MspInit+0x16c>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN7
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001382:	2303      	movs	r3, #3
 8001384:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001386:	2303      	movs	r3, #3
 8001388:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001392:	4619      	mov	r1, r3
 8001394:	482a      	ldr	r0, [pc, #168]	; (8001440 <HAL_ADC_MspInit+0x170>)
 8001396:	f003 fc13 	bl	8004bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800139a:	2303      	movs	r3, #3
 800139c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800139e:	2303      	movs	r3, #3
 80013a0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f003 fc06 	bl	8004bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013b4:	2302      	movs	r3, #2
 80013b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b8:	2303      	movs	r3, #3
 80013ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013c4:	4619      	mov	r1, r3
 80013c6:	481f      	ldr	r0, [pc, #124]	; (8001444 <HAL_ADC_MspInit+0x174>)
 80013c8:	f003 fbfa 	bl	8004bc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <HAL_ADC_MspInit+0x178>)
 80013ce:	4a1f      	ldr	r2, [pc, #124]	; (800144c <HAL_ADC_MspInit+0x17c>)
 80013d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <HAL_ADC_MspInit+0x178>)
 80013d4:	2205      	movs	r2, #5
 80013d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_ADC_MspInit+0x178>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <HAL_ADC_MspInit+0x178>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <HAL_ADC_MspInit+0x178>)
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <HAL_ADC_MspInit+0x178>)
 80013ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_ADC_MspInit+0x178>)
 80013f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013fa:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_ADC_MspInit+0x178>)
 80013fc:	2220      	movs	r2, #32
 80013fe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_ADC_MspInit+0x178>)
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001406:	4810      	ldr	r0, [pc, #64]	; (8001448 <HAL_ADC_MspInit+0x178>)
 8001408:	f003 f968 	bl	80046dc <HAL_DMA_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_ADC_MspInit+0x146>
    {
      Error_Handler();
 8001412:	f7ff ff33 	bl	800127c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <HAL_ADC_MspInit+0x178>)
 800141a:	655a      	str	r2, [r3, #84]	; 0x54
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_ADC_MspInit+0x178>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2012      	movs	r0, #18
 8001428:	f003 f923 	bl	8004672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800142c:	2012      	movs	r0, #18
 800142e:	f003 f93a 	bl	80046a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3780      	adds	r7, #128	; 0x80
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	48000800 	.word	0x48000800
 8001444:	48000400 	.word	0x48000400
 8001448:	2000015c 	.word	0x2000015c
 800144c:	40020008 	.word	0x40020008

08001450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b09e      	sub	sp, #120	; 0x78
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	2254      	movs	r2, #84	; 0x54
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f007 f885 	bl	8008580 <memset>
  if(huart->Instance==LPUART1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <HAL_UART_MspInit+0xa8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d136      	bne.n	80014ee <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001480:	2320      	movs	r3, #32
 8001482:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001484:	2300      	movs	r3, #0
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	4618      	mov	r0, r3
 800148e:	f004 fb6f 	bl	8005b70 <HAL_RCCEx_PeriphCLKConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001498:	f7ff fef0 	bl	800127c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_UART_MspInit+0xac>)
 800149e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a0:	4a16      	ldr	r2, [pc, #88]	; (80014fc <HAL_UART_MspInit+0xac>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_UART_MspInit+0xac>)
 80014aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_UART_MspInit+0xac>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	4a10      	ldr	r2, [pc, #64]	; (80014fc <HAL_UART_MspInit+0xac>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_UART_MspInit+0xac>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80014cc:	230c      	movs	r3, #12
 80014ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80014dc:	230c      	movs	r3, #12
 80014de:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014e4:	4619      	mov	r1, r3
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ea:	f003 fb69 	bl	8004bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3778      	adds	r7, #120	; 0x78
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40008000 	.word	0x40008000
 80014fc:	40021000 	.word	0x40021000

08001500 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0a      	ldr	r2, [pc, #40]	; (8001538 <HAL_TIM_PWM_MspInit+0x38>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d10b      	bne.n	800152a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_TIM_PWM_MspInit+0x3c>)
 8001514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <HAL_TIM_PWM_MspInit+0x3c>)
 8001518:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800151c:	6613      	str	r3, [r2, #96]	; 0x60
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <HAL_TIM_PWM_MspInit+0x3c>)
 8001520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40012c00 	.word	0x40012c00
 800153c:	40021000 	.word	0x40021000

08001540 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08a      	sub	sp, #40	; 0x28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001560:	d146      	bne.n	80015f0 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <HAL_TIM_IC_MspInit+0xb8>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	4a24      	ldr	r2, [pc, #144]	; (80015f8 <HAL_TIM_IC_MspInit+0xb8>)
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6593      	str	r3, [r2, #88]	; 0x58
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <HAL_TIM_IC_MspInit+0xb8>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <HAL_TIM_IC_MspInit+0xb8>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	4a1e      	ldr	r2, [pc, #120]	; (80015f8 <HAL_TIM_IC_MspInit+0xb8>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <HAL_TIM_IC_MspInit+0xb8>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b19      	ldr	r3, [pc, #100]	; (80015f8 <HAL_TIM_IC_MspInit+0xb8>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <HAL_TIM_IC_MspInit+0xb8>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <HAL_TIM_IC_MspInit+0xb8>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = H3_Pin|H2_Pin;
 80015aa:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80015ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015bc:	2301      	movs	r3, #1
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	4619      	mov	r1, r3
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <HAL_TIM_IC_MspInit+0xbc>)
 80015c8:	f003 fafa 	bl	8004bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = H1_Pin;
 80015cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015de:	2301      	movs	r3, #1
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(H1_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ec:	f003 fae8 	bl	8004bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	; 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40021000 	.word	0x40021000
 80015fc:	48000400 	.word	0x48000400

08001600 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a20      	ldr	r2, [pc, #128]	; (80016a0 <HAL_TIM_MspPostInit+0xa0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d139      	bne.n	8001696 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <HAL_TIM_MspPostInit+0xa4>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	4a1f      	ldr	r2, [pc, #124]	; (80016a4 <HAL_TIM_MspPostInit+0xa4>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162e:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_TIM_MspPostInit+0xa4>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HAL_TIM_MspPostInit+0xa4>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	4a19      	ldr	r2, [pc, #100]	; (80016a4 <HAL_TIM_MspPostInit+0xa4>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <HAL_TIM_MspPostInit+0xa4>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> TIM1_CH4
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001652:	2308      	movs	r3, #8
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001662:	2302      	movs	r3, #2
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	480e      	ldr	r0, [pc, #56]	; (80016a8 <HAL_TIM_MspPostInit+0xa8>)
 800166e:	f003 faa7 	bl	8004bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001672:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001684:	2306      	movs	r3, #6
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001692:	f003 fa95 	bl	8004bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	; 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40012c00 	.word	0x40012c00
 80016a4:	40021000 	.word	0x40021000
 80016a8:	48000800 	.word	0x48000800

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	e7fe      	b.n	80016b0 <NMI_Handler+0x4>

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f8:	f000 f940 	bl	800197c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <DMA1_Channel1_IRQHandler+0x10>)
 8001706:	f003 f90c 	bl	8004922 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000015c 	.word	0x2000015c

08001714 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
	int8_t rotDir;
	float ErectFreqRef = 100.0f;
 800171a:	4b41      	ldr	r3, [pc, #260]	; (8001820 <ADC1_2_IRQHandler+0x10c>)
 800171c:	60bb      	str	r3, [r7, #8]
	float ErectFreqErr;
	float theta_tmp;
  uint8_t outputMode[3];
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800171e:	4841      	ldr	r0, [pc, #260]	; (8001824 <ADC1_2_IRQHandler+0x110>)
 8001720:	f000 fe24 	bl	800236c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001724:	2120      	movs	r1, #32
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f003 fbfb 	bl	8004f24 <HAL_GPIO_TogglePin>

	//read IO signals
	gButton1 = readButton1();
 800172e:	f7fe ff33 	bl	8000598 <readButton1>
 8001732:	4603      	mov	r3, r0
 8001734:	461a      	mov	r2, r3
 8001736:	4b3c      	ldr	r3, [pc, #240]	; (8001828 <ADC1_2_IRQHandler+0x114>)
 8001738:	701a      	strb	r2, [r3, #0]
	gVolume = readVolume();
 800173a:	f7fe ff3f 	bl	80005bc <readVolume>
 800173e:	eef0 7a40 	vmov.f32	s15, s0
 8001742:	4b3a      	ldr	r3, [pc, #232]	; (800182c <ADC1_2_IRQHandler+0x118>)
 8001744:	edc3 7a00 	vstr	s15, [r3]
readCurrent(gIuvw_AD, gIuvw);
 8001748:	4939      	ldr	r1, [pc, #228]	; (8001830 <ADC1_2_IRQHandler+0x11c>)
 800174a:	483a      	ldr	r0, [pc, #232]	; (8001834 <ADC1_2_IRQHandler+0x120>)
 800174c:	f7fe ff78 	bl	8000640 <readCurrent>
	gVdc = readVdc();
 8001750:	f7fe ff56 	bl	8000600 <readVdc>
 8001754:	eef0 7a40 	vmov.f32	s15, s0
 8001758:	4b37      	ldr	r3, [pc, #220]	; (8001838 <ADC1_2_IRQHandler+0x124>)
 800175a:	edc3 7a00 	vstr	s15, [r3]

	//DutyRef Calculation
	if ( gButton1 == 1 )
 800175e:	4b32      	ldr	r3, [pc, #200]	; (8001828 <ADC1_2_IRQHandler+0x114>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d102      	bne.n	800176c <ADC1_2_IRQHandler+0x58>
	  rotDir = 1;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	e001      	b.n	8001770 <ADC1_2_IRQHandler+0x5c>
	else
	  rotDir = -1;
 800176c:	23ff      	movs	r3, #255	; 0xff
 800176e:	73fb      	strb	r3, [r7, #15]
	ErectFreqErr = ErectFreqRef - gElectFreq;
	gDutyRef += ErectFreqErr * 0.0000001f;
	*/


	gDutyRef = (float)rotDir * gVolume;
 8001770:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800177c:	4b2b      	ldr	r3, [pc, #172]	; (800182c <ADC1_2_IRQHandler+0x118>)
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001786:	4b2d      	ldr	r3, [pc, #180]	; (800183c <ADC1_2_IRQHandler+0x128>)
 8001788:	edc3 7a00 	vstr	s15, [r3]
	if (gDutyRef > 1.0f) gDutyRef = 1.0f;
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <ADC1_2_IRQHandler+0x128>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800179e:	dd03      	ble.n	80017a8 <ADC1_2_IRQHandler+0x94>
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <ADC1_2_IRQHandler+0x128>)
 80017a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80017a6:	601a      	str	r2, [r3, #0]
	if (gDutyRef < -1.0f) gDutyRef = -1.0f;
 80017a8:	4b24      	ldr	r3, [pc, #144]	; (800183c <ADC1_2_IRQHandler+0x128>)
 80017aa:	edd3 7a00 	vldr	s15, [r3]
 80017ae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80017b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ba:	d502      	bpl.n	80017c2 <ADC1_2_IRQHandler+0xae>
 80017bc:	4b1f      	ldr	r3, [pc, #124]	; (800183c <ADC1_2_IRQHandler+0x128>)
 80017be:	4a20      	ldr	r2, [pc, #128]	; (8001840 <ADC1_2_IRQHandler+0x12c>)
 80017c0:	601a      	str	r2, [r3, #0]
	//sixStepTasks(gDutyRef, 0.0f, &gTheta, gDuty, outputMode);
	//write IO signals
	//writeOutputMode(outputMode);
	//writeDuty(gDuty);

	gTheta = gTheta + 100.0f * CARRIERCYCLE;
 80017c2:	4b20      	ldr	r3, [pc, #128]	; (8001844 <ADC1_2_IRQHandler+0x130>)
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001848 <ADC1_2_IRQHandler+0x134>
 80017cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017d0:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <ADC1_2_IRQHandler+0x130>)
 80017d2:	edc3 7a00 	vstr	s15, [r3]
	//theta_tmp = gfWrapTheta(gTheta);
	//if (gTheta > TWOPI) gTheta = 0.0f;
	//gTheta = fmodf(gTheta, TWOPI);
	gTheta = gfWrapTheta(gTheta);
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <ADC1_2_IRQHandler+0x130>)
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	eeb0 0a67 	vmov.f32	s0, s15
 80017e0:	f7fe fe9c 	bl	800051c <gfWrapTheta>
 80017e4:	eef0 7a40 	vmov.f32	s15, s0
 80017e8:	4b16      	ldr	r3, [pc, #88]	; (8001844 <ADC1_2_IRQHandler+0x130>)
 80017ea:	edc3 7a00 	vstr	s15, [r3]
OpenLoopTasks(2.0f, gTheta, gIuvw, gVdc, gDuty);
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <ADC1_2_IRQHandler+0x130>)
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	4b10      	ldr	r3, [pc, #64]	; (8001838 <ADC1_2_IRQHandler+0x124>)
 80017f6:	ed93 7a00 	vldr	s14, [r3]
 80017fa:	4914      	ldr	r1, [pc, #80]	; (800184c <ADC1_2_IRQHandler+0x138>)
 80017fc:	eeb0 1a47 	vmov.f32	s2, s14
 8001800:	480b      	ldr	r0, [pc, #44]	; (8001830 <ADC1_2_IRQHandler+0x11c>)
 8001802:	eef0 0a67 	vmov.f32	s1, s15
 8001806:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800180a:	f7fe ffff 	bl	800080c <OpenLoopTasks>
//
//VectorControlTasks(Idq_ref, gTheta, gIuvw, gVdc, gDuty);

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800180e:	2120      	movs	r1, #32
 8001810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001814:	f003 fb86 	bl	8004f24 <HAL_GPIO_TogglePin>

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	42c80000 	.word	0x42c80000
 8001824:	200000f0 	.word	0x200000f0
 8001828:	20000090 	.word	0x20000090
 800182c:	2000009c 	.word	0x2000009c
 8001830:	200000a0 	.word	0x200000a0
 8001834:	200000ac 	.word	0x200000ac
 8001838:	20000098 	.word	0x20000098
 800183c:	200000b4 	.word	0x200000b4
 8001840:	bf800000 	.word	0xbf800000
 8001844:	20000094 	.word	0x20000094
 8001848:	3bc0c0c1 	.word	0x3bc0c0c1
 800184c:	200000b8 	.word	0x200000b8

08001850 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001854:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001858:	f003 fb7e 	bl	8004f58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <SystemInit+0x20>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <SystemInit+0x20>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001884:	480d      	ldr	r0, [pc, #52]	; (80018bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001886:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800188a:	490e      	ldr	r1, [pc, #56]	; (80018c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800188c:	4a0e      	ldr	r2, [pc, #56]	; (80018c8 <LoopForever+0xe>)
  movs r3, #0
 800188e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001890:	e002      	b.n	8001898 <LoopCopyDataInit>

08001892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001896:	3304      	adds	r3, #4

08001898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800189c:	d3f9      	bcc.n	8001892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80018a0:	4c0b      	ldr	r4, [pc, #44]	; (80018d0 <LoopForever+0x16>)
  movs r3, #0
 80018a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a4:	e001      	b.n	80018aa <LoopFillZerobss>

080018a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a8:	3204      	adds	r2, #4

080018aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018ac:	d3fb      	bcc.n	80018a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018ae:	f7ff ffd7 	bl	8001860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b2:	f006 fe41 	bl	8008538 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018b6:	f7ff f935 	bl	8000b24 <main>

080018ba <LoopForever>:

LoopForever:
    b LoopForever
 80018ba:	e7fe      	b.n	80018ba <LoopForever>
  ldr   r0, =_estack
 80018bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018c8:	08009654 	.word	0x08009654
  ldr r2, =_sbss
 80018cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018d0:	200002e8 	.word	0x200002e8

080018d4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018d4:	e7fe      	b.n	80018d4 <ADC3_IRQHandler>

080018d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e0:	2003      	movs	r0, #3
 80018e2:	f002 febb 	bl	800465c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 f80e 	bl	8001908 <HAL_InitTick>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d002      	beq.n	80018f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	71fb      	strb	r3, [r7, #7]
 80018f6:	e001      	b.n	80018fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018f8:	f7ff fcc6 	bl	8001288 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018fc:	79fb      	ldrb	r3, [r7, #7]

}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001914:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_InitTick+0x68>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d022      	beq.n	8001962 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <HAL_InitTick+0x6c>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b13      	ldr	r3, [pc, #76]	; (8001970 <HAL_InitTick+0x68>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001928:	fbb1 f3f3 	udiv	r3, r1, r3
 800192c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fec6 	bl	80046c2 <HAL_SYSTICK_Config>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10f      	bne.n	800195c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b0f      	cmp	r3, #15
 8001940:	d809      	bhi.n	8001956 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001942:	2200      	movs	r2, #0
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	f04f 30ff 	mov.w	r0, #4294967295
 800194a:	f002 fe92 	bl	8004672 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <HAL_InitTick+0x70>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6013      	str	r3, [r2, #0]
 8001954:	e007      	b.n	8001966 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	73fb      	strb	r3, [r7, #15]
 800195a:	e004      	b.n	8001966 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e001      	b.n	8001966 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000008 	.word	0x20000008
 8001974:	20000000 	.word	0x20000000
 8001978:	20000004 	.word	0x20000004

0800197c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_IncTick+0x1c>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_IncTick+0x20>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4413      	add	r3, r2
 800198a:	4a03      	ldr	r2, [pc, #12]	; (8001998 <HAL_IncTick+0x1c>)
 800198c:	6013      	str	r3, [r2, #0]
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	200002e4 	.word	0x200002e4
 800199c:	20000008 	.word	0x20000008

080019a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return uwTick;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_GetTick+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	200002e4 	.word	0x200002e4

080019b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	609a      	str	r2, [r3, #8]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	609a      	str	r2, [r3, #8]
}
 80019f8:	bf00      	nop
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
 8001a2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	3360      	adds	r3, #96	; 0x60
 8001a32:	461a      	mov	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <LL_ADC_SetOffset+0x44>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a58:	bf00      	nop
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	03fff000 	.word	0x03fff000

08001a68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3360      	adds	r3, #96	; 0x60
 8001a76:	461a      	mov	r2, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3360      	adds	r3, #96	; 0x60
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001abe:	bf00      	nop
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b087      	sub	sp, #28
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	60b9      	str	r1, [r7, #8]
 8001ad4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	3360      	adds	r3, #96	; 0x60
 8001ada:	461a      	mov	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	431a      	orrs	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001af4:	bf00      	nop
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b087      	sub	sp, #28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3360      	adds	r3, #96	; 0x60
 8001b10:	461a      	mov	r2, r3
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	431a      	orrs	r2, r3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b2a:	bf00      	nop
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b36:	b480      	push	{r7}
 8001b38:	b083      	sub	sp, #12
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	615a      	str	r2, [r3, #20]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b087      	sub	sp, #28
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	3330      	adds	r3, #48	; 0x30
 8001b92:	461a      	mov	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	4413      	add	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	211f      	movs	r1, #31
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	401a      	ands	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	0e9b      	lsrs	r3, r3, #26
 8001bba:	f003 011f 	and.w	r1, r3, #31
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bce:	bf00      	nop
 8001bd0:	371c      	adds	r7, #28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	3314      	adds	r3, #20
 8001c10:	461a      	mov	r2, r3
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	0e5b      	lsrs	r3, r3, #25
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	4413      	add	r3, r2
 8001c1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	0d1b      	lsrs	r3, r3, #20
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	2107      	movs	r1, #7
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	401a      	ands	r2, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	0d1b      	lsrs	r3, r3, #20
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	431a      	orrs	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c4a:	bf00      	nop
 8001c4c:	371c      	adds	r7, #28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d10a      	bne.n	8001c82 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c78:	431a      	orrs	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001c80:	e00a      	b.n	8001c98 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	401a      	ands	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	407f0000 	.word	0x407f0000

08001ca8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001cf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6093      	str	r3, [r2, #8]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d18:	d101      	bne.n	8001d1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d68:	d101      	bne.n	8001d6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d90:	f043 0201 	orr.w	r2, r3, #1
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <LL_ADC_IsEnabled+0x18>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e000      	b.n	8001dbe <LL_ADC_IsEnabled+0x1a>
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dda:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dde:	f043 0204 	orr.w	r2, r3, #4
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d101      	bne.n	8001e0a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d101      	bne.n	8001e30 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e40:	b590      	push	{r4, r7, lr}
 8001e42:	b089      	sub	sp, #36	; 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e1af      	b.n	80021ba <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d109      	bne.n	8001e7c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff fa31 	bl	80012d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff3f 	bl	8001d04 <LL_ADC_IsDeepPowerDownEnabled>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d004      	beq.n	8001e96 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff25 	bl	8001ce0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff5a 	bl	8001d54 <LL_ADC_IsInternalRegulatorEnabled>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d115      	bne.n	8001ed2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ff3e 	bl	8001d2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eb0:	4b9f      	ldr	r3, [pc, #636]	; (8002130 <HAL_ADC_Init+0x2f0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	099b      	lsrs	r3, r3, #6
 8001eb6:	4a9f      	ldr	r2, [pc, #636]	; (8002134 <HAL_ADC_Init+0x2f4>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	099b      	lsrs	r3, r3, #6
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ec4:	e002      	b.n	8001ecc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f9      	bne.n	8001ec6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff3c 	bl	8001d54 <LL_ADC_IsInternalRegulatorEnabled>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10d      	bne.n	8001efe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	f043 0210 	orr.w	r2, r3, #16
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef2:	f043 0201 	orr.w	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff ff75 	bl	8001df2 <LL_ADC_REG_IsConversionOngoing>
 8001f08:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f040 8148 	bne.w	80021a8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f040 8144 	bne.w	80021a8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f28:	f043 0202 	orr.w	r2, r3, #2
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff ff35 	bl	8001da4 <LL_ADC_IsEnabled>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d141      	bne.n	8001fc4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f48:	d004      	beq.n	8001f54 <HAL_ADC_Init+0x114>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a7a      	ldr	r2, [pc, #488]	; (8002138 <HAL_ADC_Init+0x2f8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d10f      	bne.n	8001f74 <HAL_ADC_Init+0x134>
 8001f54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f58:	f7ff ff24 	bl	8001da4 <LL_ADC_IsEnabled>
 8001f5c:	4604      	mov	r4, r0
 8001f5e:	4876      	ldr	r0, [pc, #472]	; (8002138 <HAL_ADC_Init+0x2f8>)
 8001f60:	f7ff ff20 	bl	8001da4 <LL_ADC_IsEnabled>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4323      	orrs	r3, r4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	e012      	b.n	8001f9a <HAL_ADC_Init+0x15a>
 8001f74:	4871      	ldr	r0, [pc, #452]	; (800213c <HAL_ADC_Init+0x2fc>)
 8001f76:	f7ff ff15 	bl	8001da4 <LL_ADC_IsEnabled>
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	4870      	ldr	r0, [pc, #448]	; (8002140 <HAL_ADC_Init+0x300>)
 8001f7e:	f7ff ff11 	bl	8001da4 <LL_ADC_IsEnabled>
 8001f82:	4603      	mov	r3, r0
 8001f84:	431c      	orrs	r4, r3
 8001f86:	486f      	ldr	r0, [pc, #444]	; (8002144 <HAL_ADC_Init+0x304>)
 8001f88:	f7ff ff0c 	bl	8001da4 <LL_ADC_IsEnabled>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4323      	orrs	r3, r4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d012      	beq.n	8001fc4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fa6:	d004      	beq.n	8001fb2 <HAL_ADC_Init+0x172>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a62      	ldr	r2, [pc, #392]	; (8002138 <HAL_ADC_Init+0x2f8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_Init+0x176>
 8001fb2:	4a65      	ldr	r2, [pc, #404]	; (8002148 <HAL_ADC_Init+0x308>)
 8001fb4:	e000      	b.n	8001fb8 <HAL_ADC_Init+0x178>
 8001fb6:	4a65      	ldr	r2, [pc, #404]	; (800214c <HAL_ADC_Init+0x30c>)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	f7ff fcfa 	bl	80019b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7f5b      	ldrb	r3, [r3, #29]
 8001fc8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001fd4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001fda:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fe2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d106      	bne.n	8002000 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	045b      	lsls	r3, r3, #17
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	2b00      	cmp	r3, #0
 8002006:	d009      	beq.n	800201c <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	4b4b      	ldr	r3, [pc, #300]	; (8002150 <HAL_ADC_Init+0x310>)
 8002024:	4013      	ands	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	69b9      	ldr	r1, [r7, #24]
 800202c:	430b      	orrs	r3, r1
 800202e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fed1 	bl	8001df2 <LL_ADC_REG_IsConversionOngoing>
 8002050:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fede 	bl	8001e18 <LL_ADC_INJ_IsConversionOngoing>
 800205c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d17f      	bne.n	8002164 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d17c      	bne.n	8002164 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800206e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002076:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002086:	f023 0302 	bic.w	r3, r3, #2
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	69b9      	ldr	r1, [r7, #24]
 8002090:	430b      	orrs	r3, r1
 8002092:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d017      	beq.n	80020cc <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6911      	ldr	r1, [r2, #16]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	430b      	orrs	r3, r1
 80020c6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80020ca:	e013      	b.n	80020f4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020f0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d12a      	bne.n	8002154 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002108:	f023 0304 	bic.w	r3, r3, #4
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002114:	4311      	orrs	r1, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800211a:	4311      	orrs	r1, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002120:	430a      	orrs	r2, r1
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	611a      	str	r2, [r3, #16]
 800212e:	e019      	b.n	8002164 <HAL_ADC_Init+0x324>
 8002130:	20000000 	.word	0x20000000
 8002134:	053e2d63 	.word	0x053e2d63
 8002138:	50000100 	.word	0x50000100
 800213c:	50000400 	.word	0x50000400
 8002140:	50000500 	.word	0x50000500
 8002144:	50000600 	.word	0x50000600
 8002148:	50000300 	.word	0x50000300
 800214c:	50000700 	.word	0x50000700
 8002150:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d10c      	bne.n	8002186 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f023 010f 	bic.w	r1, r3, #15
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	1e5a      	subs	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	430a      	orrs	r2, r1
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
 8002184:	e007      	b.n	8002196 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 020f 	bic.w	r2, r2, #15
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219a:	f023 0303 	bic.w	r3, r3, #3
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80021a6:	e007      	b.n	80021b8 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ac:	f043 0210 	orr.w	r2, r3, #16
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	; 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd90      	pop	{r4, r7, pc}
 80021c2:	bf00      	nop

080021c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021d8:	d004      	beq.n	80021e4 <HAL_ADC_Start_DMA+0x20>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a5a      	ldr	r2, [pc, #360]	; (8002348 <HAL_ADC_Start_DMA+0x184>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d101      	bne.n	80021e8 <HAL_ADC_Start_DMA+0x24>
 80021e4:	4b59      	ldr	r3, [pc, #356]	; (800234c <HAL_ADC_Start_DMA+0x188>)
 80021e6:	e000      	b.n	80021ea <HAL_ADC_Start_DMA+0x26>
 80021e8:	4b59      	ldr	r3, [pc, #356]	; (8002350 <HAL_ADC_Start_DMA+0x18c>)
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7ff fd5c 	bl	8001ca8 <LL_ADC_GetMultimode>
 80021f0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff fdfb 	bl	8001df2 <LL_ADC_REG_IsConversionOngoing>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f040 809b 	bne.w	800233a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_ADC_Start_DMA+0x4e>
 800220e:	2302      	movs	r3, #2
 8002210:	e096      	b.n	8002340 <HAL_ADC_Start_DMA+0x17c>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a4d      	ldr	r2, [pc, #308]	; (8002354 <HAL_ADC_Start_DMA+0x190>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d008      	beq.n	8002236 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	2b05      	cmp	r3, #5
 800222e:	d002      	beq.n	8002236 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	2b09      	cmp	r3, #9
 8002234:	d17a      	bne.n	800232c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 ff60 	bl	80030fc <ADC_Enable>
 800223c:	4603      	mov	r3, r0
 800223e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002240:	7dfb      	ldrb	r3, [r7, #23]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d16d      	bne.n	8002322 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a3a      	ldr	r2, [pc, #232]	; (8002348 <HAL_ADC_Start_DMA+0x184>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d009      	beq.n	8002278 <HAL_ADC_Start_DMA+0xb4>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a3b      	ldr	r2, [pc, #236]	; (8002358 <HAL_ADC_Start_DMA+0x194>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d002      	beq.n	8002274 <HAL_ADC_Start_DMA+0xb0>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	e003      	b.n	800227c <HAL_ADC_Start_DMA+0xb8>
 8002274:	4b39      	ldr	r3, [pc, #228]	; (800235c <HAL_ADC_Start_DMA+0x198>)
 8002276:	e001      	b.n	800227c <HAL_ADC_Start_DMA+0xb8>
 8002278:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	4293      	cmp	r3, r2
 8002282:	d002      	beq.n	800228a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d105      	bne.n	8002296 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a6:	f023 0206 	bic.w	r2, r3, #6
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	661a      	str	r2, [r3, #96]	; 0x60
 80022ae:	e002      	b.n	80022b6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ba:	4a29      	ldr	r2, [pc, #164]	; (8002360 <HAL_ADC_Start_DMA+0x19c>)
 80022bc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c2:	4a28      	ldr	r2, [pc, #160]	; (8002364 <HAL_ADC_Start_DMA+0x1a0>)
 80022c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ca:	4a27      	ldr	r2, [pc, #156]	; (8002368 <HAL_ADC_Start_DMA+0x1a4>)
 80022cc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	221c      	movs	r2, #28
 80022d4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0210 	orr.w	r2, r2, #16
 80022ec:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68da      	ldr	r2, [r3, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 0201 	orr.w	r2, r2, #1
 80022fc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	3340      	adds	r3, #64	; 0x40
 8002308:	4619      	mov	r1, r3
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f002 fa8d 	bl	800482c <HAL_DMA_Start_IT>
 8002312:	4603      	mov	r3, r0
 8002314:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fd55 	bl	8001dca <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002320:	e00d      	b.n	800233e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800232a:	e008      	b.n	800233e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002338:	e001      	b.n	800233e <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800233a:	2302      	movs	r3, #2
 800233c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800233e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	50000100 	.word	0x50000100
 800234c:	50000300 	.word	0x50000300
 8002350:	50000700 	.word	0x50000700
 8002354:	50000600 	.word	0x50000600
 8002358:	50000500 	.word	0x50000500
 800235c:	50000400 	.word	0x50000400
 8002360:	080031c1 	.word	0x080031c1
 8002364:	08003299 	.word	0x08003299
 8002368:	080032b5 	.word	0x080032b5

0800236c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002374:	2300      	movs	r3, #0
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002390:	d004      	beq.n	800239c <HAL_ADC_IRQHandler+0x30>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a8e      	ldr	r2, [pc, #568]	; (80025d0 <HAL_ADC_IRQHandler+0x264>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d101      	bne.n	80023a0 <HAL_ADC_IRQHandler+0x34>
 800239c:	4b8d      	ldr	r3, [pc, #564]	; (80025d4 <HAL_ADC_IRQHandler+0x268>)
 800239e:	e000      	b.n	80023a2 <HAL_ADC_IRQHandler+0x36>
 80023a0:	4b8d      	ldr	r3, [pc, #564]	; (80025d8 <HAL_ADC_IRQHandler+0x26c>)
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fc80 	bl	8001ca8 <LL_ADC_GetMultimode>
 80023a8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d017      	beq.n	80023e4 <HAL_ADC_IRQHandler+0x78>
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d012      	beq.n	80023e4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d105      	bne.n	80023d6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f001 fa32 	bl	8003840 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2202      	movs	r2, #2
 80023e2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d004      	beq.n	80023f8 <HAL_ADC_IRQHandler+0x8c>
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10b      	bne.n	8002410 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8094 	beq.w	800252c <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 808e 	beq.w	800252c <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	f003 0310 	and.w	r3, r3, #16
 8002418:	2b00      	cmp	r3, #0
 800241a:	d105      	bne.n	8002428 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fb95 	bl	8001b5c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d072      	beq.n	800251e <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a64      	ldr	r2, [pc, #400]	; (80025d0 <HAL_ADC_IRQHandler+0x264>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d009      	beq.n	8002456 <HAL_ADC_IRQHandler+0xea>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a65      	ldr	r2, [pc, #404]	; (80025dc <HAL_ADC_IRQHandler+0x270>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d002      	beq.n	8002452 <HAL_ADC_IRQHandler+0xe6>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	e003      	b.n	800245a <HAL_ADC_IRQHandler+0xee>
 8002452:	4b63      	ldr	r3, [pc, #396]	; (80025e0 <HAL_ADC_IRQHandler+0x274>)
 8002454:	e001      	b.n	800245a <HAL_ADC_IRQHandler+0xee>
 8002456:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	4293      	cmp	r3, r2
 8002460:	d008      	beq.n	8002474 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b05      	cmp	r3, #5
 800246c:	d002      	beq.n	8002474 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b09      	cmp	r3, #9
 8002472:	d104      	bne.n	800247e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	623b      	str	r3, [r7, #32]
 800247c:	e014      	b.n	80024a8 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a53      	ldr	r2, [pc, #332]	; (80025d0 <HAL_ADC_IRQHandler+0x264>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d009      	beq.n	800249c <HAL_ADC_IRQHandler+0x130>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a53      	ldr	r2, [pc, #332]	; (80025dc <HAL_ADC_IRQHandler+0x270>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d002      	beq.n	8002498 <HAL_ADC_IRQHandler+0x12c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	e003      	b.n	80024a0 <HAL_ADC_IRQHandler+0x134>
 8002498:	4b51      	ldr	r3, [pc, #324]	; (80025e0 <HAL_ADC_IRQHandler+0x274>)
 800249a:	e001      	b.n	80024a0 <HAL_ADC_IRQHandler+0x134>
 800249c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024a0:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d135      	bne.n	800251e <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d12e      	bne.n	800251e <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fc94 	bl	8001df2 <LL_ADC_REG_IsConversionOngoing>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d11a      	bne.n	8002506 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 020c 	bic.w	r2, r2, #12
 80024de:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d112      	bne.n	800251e <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fc:	f043 0201 	orr.w	r2, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	65da      	str	r2, [r3, #92]	; 0x5c
 8002504:	e00b      	b.n	800251e <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	f043 0210 	orr.w	r2, r3, #16
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002516:	f043 0201 	orr.w	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f984 	bl	800282c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	220c      	movs	r2, #12
 800252a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0320 	and.w	r3, r3, #32
 8002532:	2b00      	cmp	r3, #0
 8002534:	d004      	beq.n	8002540 <HAL_ADC_IRQHandler+0x1d4>
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10b      	bne.n	8002558 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002546:	2b00      	cmp	r3, #0
 8002548:	f000 80b3 	beq.w	80026b2 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80ad 	beq.w	80026b2 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fb30 	bl	8001bda <LL_ADC_INJ_IsTriggerSourceSWStart>
 800257a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff faeb 	bl	8001b5c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002586:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a10      	ldr	r2, [pc, #64]	; (80025d0 <HAL_ADC_IRQHandler+0x264>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d009      	beq.n	80025a6 <HAL_ADC_IRQHandler+0x23a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a11      	ldr	r2, [pc, #68]	; (80025dc <HAL_ADC_IRQHandler+0x270>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d002      	beq.n	80025a2 <HAL_ADC_IRQHandler+0x236>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	e003      	b.n	80025aa <HAL_ADC_IRQHandler+0x23e>
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <HAL_ADC_IRQHandler+0x274>)
 80025a4:	e001      	b.n	80025aa <HAL_ADC_IRQHandler+0x23e>
 80025a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d008      	beq.n	80025c4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d002      	beq.n	80025c4 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	2b07      	cmp	r3, #7
 80025c2:	d10f      	bne.n	80025e4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	623b      	str	r3, [r7, #32]
 80025cc:	e01f      	b.n	800260e <HAL_ADC_IRQHandler+0x2a2>
 80025ce:	bf00      	nop
 80025d0:	50000100 	.word	0x50000100
 80025d4:	50000300 	.word	0x50000300
 80025d8:	50000700 	.word	0x50000700
 80025dc:	50000500 	.word	0x50000500
 80025e0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a8b      	ldr	r2, [pc, #556]	; (8002818 <HAL_ADC_IRQHandler+0x4ac>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d009      	beq.n	8002602 <HAL_ADC_IRQHandler+0x296>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a8a      	ldr	r2, [pc, #552]	; (800281c <HAL_ADC_IRQHandler+0x4b0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d002      	beq.n	80025fe <HAL_ADC_IRQHandler+0x292>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	e003      	b.n	8002606 <HAL_ADC_IRQHandler+0x29a>
 80025fe:	4b88      	ldr	r3, [pc, #544]	; (8002820 <HAL_ADC_IRQHandler+0x4b4>)
 8002600:	e001      	b.n	8002606 <HAL_ADC_IRQHandler+0x29a>
 8002602:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002606:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d047      	beq.n	80026a4 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d007      	beq.n	800262e <HAL_ADC_IRQHandler+0x2c2>
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d03f      	beq.n	80026a4 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800262a:	2b00      	cmp	r3, #0
 800262c:	d13a      	bne.n	80026a4 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002638:	2b40      	cmp	r3, #64	; 0x40
 800263a:	d133      	bne.n	80026a4 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d12e      	bne.n	80026a4 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fbe4 	bl	8001e18 <LL_ADC_INJ_IsConversionOngoing>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d11a      	bne.n	800268c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002664:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d112      	bne.n	80026a4 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002682:	f043 0201 	orr.w	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	65da      	str	r2, [r3, #92]	; 0x5c
 800268a:	e00b      	b.n	80026a4 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002690:	f043 0210 	orr.w	r2, r3, #16
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f001 f8a3 	bl	80037f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2260      	movs	r2, #96	; 0x60
 80026b0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d011      	beq.n	80026e0 <HAL_ADC_IRQHandler+0x374>
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00c      	beq.n	80026e0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f8be 	bl	8002854 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2280      	movs	r2, #128	; 0x80
 80026de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d012      	beq.n	8002710 <HAL_ADC_IRQHandler+0x3a4>
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00d      	beq.n	8002710 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f001 f889 	bl	8003818 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800270e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002716:	2b00      	cmp	r3, #0
 8002718:	d012      	beq.n	8002740 <HAL_ADC_IRQHandler+0x3d4>
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00d      	beq.n	8002740 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002728:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f001 f87b 	bl	800382c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800273e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	d043      	beq.n	80027d2 <HAL_ADC_IRQHandler+0x466>
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	d03e      	beq.n	80027d2 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800275c:	2301      	movs	r3, #1
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
 8002760:	e021      	b.n	80027a6 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002770:	d004      	beq.n	800277c <HAL_ADC_IRQHandler+0x410>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a28      	ldr	r2, [pc, #160]	; (8002818 <HAL_ADC_IRQHandler+0x4ac>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d101      	bne.n	8002780 <HAL_ADC_IRQHandler+0x414>
 800277c:	4b29      	ldr	r3, [pc, #164]	; (8002824 <HAL_ADC_IRQHandler+0x4b8>)
 800277e:	e000      	b.n	8002782 <HAL_ADC_IRQHandler+0x416>
 8002780:	4b29      	ldr	r3, [pc, #164]	; (8002828 <HAL_ADC_IRQHandler+0x4bc>)
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fa9e 	bl	8001cc4 <LL_ADC_GetMultiDMATransfer>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800278e:	2301      	movs	r3, #1
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
 8002792:	e008      	b.n	80027a6 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80027a2:	2301      	movs	r3, #1
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d10e      	bne.n	80027ca <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027bc:	f043 0202 	orr.w	r2, r3, #2
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f84f 	bl	8002868 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2210      	movs	r2, #16
 80027d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d018      	beq.n	800280e <HAL_ADC_IRQHandler+0x4a2>
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d013      	beq.n	800280e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f6:	f043 0208 	orr.w	r2, r3, #8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002806:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fffb 	bl	8003804 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800280e:	bf00      	nop
 8002810:	3728      	adds	r7, #40	; 0x28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	50000100 	.word	0x50000100
 800281c:	50000500 	.word	0x50000500
 8002820:	50000400 	.word	0x50000400
 8002824:	50000300 	.word	0x50000300
 8002828:	50000700 	.word	0x50000700

0800282c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b0b6      	sub	sp, #216	; 0xd8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002896:	2b01      	cmp	r3, #1
 8002898:	d102      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x24>
 800289a:	2302      	movs	r3, #2
 800289c:	f000 bc13 	b.w	80030c6 <HAL_ADC_ConfigChannel+0x84a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff faa0 	bl	8001df2 <LL_ADC_REG_IsConversionOngoing>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f040 83f3 	bne.w	80030a0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6859      	ldr	r1, [r3, #4]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	461a      	mov	r2, r3
 80028c8:	f7ff f95b 	bl	8001b82 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fa8e 	bl	8001df2 <LL_ADC_REG_IsConversionOngoing>
 80028d6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fa9a 	bl	8001e18 <LL_ADC_INJ_IsConversionOngoing>
 80028e4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f040 81d9 	bne.w	8002ca4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 81d4 	bne.w	8002ca4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002904:	d10f      	bne.n	8002926 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	4619      	mov	r1, r3
 8002912:	f7ff f975 	bl	8001c00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff f909 	bl	8001b36 <LL_ADC_SetSamplingTimeCommonConfig>
 8002924:	e00e      	b.n	8002944 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	6819      	ldr	r1, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	461a      	mov	r2, r3
 8002934:	f7ff f964 	bl	8001c00 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff f8f9 	bl	8001b36 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	08db      	lsrs	r3, r3, #3
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b04      	cmp	r3, #4
 8002964:	d022      	beq.n	80029ac <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6919      	ldr	r1, [r3, #16]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002976:	f7ff f853 	bl	8001a20 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6919      	ldr	r1, [r3, #16]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	461a      	mov	r2, r3
 8002988:	f7ff f89f 	bl	8001aca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	6919      	ldr	r1, [r3, #16]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	7f1b      	ldrb	r3, [r3, #28]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d102      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x126>
 800299c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029a0:	e000      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x128>
 80029a2:	2300      	movs	r3, #0
 80029a4:	461a      	mov	r2, r3
 80029a6:	f7ff f8ab 	bl	8001b00 <LL_ADC_SetOffsetSaturation>
 80029aa:	e17b      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2100      	movs	r1, #0
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff f858 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 80029b8:	4603      	mov	r3, r0
 80029ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x15c>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2100      	movs	r1, #0
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff f84d 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 80029ce:	4603      	mov	r3, r0
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	f003 021f 	and.w	r2, r3, #31
 80029d6:	e01e      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x19a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2100      	movs	r1, #0
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff f842 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 80029e4:	4603      	mov	r3, r0
 80029e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002a06:	2320      	movs	r3, #32
 8002a08:	e004      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002a0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x1b2>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	0e9b      	lsrs	r3, r3, #26
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	e018      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x1e4>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002a52:	2320      	movs	r3, #32
 8002a54:	e004      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002a56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d106      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff f811 	bl	8001a94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2101      	movs	r1, #1
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fff5 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10a      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x222>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fe ffea 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 8002a94:	4603      	mov	r3, r0
 8002a96:	0e9b      	lsrs	r3, r3, #26
 8002a98:	f003 021f 	and.w	r2, r3, #31
 8002a9c:	e01e      	b.n	8002adc <HAL_ADC_ConfigChannel+0x260>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe ffdf 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ab4:	fa93 f3a3 	rbit	r3, r3
 8002ab8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002abc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002acc:	2320      	movs	r3, #32
 8002ace:	e004      	b.n	8002ada <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002ad0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ad4:	fab3 f383 	clz	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x278>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	0e9b      	lsrs	r3, r3, #26
 8002aee:	f003 031f 	and.w	r3, r3, #31
 8002af2:	e018      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x2aa>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002b18:	2320      	movs	r3, #32
 8002b1a:	e004      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002b1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d106      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2101      	movs	r1, #1
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe ffae 	bl	8001a94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe ff92 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10a      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x2e8>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2102      	movs	r1, #2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe ff87 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	0e9b      	lsrs	r3, r3, #26
 8002b5e:	f003 021f 	and.w	r2, r3, #31
 8002b62:	e01e      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x326>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2102      	movs	r1, #2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe ff7c 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b7a:	fa93 f3a3 	rbit	r3, r3
 8002b7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002b92:	2320      	movs	r3, #32
 8002b94:	e004      	b.n	8002ba0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002b96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d105      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x33e>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	0e9b      	lsrs	r3, r3, #26
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	e016      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x36c>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002bcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002bda:	2320      	movs	r3, #32
 8002bdc:	e004      	b.n	8002be8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d106      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe ff4d 	bl	8001a94 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2103      	movs	r1, #3
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe ff31 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <HAL_ADC_ConfigChannel+0x3aa>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2103      	movs	r1, #3
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fe ff26 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	0e9b      	lsrs	r3, r3, #26
 8002c20:	f003 021f 	and.w	r2, r3, #31
 8002c24:	e017      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x3da>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2103      	movs	r1, #3
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe ff1b 	bl	8001a68 <LL_ADC_GetOffsetChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c40:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002c48:	2320      	movs	r3, #32
 8002c4a:	e003      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c4e:	fab3 f383 	clz	r3, r3
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x3f2>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0e9b      	lsrs	r3, r3, #26
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	e011      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x416>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002c86:	2320      	movs	r3, #32
 8002c88:	e003      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8c:	fab3 f383 	clz	r3, r3
 8002c90:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d106      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2103      	movs	r1, #3
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fef8 	bl	8001a94 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff f87b 	bl	8001da4 <LL_ADC_IsEnabled>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f040 813d 	bne.w	8002f30 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6819      	ldr	r1, [r3, #0]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f7fe ffc8 	bl	8001c58 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4aa2      	ldr	r2, [pc, #648]	; (8002f58 <HAL_ADC_ConfigChannel+0x6dc>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	f040 812e 	bne.w	8002f30 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10b      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x480>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	0e9b      	lsrs	r3, r3, #26
 8002cea:	3301      	adds	r3, #1
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	2b09      	cmp	r3, #9
 8002cf2:	bf94      	ite	ls
 8002cf4:	2301      	movls	r3, #1
 8002cf6:	2300      	movhi	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e019      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x4b4>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d04:	fa93 f3a3 	rbit	r3, r3
 8002d08:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d0c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002d14:	2320      	movs	r3, #32
 8002d16:	e003      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d1a:	fab3 f383 	clz	r3, r3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	2b09      	cmp	r3, #9
 8002d28:	bf94      	ite	ls
 8002d2a:	2301      	movls	r3, #1
 8002d2c:	2300      	movhi	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d079      	beq.n	8002e28 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d107      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x4d4>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	3301      	adds	r3, #1
 8002d48:	069b      	lsls	r3, r3, #26
 8002d4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d4e:	e015      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x500>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d60:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002d68:	2320      	movs	r3, #32
 8002d6a:	e003      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	3301      	adds	r3, #1
 8002d76:	069b      	lsls	r3, r3, #26
 8002d78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d109      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x520>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	0e9b      	lsrs	r3, r3, #26
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f003 031f 	and.w	r3, r3, #31
 8002d94:	2101      	movs	r1, #1
 8002d96:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9a:	e017      	b.n	8002dcc <HAL_ADC_ConfigChannel+0x550>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da4:	fa93 f3a3 	rbit	r3, r3
 8002da8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002db4:	2320      	movs	r3, #32
 8002db6:	e003      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dcc:	ea42 0103 	orr.w	r1, r2, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x576>
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	0e9b      	lsrs	r3, r3, #26
 8002de2:	3301      	adds	r3, #1
 8002de4:	f003 021f 	and.w	r2, r3, #31
 8002de8:	4613      	mov	r3, r2
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4413      	add	r3, r2
 8002dee:	051b      	lsls	r3, r3, #20
 8002df0:	e018      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x5a8>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002e0a:	2320      	movs	r3, #32
 8002e0c:	e003      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e10:	fab3 f383 	clz	r3, r3
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	3301      	adds	r3, #1
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e24:	430b      	orrs	r3, r1
 8002e26:	e07e      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d107      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x5c8>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	0e9b      	lsrs	r3, r3, #26
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	069b      	lsls	r3, r3, #26
 8002e3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e42:	e015      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x5f4>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	e003      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	3301      	adds	r3, #1
 8002e6a:	069b      	lsls	r3, r3, #26
 8002e6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x614>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	0e9b      	lsrs	r3, r3, #26
 8002e82:	3301      	adds	r3, #1
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	2101      	movs	r1, #1
 8002e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8e:	e017      	b.n	8002ec0 <HAL_ADC_ConfigChannel+0x644>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	61fb      	str	r3, [r7, #28]
  return result;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	e003      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	2101      	movs	r1, #1
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	ea42 0103 	orr.w	r1, r2, r3
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10d      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x670>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	0e9b      	lsrs	r3, r3, #26
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	f003 021f 	and.w	r2, r3, #31
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3b1e      	subs	r3, #30
 8002ee4:	051b      	lsls	r3, r3, #20
 8002ee6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eea:	e01b      	b.n	8002f24 <HAL_ADC_ConfigChannel+0x6a8>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	613b      	str	r3, [r7, #16]
  return result;
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002f04:	2320      	movs	r3, #32
 8002f06:	e003      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	fab3 f383 	clz	r3, r3
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	3301      	adds	r3, #1
 8002f12:	f003 021f 	and.w	r2, r3, #31
 8002f16:	4613      	mov	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3b1e      	subs	r3, #30
 8002f1e:	051b      	lsls	r3, r3, #20
 8002f20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f24:	430b      	orrs	r3, r1
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	6892      	ldr	r2, [r2, #8]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f7fe fe68 	bl	8001c00 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_ADC_ConfigChannel+0x6e0>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80be 	beq.w	80030ba <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f46:	d004      	beq.n	8002f52 <HAL_ADC_ConfigChannel+0x6d6>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a04      	ldr	r2, [pc, #16]	; (8002f60 <HAL_ADC_ConfigChannel+0x6e4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d10a      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x6ec>
 8002f52:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <HAL_ADC_ConfigChannel+0x6e8>)
 8002f54:	e009      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x6ee>
 8002f56:	bf00      	nop
 8002f58:	407f0000 	.word	0x407f0000
 8002f5c:	80080000 	.word	0x80080000
 8002f60:	50000100 	.word	0x50000100
 8002f64:	50000300 	.word	0x50000300
 8002f68:	4b59      	ldr	r3, [pc, #356]	; (80030d0 <HAL_ADC_ConfigChannel+0x854>)
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fd4a 	bl	8001a04 <LL_ADC_GetCommonPathInternalCh>
 8002f70:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a56      	ldr	r2, [pc, #344]	; (80030d4 <HAL_ADC_ConfigChannel+0x858>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d004      	beq.n	8002f88 <HAL_ADC_ConfigChannel+0x70c>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a55      	ldr	r2, [pc, #340]	; (80030d8 <HAL_ADC_ConfigChannel+0x85c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d13a      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d134      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f9c:	d005      	beq.n	8002faa <HAL_ADC_ConfigChannel+0x72e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a4e      	ldr	r2, [pc, #312]	; (80030dc <HAL_ADC_ConfigChannel+0x860>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	f040 8085 	bne.w	80030b4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fb2:	d004      	beq.n	8002fbe <HAL_ADC_ConfigChannel+0x742>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a49      	ldr	r2, [pc, #292]	; (80030e0 <HAL_ADC_ConfigChannel+0x864>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x746>
 8002fbe:	4a49      	ldr	r2, [pc, #292]	; (80030e4 <HAL_ADC_ConfigChannel+0x868>)
 8002fc0:	e000      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x748>
 8002fc2:	4a43      	ldr	r2, [pc, #268]	; (80030d0 <HAL_ADC_ConfigChannel+0x854>)
 8002fc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	f7fe fd05 	bl	80019de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fd4:	4b44      	ldr	r3, [pc, #272]	; (80030e8 <HAL_ADC_ConfigChannel+0x86c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	099b      	lsrs	r3, r3, #6
 8002fda:	4a44      	ldr	r2, [pc, #272]	; (80030ec <HAL_ADC_ConfigChannel+0x870>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	099b      	lsrs	r3, r3, #6
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fee:	e002      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f9      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ffc:	e05a      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a3b      	ldr	r2, [pc, #236]	; (80030f0 <HAL_ADC_ConfigChannel+0x874>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d125      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x7d8>
 8003008:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800300c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d11f      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a31      	ldr	r2, [pc, #196]	; (80030e0 <HAL_ADC_ConfigChannel+0x864>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d104      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x7ac>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a34      	ldr	r2, [pc, #208]	; (80030f4 <HAL_ADC_ConfigChannel+0x878>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d047      	beq.n	80030b8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003030:	d004      	beq.n	800303c <HAL_ADC_ConfigChannel+0x7c0>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a2a      	ldr	r2, [pc, #168]	; (80030e0 <HAL_ADC_ConfigChannel+0x864>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d101      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x7c4>
 800303c:	4a29      	ldr	r2, [pc, #164]	; (80030e4 <HAL_ADC_ConfigChannel+0x868>)
 800303e:	e000      	b.n	8003042 <HAL_ADC_ConfigChannel+0x7c6>
 8003040:	4a23      	ldr	r2, [pc, #140]	; (80030d0 <HAL_ADC_ConfigChannel+0x854>)
 8003042:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800304a:	4619      	mov	r1, r3
 800304c:	4610      	mov	r0, r2
 800304e:	f7fe fcc6 	bl	80019de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003052:	e031      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a27      	ldr	r2, [pc, #156]	; (80030f8 <HAL_ADC_ConfigChannel+0x87c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d12d      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800305e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d127      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1c      	ldr	r2, [pc, #112]	; (80030e0 <HAL_ADC_ConfigChannel+0x864>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d022      	beq.n	80030ba <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800307c:	d004      	beq.n	8003088 <HAL_ADC_ConfigChannel+0x80c>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a17      	ldr	r2, [pc, #92]	; (80030e0 <HAL_ADC_ConfigChannel+0x864>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d101      	bne.n	800308c <HAL_ADC_ConfigChannel+0x810>
 8003088:	4a16      	ldr	r2, [pc, #88]	; (80030e4 <HAL_ADC_ConfigChannel+0x868>)
 800308a:	e000      	b.n	800308e <HAL_ADC_ConfigChannel+0x812>
 800308c:	4a10      	ldr	r2, [pc, #64]	; (80030d0 <HAL_ADC_ConfigChannel+0x854>)
 800308e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003092:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003096:	4619      	mov	r1, r3
 8003098:	4610      	mov	r0, r2
 800309a:	f7fe fca0 	bl	80019de <LL_ADC_SetCommonPathInternalCh>
 800309e:	e00c      	b.n	80030ba <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a4:	f043 0220 	orr.w	r2, r3, #32
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80030b2:	e002      	b.n	80030ba <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030b4:	bf00      	nop
 80030b6:	e000      	b.n	80030ba <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80030c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	37d8      	adds	r7, #216	; 0xd8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	50000700 	.word	0x50000700
 80030d4:	c3210000 	.word	0xc3210000
 80030d8:	90c00010 	.word	0x90c00010
 80030dc:	50000600 	.word	0x50000600
 80030e0:	50000100 	.word	0x50000100
 80030e4:	50000300 	.word	0x50000300
 80030e8:	20000000 	.word	0x20000000
 80030ec:	053e2d63 	.word	0x053e2d63
 80030f0:	c7520000 	.word	0xc7520000
 80030f4:	50000500 	.word	0x50000500
 80030f8:	cb840000 	.word	0xcb840000

080030fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7fe fe4b 	bl	8001da4 <LL_ADC_IsEnabled>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d14d      	bne.n	80031b0 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689a      	ldr	r2, [r3, #8]
 800311a:	4b28      	ldr	r3, [pc, #160]	; (80031bc <ADC_Enable+0xc0>)
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003126:	f043 0210 	orr.w	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003132:	f043 0201 	orr.w	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e039      	b.n	80031b2 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe fe1a 	bl	8001d7c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003148:	f7fe fc2a 	bl	80019a0 <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800314e:	e028      	b.n	80031a2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe fe25 	bl	8001da4 <LL_ADC_IsEnabled>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d104      	bne.n	800316a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f7fe fe09 	bl	8001d7c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800316a:	f7fe fc19 	bl	80019a0 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b02      	cmp	r3, #2
 8003176:	d914      	bls.n	80031a2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b01      	cmp	r3, #1
 8003184:	d00d      	beq.n	80031a2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	f043 0210 	orr.w	r2, r3, #16
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003196:	f043 0201 	orr.w	r2, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e007      	b.n	80031b2 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d1cf      	bne.n	8003150 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	8000003f 	.word	0x8000003f

080031c0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d14b      	bne.n	8003272 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d021      	beq.n	8003238 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fe fcaf 	bl	8001b5c <LL_ADC_REG_IsTriggerSourceSWStart>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d032      	beq.n	800326a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d12b      	bne.n	800326a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d11f      	bne.n	800326a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322e:	f043 0201 	orr.w	r2, r3, #1
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	65da      	str	r2, [r3, #92]	; 0x5c
 8003236:	e018      	b.n	800326a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d111      	bne.n	800326a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d105      	bne.n	800326a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f7ff fade 	bl	800282c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003270:	e00e      	b.n	8003290 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f7ff faf2 	bl	8002868 <HAL_ADC_ErrorCallback>
}
 8003284:	e004      	b.n	8003290 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	4798      	blx	r3
}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7ff faca 	bl	8002840 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d2:	f043 0204 	orr.w	r2, r3, #4
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f7ff fac4 	bl	8002868 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032e0:	bf00      	nop
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <LL_ADC_SetCommonPathInternalCh>:
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	609a      	str	r2, [r3, #8]
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <LL_ADC_GetCommonPathInternalCh>:
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800331e:	4618      	mov	r0, r3
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <LL_ADC_SetOffset>:
{
 800332c:	b480      	push	{r7}
 800332e:	b087      	sub	sp, #28
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3360      	adds	r3, #96	; 0x60
 800333e:	461a      	mov	r2, r3
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	4b08      	ldr	r3, [pc, #32]	; (8003370 <LL_ADC_SetOffset+0x44>)
 800334e:	4013      	ands	r3, r2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	4313      	orrs	r3, r2
 800335c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	601a      	str	r2, [r3, #0]
}
 8003364:	bf00      	nop
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	03fff000 	.word	0x03fff000

08003374 <LL_ADC_GetOffsetChannel>:
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3360      	adds	r3, #96	; 0x60
 8003382:	461a      	mov	r2, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <LL_ADC_SetOffsetState>:
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3360      	adds	r3, #96	; 0x60
 80033b0:	461a      	mov	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4413      	add	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	431a      	orrs	r2, r3
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	601a      	str	r2, [r3, #0]
}
 80033ca:	bf00      	nop
 80033cc:	371c      	adds	r7, #28
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <LL_ADC_SetOffsetSign>:
{
 80033d6:	b480      	push	{r7}
 80033d8:	b087      	sub	sp, #28
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3360      	adds	r3, #96	; 0x60
 80033e6:	461a      	mov	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	601a      	str	r2, [r3, #0]
}
 8003400:	bf00      	nop
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <LL_ADC_SetOffsetSaturation>:
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3360      	adds	r3, #96	; 0x60
 800341c:	461a      	mov	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	431a      	orrs	r2, r3
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	601a      	str	r2, [r3, #0]
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	615a      	str	r2, [r3, #20]
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_ADC_INJ_GetTrigAuto>:
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_ADC_SetChannelSamplingTime>:
{
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3314      	adds	r3, #20
 8003494:	461a      	mov	r2, r3
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	0e5b      	lsrs	r3, r3, #25
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	4413      	add	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	0d1b      	lsrs	r3, r3, #20
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	2107      	movs	r1, #7
 80034b2:	fa01 f303 	lsl.w	r3, r1, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	401a      	ands	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	0d1b      	lsrs	r3, r3, #20
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	fa01 f303 	lsl.w	r3, r1, r3
 80034c8:	431a      	orrs	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	601a      	str	r2, [r3, #0]
}
 80034ce:	bf00      	nop
 80034d0:	371c      	adds	r7, #28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <LL_ADC_SetChannelSingleDiff>:
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a0f      	ldr	r2, [pc, #60]	; (8003528 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d10a      	bne.n	8003506 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003504:	e00a      	b.n	800351c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003512:	43db      	mvns	r3, r3
 8003514:	401a      	ands	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	407f0000 	.word	0x407f0000

0800352c <LL_ADC_GetMultimode>:
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	f003 031f 	and.w	r3, r3, #31
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_ADC_IsEnabled>:
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 0301 	and.w	r3, r3, #1
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <LL_ADC_IsEnabled+0x18>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <LL_ADC_IsEnabled+0x1a>
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <LL_ADC_REG_IsConversionOngoing>:
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b04      	cmp	r3, #4
 8003580:	d101      	bne.n	8003586 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003582:	2301      	movs	r3, #1
 8003584:	e000      	b.n	8003588 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <LL_ADC_INJ_StartConversion>:
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80035a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035a8:	f043 0208 	orr.w	r2, r3, #8
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	609a      	str	r2, [r3, #8]
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <LL_ADC_INJ_IsConversionOngoing>:
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d101      	bne.n	80035d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035f4:	d004      	beq.n	8003600 <HAL_ADCEx_InjectedStart_IT+0x1c>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a78      	ldr	r2, [pc, #480]	; (80037dc <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d101      	bne.n	8003604 <HAL_ADCEx_InjectedStart_IT+0x20>
 8003600:	4b77      	ldr	r3, [pc, #476]	; (80037e0 <HAL_ADCEx_InjectedStart_IT+0x1fc>)
 8003602:	e000      	b.n	8003606 <HAL_ADCEx_InjectedStart_IT+0x22>
 8003604:	4b77      	ldr	r3, [pc, #476]	; (80037e4 <HAL_ADCEx_InjectedStart_IT+0x200>)
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ff90 	bl	800352c <LL_ADC_GetMultimode>
 800360c:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff ffd2 	bl	80035bc <LL_ADC_INJ_IsConversionOngoing>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_ADCEx_InjectedStart_IT+0x3e>
  {
    return HAL_BUSY;
 800361e:	2302      	movs	r3, #2
 8003620:	e0d8      	b.n	80037d4 <HAL_ADCEx_InjectedStart_IT+0x1f0>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800362c:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003634:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10a      	bne.n	8003652 <HAL_ADCEx_InjectedStart_IT+0x6e>
        && (tmp_config_injected_queue == 0UL)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d107      	bne.n	8003652 <HAL_ADCEx_InjectedStart_IT+0x6e>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003646:	f043 0220 	orr.w	r2, r3, #32
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e0c0      	b.n	80037d4 <HAL_ADCEx_InjectedStart_IT+0x1f0>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_ADCEx_InjectedStart_IT+0x7c>
 800365c:	2302      	movs	r3, #2
 800365e:	e0b9      	b.n	80037d4 <HAL_ADCEx_InjectedStart_IT+0x1f0>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff fd47 	bl	80030fc <ADC_Enable>
 800366e:	4603      	mov	r3, r0
 8003670:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003672:	7bfb      	ldrb	r3, [r7, #15]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f040 80a8 	bne.w	80037ca <HAL_ADCEx_InjectedStart_IT+0x1e6>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d006      	beq.n	8003694 <HAL_ADCEx_InjectedStart_IT+0xb0>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800368a:	f023 0208 	bic.w	r2, r3, #8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	661a      	str	r2, [r3, #96]	; 0x60
 8003692:	e002      	b.n	800369a <HAL_ADCEx_InjectedStart_IT+0xb6>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a4a      	ldr	r2, [pc, #296]	; (80037dc <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_ADCEx_InjectedStart_IT+0xe8>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a4a      	ldr	r2, [pc, #296]	; (80037e8 <HAL_ADCEx_InjectedStart_IT+0x204>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d002      	beq.n	80036c8 <HAL_ADCEx_InjectedStart_IT+0xe4>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	e003      	b.n	80036d0 <HAL_ADCEx_InjectedStart_IT+0xec>
 80036c8:	4b48      	ldr	r3, [pc, #288]	; (80037ec <HAL_ADCEx_InjectedStart_IT+0x208>)
 80036ca:	e001      	b.n	80036d0 <HAL_ADCEx_InjectedStart_IT+0xec>
 80036cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d002      	beq.n	80036de <HAL_ADCEx_InjectedStart_IT+0xfa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d105      	bne.n	80036ea <HAL_ADCEx_InjectedStart_IT+0x106>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2260      	movs	r2, #96	; 0x60
 80036f0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <HAL_ADCEx_InjectedStart_IT+0x134>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003716:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d110      	bne.n	8003742 <HAL_ADCEx_InjectedStart_IT+0x15e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0220 	bic.w	r2, r2, #32
 800372e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800373e:	605a      	str	r2, [r3, #4]
          break;
 8003740:	e010      	b.n	8003764 <HAL_ADCEx_InjectedStart_IT+0x180>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003750:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0220 	orr.w	r2, r2, #32
 8003760:	605a      	str	r2, [r3, #4]
          break;
 8003762:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <HAL_ADCEx_InjectedStart_IT+0x1f8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d009      	beq.n	8003782 <HAL_ADCEx_InjectedStart_IT+0x19e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <HAL_ADCEx_InjectedStart_IT+0x204>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d002      	beq.n	800377e <HAL_ADCEx_InjectedStart_IT+0x19a>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	e003      	b.n	8003786 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 800377e:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <HAL_ADCEx_InjectedStart_IT+0x208>)
 8003780:	e001      	b.n	8003786 <HAL_ADCEx_InjectedStart_IT+0x1a2>
 8003782:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	4293      	cmp	r3, r2
 800378c:	d008      	beq.n	80037a0 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b06      	cmp	r3, #6
 8003798:	d002      	beq.n	80037a0 <HAL_ADCEx_InjectedStart_IT+0x1bc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b07      	cmp	r3, #7
 800379e:	d10d      	bne.n	80037bc <HAL_ADCEx_InjectedStart_IT+0x1d8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fe5f 	bl	8003468 <LL_ADC_INJ_GetTrigAuto>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d110      	bne.n	80037d2 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff feed 	bl	8003594 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 80037ba:	e00a      	b.n	80037d2 <HAL_ADCEx_InjectedStart_IT+0x1ee>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80037c8:	e003      	b.n	80037d2 <HAL_ADCEx_InjectedStart_IT+0x1ee>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	50000100 	.word	0x50000100
 80037e0:	50000300 	.word	0x50000300
 80037e4:	50000700 	.word	0x50000700
 80037e8:	50000500 	.word	0x50000500
 80037ec:	50000400 	.word	0x50000400

080037f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b0b6      	sub	sp, #216	; 0xd8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800385e:	2300      	movs	r3, #0
 8003860:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003874:	2b01      	cmp	r3, #1
 8003876:	d102      	bne.n	800387e <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8003878:	2302      	movs	r3, #2
 800387a:	f000 bcfd 	b.w	8004278 <HAL_ADCEx_InjectedConfigChannel+0xa24>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003892:	2b01      	cmp	r3, #1
 8003894:	d130      	bne.n	80038f8 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b09      	cmp	r3, #9
 800389c:	d179      	bne.n	8003992 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d010      	beq.n	80038c8 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	0e9b      	lsrs	r3, r3, #26
 80038ac:	025b      	lsls	r3, r3, #9
 80038ae:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80038ba:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038c6:	e007      	b.n	80038d8 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	0e9b      	lsrs	r3, r3, #26
 80038ce:	025b      	lsls	r3, r3, #9
 80038d0:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80038d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038de:	4b84      	ldr	r3, [pc, #528]	; (8003af0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6812      	ldr	r2, [r2, #0]
 80038e6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80038ea:	430b      	orrs	r3, r1
 80038ec:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038f4:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80038f6:	e04c      	b.n	8003992 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d11d      	bne.n	800393c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6a1a      	ldr	r2, [r3, #32]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00d      	beq.n	8003932 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003920:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8003924:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 800392a:	4313      	orrs	r3, r2
 800392c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003930:	e004      	b.n	800393c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	3b01      	subs	r3, #1
 8003938:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	0e9b      	lsrs	r3, r3, #26
 8003942:	f003 021f 	and.w	r2, r3, #31
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 031f 	and.w	r3, r3, #31
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003956:	4313      	orrs	r3, r2
 8003958:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003960:	1e5a      	subs	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800396a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003982:	4b5b      	ldr	r3, [pc, #364]	; (8003af0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8003984:	4013      	ands	r3, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	430b      	orrs	r3, r1
 8003990:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff fe10 	bl	80035bc <LL_ADC_INJ_IsConversionOngoing>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d124      	bne.n	80039ec <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d112      	bne.n	80039d2 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80039bc:	055a      	lsls	r2, r3, #21
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039c4:	051b      	lsls	r3, r3, #20
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	60da      	str	r2, [r3, #12]
 80039d0:	e00c      	b.n	80039ec <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80039e2:	055a      	lsls	r2, r3, #21
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff fdbc 	bl	800356e <LL_ADC_REG_IsConversionOngoing>
 80039f6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fddc 	bl	80035bc <LL_ADC_INJ_IsConversionOngoing>
 8003a04:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f040 822e 	bne.w	8003e6e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f040 8229 	bne.w	8003e6e <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d116      	bne.n	8003a5a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d108      	bne.n	8003a48 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003a44:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003a46:	e01f      	b.n	8003a88 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003a56:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003a58:	e016      	b.n	8003a88 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d109      	bne.n	8003a78 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a68:	f043 0220 	orr.w	r2, r3, #32
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003a76:	e007      	b.n	8003a88 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003a86:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d110      	bne.n	8003ab4 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0202 	orr.w	r2, r2, #2
 8003ab0:	611a      	str	r2, [r3, #16]
 8003ab2:	e007      	b.n	8003ac4 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0202 	bic.w	r2, r2, #2
 8003ac2:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003acc:	d112      	bne.n	8003af4 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	4619      	mov	r1, r3
 8003ada:	f7ff fcd3 	bl	8003484 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fcab 	bl	8003442 <LL_ADC_SetSamplingTimeCommonConfig>
 8003aec:	e011      	b.n	8003b12 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8003aee:	bf00      	nop
 8003af0:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6818      	ldr	r0, [r3, #0]
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	6819      	ldr	r1, [r3, #0]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	461a      	mov	r2, r3
 8003b02:	f7ff fcbf 	bl	8003484 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff fc98 	bl	8003442 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	08db      	lsrs	r3, r3, #3
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	2b04      	cmp	r3, #4
 8003b32:	d022      	beq.n	8003b7a <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6818      	ldr	r0, [r3, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	6919      	ldr	r1, [r3, #16]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b44:	f7ff fbf2 	bl	800332c <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6919      	ldr	r1, [r3, #16]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	461a      	mov	r2, r3
 8003b56:	f7ff fc3e 	bl	80033d6 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d102      	bne.n	8003b70 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8003b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b6e:	e000      	b.n	8003b72 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8003b70:	2300      	movs	r3, #0
 8003b72:	461a      	mov	r2, r3
 8003b74:	f7ff fc4a 	bl	800340c <LL_ADC_SetOffsetSaturation>
 8003b78:	e179      	b.n	8003e6e <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff fbf7 	bl	8003374 <LL_ADC_GetOffsetChannel>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10a      	bne.n	8003ba6 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff fbec 	bl	8003374 <LL_ADC_GetOffsetChannel>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	0e9b      	lsrs	r3, r3, #26
 8003ba0:	f003 021f 	and.w	r2, r3, #31
 8003ba4:	e01e      	b.n	8003be4 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2100      	movs	r1, #0
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff fbe1 	bl	8003374 <LL_ADC_GetOffsetChannel>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003bbc:	fa93 f3a3 	rbit	r3, r3
 8003bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003bc4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003bcc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8003bd4:	2320      	movs	r3, #32
 8003bd6:	e004      	b.n	8003be2 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8003bd8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003bdc:	fab3 f383 	clz	r3, r3
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d105      	bne.n	8003bfc <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	0e9b      	lsrs	r3, r3, #26
 8003bf6:	f003 031f 	and.w	r3, r3, #31
 8003bfa:	e018      	b.n	8003c2e <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c08:	fa93 f3a3 	rbit	r3, r3
 8003c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003c10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003c18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8003c20:	2320      	movs	r3, #32
 8003c22:	e004      	b.n	8003c2e <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8003c24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003c28:	fab3 f383 	clz	r3, r3
 8003c2c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d106      	bne.n	8003c40 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2200      	movs	r2, #0
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fbb0 	bl	80033a0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2101      	movs	r1, #1
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff fb94 	bl	8003374 <LL_ADC_GetOffsetChannel>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <HAL_ADCEx_InjectedConfigChannel+0x418>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7ff fb89 	bl	8003374 <LL_ADC_GetOffsetChannel>
 8003c62:	4603      	mov	r3, r0
 8003c64:	0e9b      	lsrs	r3, r3, #26
 8003c66:	f003 021f 	and.w	r2, r3, #31
 8003c6a:	e01e      	b.n	8003caa <HAL_ADCEx_InjectedConfigChannel+0x456>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2101      	movs	r1, #1
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fb7e 	bl	8003374 <LL_ADC_GetOffsetChannel>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c82:	fa93 f3a3 	rbit	r3, r3
 8003c86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003c8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003c92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8003c9a:	2320      	movs	r3, #32
 8003c9c:	e004      	b.n	8003ca8 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8003c9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ca2:	fab3 f383 	clz	r3, r3
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d105      	bne.n	8003cc2 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	0e9b      	lsrs	r3, r3, #26
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	e018      	b.n	8003cf4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003cce:	fa93 f3a3 	rbit	r3, r3
 8003cd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003cd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003cde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8003ce6:	2320      	movs	r3, #32
 8003ce8:	e004      	b.n	8003cf4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8003cea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d106      	bne.n	8003d06 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2101      	movs	r1, #1
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fb4d 	bl	80033a0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7ff fb31 	bl	8003374 <LL_ADC_GetOffsetChannel>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2102      	movs	r1, #2
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff fb26 	bl	8003374 <LL_ADC_GetOffsetChannel>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	0e9b      	lsrs	r3, r3, #26
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	e01e      	b.n	8003d70 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2102      	movs	r1, #2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fb1b 	bl	8003374 <LL_ADC_GetOffsetChannel>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d48:	fa93 f3a3 	rbit	r3, r3
 8003d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003d58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8003d60:	2320      	movs	r3, #32
 8003d62:	e004      	b.n	8003d6e <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8003d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d68:	fab3 f383 	clz	r3, r3
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d105      	bne.n	8003d88 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	0e9b      	lsrs	r3, r3, #26
 8003d82:	f003 031f 	and.w	r3, r3, #31
 8003d86:	e014      	b.n	8003db2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d90:	fa93 f3a3 	rbit	r3, r3
 8003d94:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003d96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8003da4:	2320      	movs	r3, #32
 8003da6:	e004      	b.n	8003db2 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8003da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003dac:	fab3 f383 	clz	r3, r3
 8003db0:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d106      	bne.n	8003dc4 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2102      	movs	r1, #2
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff faee 	bl	80033a0 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2103      	movs	r1, #3
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fad2 	bl	8003374 <LL_ADC_GetOffsetChannel>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2103      	movs	r1, #3
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fac7 	bl	8003374 <LL_ADC_GetOffsetChannel>
 8003de6:	4603      	mov	r3, r0
 8003de8:	0e9b      	lsrs	r3, r3, #26
 8003dea:	f003 021f 	and.w	r2, r3, #31
 8003dee:	e017      	b.n	8003e20 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2103      	movs	r1, #3
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fabc 	bl	8003374 <LL_ADC_GetOffsetChannel>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e02:	fa93 f3a3 	rbit	r3, r3
 8003e06:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 8003e12:	2320      	movs	r3, #32
 8003e14:	e003      	b.n	8003e1e <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 8003e16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e18:	fab3 f383 	clz	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d105      	bne.n	8003e38 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	0e9b      	lsrs	r3, r3, #26
 8003e32:	f003 031f 	and.w	r3, r3, #31
 8003e36:	e011      	b.n	8003e5c <HAL_ADCEx_InjectedConfigChannel+0x608>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e40:	fa93 f3a3 	rbit	r3, r3
 8003e44:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e48:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003e4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8003e50:	2320      	movs	r3, #32
 8003e52:	e003      	b.n	8003e5c <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8003e54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e56:	fab3 f383 	clz	r3, r3
 8003e5a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d106      	bne.n	8003e6e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2200      	movs	r2, #0
 8003e66:	2103      	movs	r1, #3
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fa99 	bl	80033a0 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fb68 	bl	8003548 <LL_ADC_IsEnabled>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f040 813d 	bne.w	80040fa <HAL_ADCEx_InjectedConfigChannel+0x8a6>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	6819      	ldr	r1, [r3, #0]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	f7ff fb25 	bl	80034dc <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	4aa2      	ldr	r2, [pc, #648]	; (8004120 <HAL_ADCEx_InjectedConfigChannel+0x8cc>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	f040 812e 	bne.w	80040fa <HAL_ADCEx_InjectedConfigChannel+0x8a6>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10b      	bne.n	8003ec6 <HAL_ADCEx_InjectedConfigChannel+0x672>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	0e9b      	lsrs	r3, r3, #26
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	f003 031f 	and.w	r3, r3, #31
 8003eba:	2b09      	cmp	r3, #9
 8003ebc:	bf94      	ite	ls
 8003ebe:	2301      	movls	r3, #1
 8003ec0:	2300      	movhi	r3, #0
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	e019      	b.n	8003efa <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ecc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ece:	fa93 f3a3 	rbit	r3, r3
 8003ed2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 8003ede:	2320      	movs	r3, #32
 8003ee0:	e003      	b.n	8003eea <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 8003ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ee4:	fab3 f383 	clz	r3, r3
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	3301      	adds	r3, #1
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	2b09      	cmp	r3, #9
 8003ef2:	bf94      	ite	ls
 8003ef4:	2301      	movls	r3, #1
 8003ef6:	2300      	movhi	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d079      	beq.n	8003ff2 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d107      	bne.n	8003f1a <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	0e9b      	lsrs	r3, r3, #26
 8003f10:	3301      	adds	r3, #1
 8003f12:	069b      	lsls	r3, r3, #26
 8003f14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f18:	e015      	b.n	8003f46 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f22:	fa93 f3a3 	rbit	r3, r3
 8003f26:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f2a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 8003f32:	2320      	movs	r3, #32
 8003f34:	e003      	b.n	8003f3e <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 8003f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f38:	fab3 f383 	clz	r3, r3
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	3301      	adds	r3, #1
 8003f40:	069b      	lsls	r3, r3, #26
 8003f42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	0e9b      	lsrs	r3, r3, #26
 8003f58:	3301      	adds	r3, #1
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	2101      	movs	r1, #1
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	e017      	b.n	8003f96 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f6e:	fa93 f3a3 	rbit	r3, r3
 8003f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f76:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8003f7e:	2320      	movs	r3, #32
 8003f80:	e003      	b.n	8003f8a <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8003f82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f84:	fab3 f383 	clz	r3, r3
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	f003 031f 	and.w	r3, r3, #31
 8003f90:	2101      	movs	r1, #1
 8003f92:	fa01 f303 	lsl.w	r3, r1, r3
 8003f96:	ea42 0103 	orr.w	r1, r2, r3
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10a      	bne.n	8003fbc <HAL_ADCEx_InjectedConfigChannel+0x768>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	0e9b      	lsrs	r3, r3, #26
 8003fac:	3301      	adds	r3, #1
 8003fae:	f003 021f 	and.w	r2, r3, #31
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	4413      	add	r3, r2
 8003fb8:	051b      	lsls	r3, r3, #20
 8003fba:	e018      	b.n	8003fee <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc4:	fa93 f3a3 	rbit	r3, r3
 8003fc8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fcc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8003fd4:	2320      	movs	r3, #32
 8003fd6:	e003      	b.n	8003fe0 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f003 021f 	and.w	r2, r3, #31
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	4413      	add	r3, r2
 8003fec:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	e07e      	b.n	80040f0 <HAL_ADCEx_InjectedConfigChannel+0x89c>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d107      	bne.n	800400e <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	0e9b      	lsrs	r3, r3, #26
 8004004:	3301      	adds	r3, #1
 8004006:	069b      	lsls	r3, r3, #26
 8004008:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800400c:	e015      	b.n	800403a <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 8004026:	2320      	movs	r3, #32
 8004028:	e003      	b.n	8004032 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 800402a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402c:	fab3 f383 	clz	r3, r3
 8004030:	b2db      	uxtb	r3, r3
 8004032:	3301      	adds	r3, #1
 8004034:	069b      	lsls	r3, r3, #26
 8004036:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004042:	2b00      	cmp	r3, #0
 8004044:	d109      	bne.n	800405a <HAL_ADCEx_InjectedConfigChannel+0x806>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	0e9b      	lsrs	r3, r3, #26
 800404c:	3301      	adds	r3, #1
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	2101      	movs	r1, #1
 8004054:	fa01 f303 	lsl.w	r3, r1, r3
 8004058:	e017      	b.n	800408a <HAL_ADCEx_InjectedConfigChannel+0x836>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	fa93 f3a3 	rbit	r3, r3
 8004066:	61bb      	str	r3, [r7, #24]
  return result;
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8004072:	2320      	movs	r3, #32
 8004074:	e003      	b.n	800407e <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	fab3 f383 	clz	r3, r3
 800407c:	b2db      	uxtb	r3, r3
 800407e:	3301      	adds	r3, #1
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	2101      	movs	r1, #1
 8004086:	fa01 f303 	lsl.w	r3, r1, r3
 800408a:	ea42 0103 	orr.w	r1, r2, r3
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10d      	bne.n	80040b6 <HAL_ADCEx_InjectedConfigChannel+0x862>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	0e9b      	lsrs	r3, r3, #26
 80040a0:	3301      	adds	r3, #1
 80040a2:	f003 021f 	and.w	r2, r3, #31
 80040a6:	4613      	mov	r3, r2
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4413      	add	r3, r2
 80040ac:	3b1e      	subs	r3, #30
 80040ae:	051b      	lsls	r3, r3, #20
 80040b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040b4:	e01b      	b.n	80040ee <HAL_ADCEx_InjectedConfigChannel+0x89a>
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	fa93 f3a3 	rbit	r3, r3
 80040c2:	60fb      	str	r3, [r7, #12]
  return result;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <HAL_ADCEx_InjectedConfigChannel+0x87e>
    return 32U;
 80040ce:	2320      	movs	r3, #32
 80040d0:	e003      	b.n	80040da <HAL_ADCEx_InjectedConfigChannel+0x886>
  return __builtin_clz(value);
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	fab3 f383 	clz	r3, r3
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	3301      	adds	r3, #1
 80040dc:	f003 021f 	and.w	r2, r3, #31
 80040e0:	4613      	mov	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	4413      	add	r3, r2
 80040e6:	3b1e      	subs	r3, #30
 80040e8:	051b      	lsls	r3, r3, #20
 80040ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040ee:	430b      	orrs	r3, r1
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	6892      	ldr	r2, [r2, #8]
 80040f4:	4619      	mov	r1, r3
 80040f6:	f7ff f9c5 	bl	8003484 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	4b09      	ldr	r3, [pc, #36]	; (8004124 <HAL_ADCEx_InjectedConfigChannel+0x8d0>)
 8004100:	4013      	ands	r3, r2
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 80b2 	beq.w	800426c <HAL_ADCEx_InjectedConfigChannel+0xa18>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004110:	d004      	beq.n	800411c <HAL_ADCEx_InjectedConfigChannel+0x8c8>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a04      	ldr	r2, [pc, #16]	; (8004128 <HAL_ADCEx_InjectedConfigChannel+0x8d4>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d109      	bne.n	8004130 <HAL_ADCEx_InjectedConfigChannel+0x8dc>
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <HAL_ADCEx_InjectedConfigChannel+0x8d8>)
 800411e:	e008      	b.n	8004132 <HAL_ADCEx_InjectedConfigChannel+0x8de>
 8004120:	407f0000 	.word	0x407f0000
 8004124:	80080000 	.word	0x80080000
 8004128:	50000100 	.word	0x50000100
 800412c:	50000300 	.word	0x50000300
 8004130:	4b53      	ldr	r3, [pc, #332]	; (8004280 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff f8eb 	bl	800330e <LL_ADC_GetCommonPathInternalCh>
 8004138:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a50      	ldr	r2, [pc, #320]	; (8004284 <HAL_ADCEx_InjectedConfigChannel+0xa30>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d004      	beq.n	8004150 <HAL_ADCEx_InjectedConfigChannel+0x8fc>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a4f      	ldr	r2, [pc, #316]	; (8004288 <HAL_ADCEx_InjectedConfigChannel+0xa34>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d139      	bne.n	80041c4 <HAL_ADCEx_InjectedConfigChannel+0x970>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004150:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d133      	bne.n	80041c4 <HAL_ADCEx_InjectedConfigChannel+0x970>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004164:	d004      	beq.n	8004170 <HAL_ADCEx_InjectedConfigChannel+0x91c>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a48      	ldr	r2, [pc, #288]	; (800428c <HAL_ADCEx_InjectedConfigChannel+0xa38>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d17a      	bne.n	8004266 <HAL_ADCEx_InjectedConfigChannel+0xa12>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004178:	d004      	beq.n	8004184 <HAL_ADCEx_InjectedConfigChannel+0x930>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a44      	ldr	r2, [pc, #272]	; (8004290 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d101      	bne.n	8004188 <HAL_ADCEx_InjectedConfigChannel+0x934>
 8004184:	4a43      	ldr	r2, [pc, #268]	; (8004294 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004186:	e000      	b.n	800418a <HAL_ADCEx_InjectedConfigChannel+0x936>
 8004188:	4a3d      	ldr	r2, [pc, #244]	; (8004280 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 800418a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800418e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004192:	4619      	mov	r1, r3
 8004194:	4610      	mov	r0, r2
 8004196:	f7ff f8a7 	bl	80032e8 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 800419a:	4b3f      	ldr	r3, [pc, #252]	; (8004298 <HAL_ADCEx_InjectedConfigChannel+0xa44>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	099b      	lsrs	r3, r3, #6
 80041a0:	4a3e      	ldr	r2, [pc, #248]	; (800429c <HAL_ADCEx_InjectedConfigChannel+0xa48>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	099a      	lsrs	r2, r3, #6
 80041a8:	4613      	mov	r3, r2
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	3318      	adds	r3, #24
 80041b2:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80041b4:	e002      	b.n	80041bc <HAL_ADCEx_InjectedConfigChannel+0x968>
        {
          wait_loop_index--;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1f9      	bne.n	80041b6 <HAL_ADCEx_InjectedConfigChannel+0x962>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041c2:	e050      	b.n	8004266 <HAL_ADCEx_InjectedConfigChannel+0xa12>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a35      	ldr	r2, [pc, #212]	; (80042a0 <HAL_ADCEx_InjectedConfigChannel+0xa4c>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d125      	bne.n	800421a <HAL_ADCEx_InjectedConfigChannel+0x9c6>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d11f      	bne.n	800421a <HAL_ADCEx_InjectedConfigChannel+0x9c6>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a2c      	ldr	r2, [pc, #176]	; (8004290 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d104      	bne.n	80041ee <HAL_ADCEx_InjectedConfigChannel+0x99a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2e      	ldr	r2, [pc, #184]	; (80042a4 <HAL_ADCEx_InjectedConfigChannel+0xa50>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d03d      	beq.n	800426a <HAL_ADCEx_InjectedConfigChannel+0xa16>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041f6:	d004      	beq.n	8004202 <HAL_ADCEx_InjectedConfigChannel+0x9ae>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a24      	ldr	r2, [pc, #144]	; (8004290 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d101      	bne.n	8004206 <HAL_ADCEx_InjectedConfigChannel+0x9b2>
 8004202:	4a24      	ldr	r2, [pc, #144]	; (8004294 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004204:	e000      	b.n	8004208 <HAL_ADCEx_InjectedConfigChannel+0x9b4>
 8004206:	4a1e      	ldr	r2, [pc, #120]	; (8004280 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004208:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800420c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004210:	4619      	mov	r1, r3
 8004212:	4610      	mov	r0, r2
 8004214:	f7ff f868 	bl	80032e8 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004218:	e027      	b.n	800426a <HAL_ADCEx_InjectedConfigChannel+0xa16>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a22      	ldr	r2, [pc, #136]	; (80042a8 <HAL_ADCEx_InjectedConfigChannel+0xa54>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d123      	bne.n	800426c <HAL_ADCEx_InjectedConfigChannel+0xa18>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004224:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d11d      	bne.n	800426c <HAL_ADCEx_InjectedConfigChannel+0xa18>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a16      	ldr	r2, [pc, #88]	; (8004290 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d018      	beq.n	800426c <HAL_ADCEx_InjectedConfigChannel+0xa18>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004242:	d004      	beq.n	800424e <HAL_ADCEx_InjectedConfigChannel+0x9fa>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a11      	ldr	r2, [pc, #68]	; (8004290 <HAL_ADCEx_InjectedConfigChannel+0xa3c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d101      	bne.n	8004252 <HAL_ADCEx_InjectedConfigChannel+0x9fe>
 800424e:	4a11      	ldr	r2, [pc, #68]	; (8004294 <HAL_ADCEx_InjectedConfigChannel+0xa40>)
 8004250:	e000      	b.n	8004254 <HAL_ADCEx_InjectedConfigChannel+0xa00>
 8004252:	4a0b      	ldr	r2, [pc, #44]	; (8004280 <HAL_ADCEx_InjectedConfigChannel+0xa2c>)
 8004254:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800425c:	4619      	mov	r1, r3
 800425e:	4610      	mov	r0, r2
 8004260:	f7ff f842 	bl	80032e8 <LL_ADC_SetCommonPathInternalCh>
 8004264:	e002      	b.n	800426c <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004266:	bf00      	nop
 8004268:	e000      	b.n	800426c <HAL_ADCEx_InjectedConfigChannel+0xa18>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800426a:	bf00      	nop
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004274:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004278:	4618      	mov	r0, r3
 800427a:	37d8      	adds	r7, #216	; 0xd8
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	50000700 	.word	0x50000700
 8004284:	c3210000 	.word	0xc3210000
 8004288:	90c00010 	.word	0x90c00010
 800428c:	50000600 	.word	0x50000600
 8004290:	50000100 	.word	0x50000100
 8004294:	50000300 	.word	0x50000300
 8004298:	20000000 	.word	0x20000000
 800429c:	053e2d63 	.word	0x053e2d63
 80042a0:	c7520000 	.word	0xc7520000
 80042a4:	50000500 	.word	0x50000500
 80042a8:	cb840000 	.word	0xcb840000

080042ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80042ac:	b590      	push	{r4, r7, lr}
 80042ae:	b0a1      	sub	sp, #132	; 0x84
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e0e7      	b.n	800449a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80042d2:	2300      	movs	r3, #0
 80042d4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80042d6:	2300      	movs	r3, #0
 80042d8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042e2:	d102      	bne.n	80042ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80042e4:	4b6f      	ldr	r3, [pc, #444]	; (80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80042e6:	60bb      	str	r3, [r7, #8]
 80042e8:	e009      	b.n	80042fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a6e      	ldr	r2, [pc, #440]	; (80044a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d102      	bne.n	80042fa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80042f4:	4b6d      	ldr	r3, [pc, #436]	; (80044ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	e001      	b.n	80042fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80042fa:	2300      	movs	r3, #0
 80042fc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10b      	bne.n	800431c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004308:	f043 0220 	orr.w	r2, r3, #32
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0be      	b.n	800449a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff f925 	bl	800356e <LL_ADC_REG_IsConversionOngoing>
 8004324:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff f91f 	bl	800356e <LL_ADC_REG_IsConversionOngoing>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	f040 80a0 	bne.w	8004478 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800433a:	2b00      	cmp	r3, #0
 800433c:	f040 809c 	bne.w	8004478 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004348:	d004      	beq.n	8004354 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a55      	ldr	r2, [pc, #340]	; (80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d101      	bne.n	8004358 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004354:	4b56      	ldr	r3, [pc, #344]	; (80044b0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004356:	e000      	b.n	800435a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004358:	4b56      	ldr	r3, [pc, #344]	; (80044b4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800435a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d04b      	beq.n	80043fc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	6859      	ldr	r1, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004376:	035b      	lsls	r3, r3, #13
 8004378:	430b      	orrs	r3, r1
 800437a:	431a      	orrs	r2, r3
 800437c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800437e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004388:	d004      	beq.n	8004394 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a45      	ldr	r2, [pc, #276]	; (80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d10f      	bne.n	80043b4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004394:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004398:	f7ff f8d6 	bl	8003548 <LL_ADC_IsEnabled>
 800439c:	4604      	mov	r4, r0
 800439e:	4841      	ldr	r0, [pc, #260]	; (80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80043a0:	f7ff f8d2 	bl	8003548 <LL_ADC_IsEnabled>
 80043a4:	4603      	mov	r3, r0
 80043a6:	4323      	orrs	r3, r4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	bf0c      	ite	eq
 80043ac:	2301      	moveq	r3, #1
 80043ae:	2300      	movne	r3, #0
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	e012      	b.n	80043da <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80043b4:	483c      	ldr	r0, [pc, #240]	; (80044a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80043b6:	f7ff f8c7 	bl	8003548 <LL_ADC_IsEnabled>
 80043ba:	4604      	mov	r4, r0
 80043bc:	483b      	ldr	r0, [pc, #236]	; (80044ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80043be:	f7ff f8c3 	bl	8003548 <LL_ADC_IsEnabled>
 80043c2:	4603      	mov	r3, r0
 80043c4:	431c      	orrs	r4, r3
 80043c6:	483c      	ldr	r0, [pc, #240]	; (80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80043c8:	f7ff f8be 	bl	8003548 <LL_ADC_IsEnabled>
 80043cc:	4603      	mov	r3, r0
 80043ce:	4323      	orrs	r3, r4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	bf0c      	ite	eq
 80043d4:	2301      	moveq	r3, #1
 80043d6:	2300      	movne	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d056      	beq.n	800448c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80043de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80043e6:	f023 030f 	bic.w	r3, r3, #15
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	6811      	ldr	r1, [r2, #0]
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	6892      	ldr	r2, [r2, #8]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	431a      	orrs	r2, r3
 80043f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043f8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043fa:	e047      	b.n	800448c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80043fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004404:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004406:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004410:	d004      	beq.n	800441c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a23      	ldr	r2, [pc, #140]	; (80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d10f      	bne.n	800443c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800441c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004420:	f7ff f892 	bl	8003548 <LL_ADC_IsEnabled>
 8004424:	4604      	mov	r4, r0
 8004426:	481f      	ldr	r0, [pc, #124]	; (80044a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004428:	f7ff f88e 	bl	8003548 <LL_ADC_IsEnabled>
 800442c:	4603      	mov	r3, r0
 800442e:	4323      	orrs	r3, r4
 8004430:	2b00      	cmp	r3, #0
 8004432:	bf0c      	ite	eq
 8004434:	2301      	moveq	r3, #1
 8004436:	2300      	movne	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	e012      	b.n	8004462 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800443c:	481a      	ldr	r0, [pc, #104]	; (80044a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800443e:	f7ff f883 	bl	8003548 <LL_ADC_IsEnabled>
 8004442:	4604      	mov	r4, r0
 8004444:	4819      	ldr	r0, [pc, #100]	; (80044ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004446:	f7ff f87f 	bl	8003548 <LL_ADC_IsEnabled>
 800444a:	4603      	mov	r3, r0
 800444c:	431c      	orrs	r4, r3
 800444e:	481a      	ldr	r0, [pc, #104]	; (80044b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004450:	f7ff f87a 	bl	8003548 <LL_ADC_IsEnabled>
 8004454:	4603      	mov	r3, r0
 8004456:	4323      	orrs	r3, r4
 8004458:	2b00      	cmp	r3, #0
 800445a:	bf0c      	ite	eq
 800445c:	2301      	moveq	r3, #1
 800445e:	2300      	movne	r3, #0
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d012      	beq.n	800448c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800446e:	f023 030f 	bic.w	r3, r3, #15
 8004472:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004474:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004476:	e009      	b.n	800448c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447c:	f043 0220 	orr.w	r2, r3, #32
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800448a:	e000      	b.n	800448e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800448c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004496:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800449a:	4618      	mov	r0, r3
 800449c:	3784      	adds	r7, #132	; 0x84
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd90      	pop	{r4, r7, pc}
 80044a2:	bf00      	nop
 80044a4:	50000100 	.word	0x50000100
 80044a8:	50000400 	.word	0x50000400
 80044ac:	50000500 	.word	0x50000500
 80044b0:	50000300 	.word	0x50000300
 80044b4:	50000700 	.word	0x50000700
 80044b8:	50000600 	.word	0x50000600

080044bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044cc:	4b0c      	ldr	r3, [pc, #48]	; (8004500 <__NVIC_SetPriorityGrouping+0x44>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044d8:	4013      	ands	r3, r2
 80044da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ee:	4a04      	ldr	r2, [pc, #16]	; (8004500 <__NVIC_SetPriorityGrouping+0x44>)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	60d3      	str	r3, [r2, #12]
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	e000ed00 	.word	0xe000ed00

08004504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <__NVIC_GetPriorityGrouping+0x18>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	f003 0307 	and.w	r3, r3, #7
}
 8004512:	4618      	mov	r0, r3
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800452a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452e:	2b00      	cmp	r3, #0
 8004530:	db0b      	blt.n	800454a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	f003 021f 	and.w	r2, r3, #31
 8004538:	4907      	ldr	r1, [pc, #28]	; (8004558 <__NVIC_EnableIRQ+0x38>)
 800453a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	2001      	movs	r0, #1
 8004542:	fa00 f202 	lsl.w	r2, r0, r2
 8004546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	e000e100 	.word	0xe000e100

0800455c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	6039      	str	r1, [r7, #0]
 8004566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456c:	2b00      	cmp	r3, #0
 800456e:	db0a      	blt.n	8004586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	b2da      	uxtb	r2, r3
 8004574:	490c      	ldr	r1, [pc, #48]	; (80045a8 <__NVIC_SetPriority+0x4c>)
 8004576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800457a:	0112      	lsls	r2, r2, #4
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	440b      	add	r3, r1
 8004580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004584:	e00a      	b.n	800459c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	b2da      	uxtb	r2, r3
 800458a:	4908      	ldr	r1, [pc, #32]	; (80045ac <__NVIC_SetPriority+0x50>)
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	3b04      	subs	r3, #4
 8004594:	0112      	lsls	r2, r2, #4
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	440b      	add	r3, r1
 800459a:	761a      	strb	r2, [r3, #24]
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	e000e100 	.word	0xe000e100
 80045ac:	e000ed00 	.word	0xe000ed00

080045b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b089      	sub	sp, #36	; 0x24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f1c3 0307 	rsb	r3, r3, #7
 80045ca:	2b04      	cmp	r3, #4
 80045cc:	bf28      	it	cs
 80045ce:	2304      	movcs	r3, #4
 80045d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	3304      	adds	r3, #4
 80045d6:	2b06      	cmp	r3, #6
 80045d8:	d902      	bls.n	80045e0 <NVIC_EncodePriority+0x30>
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3b03      	subs	r3, #3
 80045de:	e000      	b.n	80045e2 <NVIC_EncodePriority+0x32>
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e4:	f04f 32ff 	mov.w	r2, #4294967295
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	fa02 f303 	lsl.w	r3, r2, r3
 80045ee:	43da      	mvns	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	401a      	ands	r2, r3
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045f8:	f04f 31ff 	mov.w	r1, #4294967295
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004602:	43d9      	mvns	r1, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004608:	4313      	orrs	r3, r2
         );
}
 800460a:	4618      	mov	r0, r3
 800460c:	3724      	adds	r7, #36	; 0x24
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
	...

08004618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3b01      	subs	r3, #1
 8004624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004628:	d301      	bcc.n	800462e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800462a:	2301      	movs	r3, #1
 800462c:	e00f      	b.n	800464e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800462e:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <SysTick_Config+0x40>)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3b01      	subs	r3, #1
 8004634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004636:	210f      	movs	r1, #15
 8004638:	f04f 30ff 	mov.w	r0, #4294967295
 800463c:	f7ff ff8e 	bl	800455c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <SysTick_Config+0x40>)
 8004642:	2200      	movs	r2, #0
 8004644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004646:	4b04      	ldr	r3, [pc, #16]	; (8004658 <SysTick_Config+0x40>)
 8004648:	2207      	movs	r2, #7
 800464a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	e000e010 	.word	0xe000e010

0800465c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7ff ff29 	bl	80044bc <__NVIC_SetPriorityGrouping>
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004672:	b580      	push	{r7, lr}
 8004674:	b086      	sub	sp, #24
 8004676:	af00      	add	r7, sp, #0
 8004678:	4603      	mov	r3, r0
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	607a      	str	r2, [r7, #4]
 800467e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004680:	f7ff ff40 	bl	8004504 <__NVIC_GetPriorityGrouping>
 8004684:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	6978      	ldr	r0, [r7, #20]
 800468c:	f7ff ff90 	bl	80045b0 <NVIC_EncodePriority>
 8004690:	4602      	mov	r2, r0
 8004692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004696:	4611      	mov	r1, r2
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff5f 	bl	800455c <__NVIC_SetPriority>
}
 800469e:	bf00      	nop
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	4603      	mov	r3, r0
 80046ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff ff33 	bl	8004520 <__NVIC_EnableIRQ>
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b082      	sub	sp, #8
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff ffa4 	bl	8004618 <SysTick_Config>
 80046d0:	4603      	mov	r3, r0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
	...

080046dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e08d      	b.n	800480a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	4b47      	ldr	r3, [pc, #284]	; (8004814 <HAL_DMA_Init+0x138>)
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d80f      	bhi.n	800471a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	4b45      	ldr	r3, [pc, #276]	; (8004818 <HAL_DMA_Init+0x13c>)
 8004702:	4413      	add	r3, r2
 8004704:	4a45      	ldr	r2, [pc, #276]	; (800481c <HAL_DMA_Init+0x140>)
 8004706:	fba2 2303 	umull	r2, r3, r2, r3
 800470a:	091b      	lsrs	r3, r3, #4
 800470c:	009a      	lsls	r2, r3, #2
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a42      	ldr	r2, [pc, #264]	; (8004820 <HAL_DMA_Init+0x144>)
 8004716:	641a      	str	r2, [r3, #64]	; 0x40
 8004718:	e00e      	b.n	8004738 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	4b40      	ldr	r3, [pc, #256]	; (8004824 <HAL_DMA_Init+0x148>)
 8004722:	4413      	add	r3, r2
 8004724:	4a3d      	ldr	r2, [pc, #244]	; (800481c <HAL_DMA_Init+0x140>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	009a      	lsls	r2, r3, #2
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a3c      	ldr	r2, [pc, #240]	; (8004828 <HAL_DMA_Init+0x14c>)
 8004736:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800474e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004752:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800475c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004768:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004774:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f9b6 	bl	8004afc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004798:	d102      	bne.n	80047a0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047b4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d010      	beq.n	80047e0 <HAL_DMA_Init+0x104>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d80c      	bhi.n	80047e0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f9d6 	bl	8004b78 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047dc:	605a      	str	r2, [r3, #4]
 80047de:	e008      	b.n	80047f2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40020407 	.word	0x40020407
 8004818:	bffdfff8 	.word	0xbffdfff8
 800481c:	cccccccd 	.word	0xcccccccd
 8004820:	40020000 	.word	0x40020000
 8004824:	bffdfbf8 	.word	0xbffdfbf8
 8004828:	40020400 	.word	0x40020400

0800482c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_DMA_Start_IT+0x20>
 8004848:	2302      	movs	r3, #2
 800484a:	e066      	b.n	800491a <HAL_DMA_Start_IT+0xee>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d155      	bne.n	800490c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0201 	bic.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	68b9      	ldr	r1, [r7, #8]
 8004884:	68f8      	ldr	r0, [r7, #12]
 8004886:	f000 f8fb 	bl	8004a80 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 020e 	orr.w	r2, r2, #14
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e00f      	b.n	80048c4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0204 	bic.w	r2, r2, #4
 80048b2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 020a 	orr.w	r2, r2, #10
 80048c2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d007      	beq.n	80048e2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d007      	beq.n	80048fa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048f8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f042 0201 	orr.w	r2, r2, #1
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	e005      	b.n	8004918 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004914:	2302      	movs	r3, #2
 8004916:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004918:	7dfb      	ldrb	r3, [r7, #23]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	f003 031f 	and.w	r3, r3, #31
 8004942:	2204      	movs	r2, #4
 8004944:	409a      	lsls	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4013      	ands	r3, r2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d026      	beq.n	800499c <HAL_DMA_IRQHandler+0x7a>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d021      	beq.n	800499c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b00      	cmp	r3, #0
 8004964:	d107      	bne.n	8004976 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0204 	bic.w	r2, r2, #4
 8004974:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497a:	f003 021f 	and.w	r2, r3, #31
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	2104      	movs	r1, #4
 8004984:	fa01 f202 	lsl.w	r2, r1, r2
 8004988:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	2b00      	cmp	r3, #0
 8004990:	d071      	beq.n	8004a76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800499a:	e06c      	b.n	8004a76 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	2202      	movs	r2, #2
 80049a6:	409a      	lsls	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4013      	ands	r3, r2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d02e      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d029      	beq.n	8004a0e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10b      	bne.n	80049e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 020a 	bic.w	r2, r2, #10
 80049d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e4:	f003 021f 	and.w	r2, r3, #31
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	2102      	movs	r1, #2
 80049ee:	fa01 f202 	lsl.w	r2, r1, r2
 80049f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d038      	beq.n	8004a76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a0c:	e033      	b.n	8004a76 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	f003 031f 	and.w	r3, r3, #31
 8004a16:	2208      	movs	r2, #8
 8004a18:	409a      	lsls	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d02a      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d025      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 020e 	bic.w	r2, r2, #14
 8004a3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a40:	f003 021f 	and.w	r2, r3, #31
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a48:	2101      	movs	r1, #1
 8004a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004a4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d004      	beq.n	8004a78 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
}
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a96:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004aa8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aae:	f003 021f 	and.w	r2, r3, #31
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	fa01 f202 	lsl.w	r2, r1, r2
 8004abc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b10      	cmp	r3, #16
 8004acc:	d108      	bne.n	8004ae0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ade:	e007      	b.n	8004af0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	60da      	str	r2, [r3, #12]
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4b16      	ldr	r3, [pc, #88]	; (8004b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d802      	bhi.n	8004b16 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004b10:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	e001      	b.n	8004b1a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004b16:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004b18:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	3b08      	subs	r3, #8
 8004b26:	4a12      	ldr	r2, [pc, #72]	; (8004b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	091b      	lsrs	r3, r3, #4
 8004b2e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b34:	089b      	lsrs	r3, r3, #2
 8004b36:	009a      	lsls	r2, r3, #2
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a0b      	ldr	r2, [pc, #44]	; (8004b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004b46:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	2201      	movs	r2, #1
 8004b50:	409a      	lsls	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	40020407 	.word	0x40020407
 8004b68:	40020800 	.word	0x40020800
 8004b6c:	40020820 	.word	0x40020820
 8004b70:	cccccccd 	.word	0xcccccccd
 8004b74:	40020880 	.word	0x40020880

08004b78 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	461a      	mov	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a08      	ldr	r2, [pc, #32]	; (8004bbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004b9a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	f003 031f 	and.w	r3, r3, #31
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004bac:	bf00      	nop
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	1000823f 	.word	0x1000823f
 8004bbc:	40020940 	.word	0x40020940

08004bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004bce:	e15a      	b.n	8004e86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bdc:	4013      	ands	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 814c 	beq.w	8004e80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f003 0303 	and.w	r3, r3, #3
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d005      	beq.n	8004c00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d130      	bne.n	8004c62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	005b      	lsls	r3, r3, #1
 8004c0a:	2203      	movs	r2, #3
 8004c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4013      	ands	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	fa02 f303 	lsl.w	r3, r2, r3
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c36:	2201      	movs	r2, #1
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4013      	ands	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	091b      	lsrs	r3, r3, #4
 8004c4c:	f003 0201 	and.w	r2, r3, #1
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	fa02 f303 	lsl.w	r3, r2, r3
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 0303 	and.w	r3, r3, #3
 8004c6a:	2b03      	cmp	r3, #3
 8004c6c:	d017      	beq.n	8004c9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	2203      	movs	r2, #3
 8004c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4013      	ands	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	005b      	lsls	r3, r3, #1
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d123      	bne.n	8004cf2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	08da      	lsrs	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	3208      	adds	r2, #8
 8004cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	220f      	movs	r2, #15
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	08da      	lsrs	r2, r3, #3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3208      	adds	r2, #8
 8004cec:	6939      	ldr	r1, [r7, #16]
 8004cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004d02:	43db      	mvns	r3, r3
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	4013      	ands	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f003 0203 	and.w	r2, r3, #3
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80a6 	beq.w	8004e80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d34:	4b5b      	ldr	r3, [pc, #364]	; (8004ea4 <HAL_GPIO_Init+0x2e4>)
 8004d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d38:	4a5a      	ldr	r2, [pc, #360]	; (8004ea4 <HAL_GPIO_Init+0x2e4>)
 8004d3a:	f043 0301 	orr.w	r3, r3, #1
 8004d3e:	6613      	str	r3, [r2, #96]	; 0x60
 8004d40:	4b58      	ldr	r3, [pc, #352]	; (8004ea4 <HAL_GPIO_Init+0x2e4>)
 8004d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	60bb      	str	r3, [r7, #8]
 8004d4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d4c:	4a56      	ldr	r2, [pc, #344]	; (8004ea8 <HAL_GPIO_Init+0x2e8>)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	089b      	lsrs	r3, r3, #2
 8004d52:	3302      	adds	r3, #2
 8004d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	220f      	movs	r2, #15
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43db      	mvns	r3, r3
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004d76:	d01f      	beq.n	8004db8 <HAL_GPIO_Init+0x1f8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a4c      	ldr	r2, [pc, #304]	; (8004eac <HAL_GPIO_Init+0x2ec>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d019      	beq.n	8004db4 <HAL_GPIO_Init+0x1f4>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a4b      	ldr	r2, [pc, #300]	; (8004eb0 <HAL_GPIO_Init+0x2f0>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d013      	beq.n	8004db0 <HAL_GPIO_Init+0x1f0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a4a      	ldr	r2, [pc, #296]	; (8004eb4 <HAL_GPIO_Init+0x2f4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00d      	beq.n	8004dac <HAL_GPIO_Init+0x1ec>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a49      	ldr	r2, [pc, #292]	; (8004eb8 <HAL_GPIO_Init+0x2f8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d007      	beq.n	8004da8 <HAL_GPIO_Init+0x1e8>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a48      	ldr	r2, [pc, #288]	; (8004ebc <HAL_GPIO_Init+0x2fc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d101      	bne.n	8004da4 <HAL_GPIO_Init+0x1e4>
 8004da0:	2305      	movs	r3, #5
 8004da2:	e00a      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004da4:	2306      	movs	r3, #6
 8004da6:	e008      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004da8:	2304      	movs	r3, #4
 8004daa:	e006      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004dac:	2303      	movs	r3, #3
 8004dae:	e004      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e002      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004db4:	2301      	movs	r3, #1
 8004db6:	e000      	b.n	8004dba <HAL_GPIO_Init+0x1fa>
 8004db8:	2300      	movs	r3, #0
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	f002 0203 	and.w	r2, r2, #3
 8004dc0:	0092      	lsls	r2, r2, #2
 8004dc2:	4093      	lsls	r3, r2
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dca:	4937      	ldr	r1, [pc, #220]	; (8004ea8 <HAL_GPIO_Init+0x2e8>)
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	089b      	lsrs	r3, r3, #2
 8004dd0:	3302      	adds	r3, #2
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dd8:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <HAL_GPIO_Init+0x300>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	43db      	mvns	r3, r3
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4013      	ands	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d003      	beq.n	8004dfc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004dfc:	4a30      	ldr	r2, [pc, #192]	; (8004ec0 <HAL_GPIO_Init+0x300>)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004e02:	4b2f      	ldr	r3, [pc, #188]	; (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4013      	ands	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e26:	4a26      	ldr	r2, [pc, #152]	; (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004e2c:	4b24      	ldr	r3, [pc, #144]	; (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	43db      	mvns	r3, r3
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004e50:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e56:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4013      	ands	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e7a:	4a11      	ldr	r2, [pc, #68]	; (8004ec0 <HAL_GPIO_Init+0x300>)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	3301      	adds	r3, #1
 8004e84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f47f ae9d 	bne.w	8004bd0 <HAL_GPIO_Init+0x10>
  }
}
 8004e96:	bf00      	nop
 8004e98:	bf00      	nop
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	48000400 	.word	0x48000400
 8004eb0:	48000800 	.word	0x48000800
 8004eb4:	48000c00 	.word	0x48000c00
 8004eb8:	48001000 	.word	0x48001000
 8004ebc:	48001400 	.word	0x48001400
 8004ec0:	40010400 	.word	0x40010400

08004ec4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	887b      	ldrh	r3, [r7, #2]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004edc:	2301      	movs	r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]
 8004ee0:	e001      	b.n	8004ee6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	807b      	strh	r3, [r7, #2]
 8004f00:	4613      	mov	r3, r2
 8004f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f04:	787b      	ldrb	r3, [r7, #1]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f0a:	887a      	ldrh	r2, [r7, #2]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f10:	e002      	b.n	8004f18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f12:	887a      	ldrh	r2, [r7, #2]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f36:	887a      	ldrh	r2, [r7, #2]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	041a      	lsls	r2, r3, #16
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	43d9      	mvns	r1, r3
 8004f42:	887b      	ldrh	r3, [r7, #2]
 8004f44:	400b      	ands	r3, r1
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	619a      	str	r2, [r3, #24]
}
 8004f4c:	bf00      	nop
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f62:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f64:	695a      	ldr	r2, [r3, #20]
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d006      	beq.n	8004f7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f6e:	4a05      	ldr	r2, [pc, #20]	; (8004f84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f70:	88fb      	ldrh	r3, [r7, #6]
 8004f72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f74:	88fb      	ldrh	r3, [r7, #6]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 f806 	bl	8004f88 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f7c:	bf00      	nop
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40010400 	.word	0x40010400

08004f88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004f92:	bf00      	nop
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
	...

08004fa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d141      	bne.n	8005032 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004fae:	4b4b      	ldr	r3, [pc, #300]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fba:	d131      	bne.n	8005020 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fbc:	4b47      	ldr	r3, [pc, #284]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fc2:	4a46      	ldr	r2, [pc, #280]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004fcc:	4b43      	ldr	r3, [pc, #268]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fd4:	4a41      	ldr	r2, [pc, #260]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004fdc:	4b40      	ldr	r3, [pc, #256]	; (80050e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2232      	movs	r2, #50	; 0x32
 8004fe2:	fb02 f303 	mul.w	r3, r2, r3
 8004fe6:	4a3f      	ldr	r2, [pc, #252]	; (80050e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fec:	0c9b      	lsrs	r3, r3, #18
 8004fee:	3301      	adds	r3, #1
 8004ff0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ff2:	e002      	b.n	8004ffa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ffa:	4b38      	ldr	r3, [pc, #224]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005006:	d102      	bne.n	800500e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f2      	bne.n	8004ff4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800500e:	4b33      	ldr	r3, [pc, #204]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800501a:	d158      	bne.n	80050ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e057      	b.n	80050d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005020:	4b2e      	ldr	r3, [pc, #184]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005026:	4a2d      	ldr	r2, [pc, #180]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800502c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005030:	e04d      	b.n	80050ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005038:	d141      	bne.n	80050be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800503a:	4b28      	ldr	r3, [pc, #160]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005046:	d131      	bne.n	80050ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005048:	4b24      	ldr	r3, [pc, #144]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800504a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800504e:	4a23      	ldr	r2, [pc, #140]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005054:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005058:	4b20      	ldr	r3, [pc, #128]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005060:	4a1e      	ldr	r2, [pc, #120]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005066:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005068:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2232      	movs	r2, #50	; 0x32
 800506e:	fb02 f303 	mul.w	r3, r2, r3
 8005072:	4a1c      	ldr	r2, [pc, #112]	; (80050e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005074:	fba2 2303 	umull	r2, r3, r2, r3
 8005078:	0c9b      	lsrs	r3, r3, #18
 800507a:	3301      	adds	r3, #1
 800507c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800507e:	e002      	b.n	8005086 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3b01      	subs	r3, #1
 8005084:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005086:	4b15      	ldr	r3, [pc, #84]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800508e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005092:	d102      	bne.n	800509a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1f2      	bne.n	8005080 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800509a:	4b10      	ldr	r3, [pc, #64]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050a6:	d112      	bne.n	80050ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e011      	b.n	80050d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050ac:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050b2:	4a0a      	ldr	r2, [pc, #40]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80050bc:	e007      	b.n	80050ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050be:	4b07      	ldr	r3, [pc, #28]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80050c6:	4a05      	ldr	r2, [pc, #20]	; (80050dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	40007000 	.word	0x40007000
 80050e0:	20000000 	.word	0x20000000
 80050e4:	431bde83 	.word	0x431bde83

080050e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80050ec:	4b05      	ldr	r3, [pc, #20]	; (8005104 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	4a04      	ldr	r2, [pc, #16]	; (8005104 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80050f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050f6:	6093      	str	r3, [r2, #8]
}
 80050f8:	bf00      	nop
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	40007000 	.word	0x40007000

08005108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e306      	b.n	8005728 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d075      	beq.n	8005212 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005126:	4b97      	ldr	r3, [pc, #604]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 030c 	and.w	r3, r3, #12
 800512e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005130:	4b94      	ldr	r3, [pc, #592]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0303 	and.w	r3, r3, #3
 8005138:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	2b0c      	cmp	r3, #12
 800513e:	d102      	bne.n	8005146 <HAL_RCC_OscConfig+0x3e>
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2b03      	cmp	r3, #3
 8005144:	d002      	beq.n	800514c <HAL_RCC_OscConfig+0x44>
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b08      	cmp	r3, #8
 800514a:	d10b      	bne.n	8005164 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800514c:	4b8d      	ldr	r3, [pc, #564]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d05b      	beq.n	8005210 <HAL_RCC_OscConfig+0x108>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d157      	bne.n	8005210 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e2e1      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800516c:	d106      	bne.n	800517c <HAL_RCC_OscConfig+0x74>
 800516e:	4b85      	ldr	r3, [pc, #532]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a84      	ldr	r2, [pc, #528]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 8005174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	e01d      	b.n	80051b8 <HAL_RCC_OscConfig+0xb0>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005184:	d10c      	bne.n	80051a0 <HAL_RCC_OscConfig+0x98>
 8005186:	4b7f      	ldr	r3, [pc, #508]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a7e      	ldr	r2, [pc, #504]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 800518c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	4b7c      	ldr	r3, [pc, #496]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a7b      	ldr	r2, [pc, #492]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 8005198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	e00b      	b.n	80051b8 <HAL_RCC_OscConfig+0xb0>
 80051a0:	4b78      	ldr	r3, [pc, #480]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a77      	ldr	r2, [pc, #476]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 80051a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	4b75      	ldr	r3, [pc, #468]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a74      	ldr	r2, [pc, #464]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 80051b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d013      	beq.n	80051e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7fc fbee 	bl	80019a0 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c8:	f7fc fbea 	bl	80019a0 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b64      	cmp	r3, #100	; 0x64
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e2a6      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051da:	4b6a      	ldr	r3, [pc, #424]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0xc0>
 80051e6:	e014      	b.n	8005212 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e8:	f7fc fbda 	bl	80019a0 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051f0:	f7fc fbd6 	bl	80019a0 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b64      	cmp	r3, #100	; 0x64
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e292      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005202:	4b60      	ldr	r3, [pc, #384]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0xe8>
 800520e:	e000      	b.n	8005212 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d075      	beq.n	800530a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800521e:	4b59      	ldr	r3, [pc, #356]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 030c 	and.w	r3, r3, #12
 8005226:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005228:	4b56      	ldr	r3, [pc, #344]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	2b0c      	cmp	r3, #12
 8005236:	d102      	bne.n	800523e <HAL_RCC_OscConfig+0x136>
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2b02      	cmp	r3, #2
 800523c:	d002      	beq.n	8005244 <HAL_RCC_OscConfig+0x13c>
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	2b04      	cmp	r3, #4
 8005242:	d11f      	bne.n	8005284 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005244:	4b4f      	ldr	r3, [pc, #316]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_RCC_OscConfig+0x154>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e265      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800525c:	4b49      	ldr	r3, [pc, #292]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	061b      	lsls	r3, r3, #24
 800526a:	4946      	ldr	r1, [pc, #280]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 800526c:	4313      	orrs	r3, r2
 800526e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005270:	4b45      	ldr	r3, [pc, #276]	; (8005388 <HAL_RCC_OscConfig+0x280>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4618      	mov	r0, r3
 8005276:	f7fc fb47 	bl	8001908 <HAL_InitTick>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d043      	beq.n	8005308 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e251      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d023      	beq.n	80052d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800528c:	4b3d      	ldr	r3, [pc, #244]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a3c      	ldr	r2, [pc, #240]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 8005292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005298:	f7fc fb82 	bl	80019a0 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052a0:	f7fc fb7e 	bl	80019a0 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e23a      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052b2:	4b34      	ldr	r3, [pc, #208]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f0      	beq.n	80052a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052be:	4b31      	ldr	r3, [pc, #196]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	061b      	lsls	r3, r3, #24
 80052cc:	492d      	ldr	r1, [pc, #180]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 80052ce:	4313      	orrs	r3, r2
 80052d0:	604b      	str	r3, [r1, #4]
 80052d2:	e01a      	b.n	800530a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052d4:	4b2b      	ldr	r3, [pc, #172]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a2a      	ldr	r2, [pc, #168]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 80052da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e0:	f7fc fb5e 	bl	80019a0 <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052e8:	f7fc fb5a 	bl	80019a0 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e216      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052fa:	4b22      	ldr	r3, [pc, #136]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f0      	bne.n	80052e8 <HAL_RCC_OscConfig+0x1e0>
 8005306:	e000      	b.n	800530a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005308:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	2b00      	cmp	r3, #0
 8005314:	d041      	beq.n	800539a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	695b      	ldr	r3, [r3, #20]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d01c      	beq.n	8005358 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800531e:	4b19      	ldr	r3, [pc, #100]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 8005320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005324:	4a17      	ldr	r2, [pc, #92]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 8005326:	f043 0301 	orr.w	r3, r3, #1
 800532a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532e:	f7fc fb37 	bl	80019a0 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005334:	e008      	b.n	8005348 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005336:	f7fc fb33 	bl	80019a0 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e1ef      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005348:	4b0e      	ldr	r3, [pc, #56]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 800534a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0ef      	beq.n	8005336 <HAL_RCC_OscConfig+0x22e>
 8005356:	e020      	b.n	800539a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 800535a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800535e:	4a09      	ldr	r2, [pc, #36]	; (8005384 <HAL_RCC_OscConfig+0x27c>)
 8005360:	f023 0301 	bic.w	r3, r3, #1
 8005364:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005368:	f7fc fb1a 	bl	80019a0 <HAL_GetTick>
 800536c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800536e:	e00d      	b.n	800538c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005370:	f7fc fb16 	bl	80019a0 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d906      	bls.n	800538c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e1d2      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
 8005382:	bf00      	nop
 8005384:	40021000 	.word	0x40021000
 8005388:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800538c:	4b8c      	ldr	r3, [pc, #560]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 800538e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1ea      	bne.n	8005370 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 80a6 	beq.w	80054f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053a8:	2300      	movs	r3, #0
 80053aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053ac:	4b84      	ldr	r3, [pc, #528]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 80053ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d101      	bne.n	80053bc <HAL_RCC_OscConfig+0x2b4>
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <HAL_RCC_OscConfig+0x2b6>
 80053bc:	2300      	movs	r3, #0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00d      	beq.n	80053de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053c2:	4b7f      	ldr	r3, [pc, #508]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 80053c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c6:	4a7e      	ldr	r2, [pc, #504]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 80053c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053cc:	6593      	str	r3, [r2, #88]	; 0x58
 80053ce:	4b7c      	ldr	r3, [pc, #496]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 80053d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80053da:	2301      	movs	r3, #1
 80053dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053de:	4b79      	ldr	r3, [pc, #484]	; (80055c4 <HAL_RCC_OscConfig+0x4bc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d118      	bne.n	800541c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053ea:	4b76      	ldr	r3, [pc, #472]	; (80055c4 <HAL_RCC_OscConfig+0x4bc>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a75      	ldr	r2, [pc, #468]	; (80055c4 <HAL_RCC_OscConfig+0x4bc>)
 80053f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053f6:	f7fc fad3 	bl	80019a0 <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053fe:	f7fc facf 	bl	80019a0 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e18b      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005410:	4b6c      	ldr	r3, [pc, #432]	; (80055c4 <HAL_RCC_OscConfig+0x4bc>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0f0      	beq.n	80053fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d108      	bne.n	8005436 <HAL_RCC_OscConfig+0x32e>
 8005424:	4b66      	ldr	r3, [pc, #408]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 8005426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542a:	4a65      	ldr	r2, [pc, #404]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 800542c:	f043 0301 	orr.w	r3, r3, #1
 8005430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005434:	e024      	b.n	8005480 <HAL_RCC_OscConfig+0x378>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b05      	cmp	r3, #5
 800543c:	d110      	bne.n	8005460 <HAL_RCC_OscConfig+0x358>
 800543e:	4b60      	ldr	r3, [pc, #384]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 8005440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005444:	4a5e      	ldr	r2, [pc, #376]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 8005446:	f043 0304 	orr.w	r3, r3, #4
 800544a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800544e:	4b5c      	ldr	r3, [pc, #368]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 8005450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005454:	4a5a      	ldr	r2, [pc, #360]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 8005456:	f043 0301 	orr.w	r3, r3, #1
 800545a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800545e:	e00f      	b.n	8005480 <HAL_RCC_OscConfig+0x378>
 8005460:	4b57      	ldr	r3, [pc, #348]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 8005462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005466:	4a56      	ldr	r2, [pc, #344]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 8005468:	f023 0301 	bic.w	r3, r3, #1
 800546c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005470:	4b53      	ldr	r3, [pc, #332]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 8005472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005476:	4a52      	ldr	r2, [pc, #328]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 8005478:	f023 0304 	bic.w	r3, r3, #4
 800547c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d016      	beq.n	80054b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005488:	f7fc fa8a 	bl	80019a0 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800548e:	e00a      	b.n	80054a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005490:	f7fc fa86 	bl	80019a0 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	f241 3288 	movw	r2, #5000	; 0x1388
 800549e:	4293      	cmp	r3, r2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e140      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054a6:	4b46      	ldr	r3, [pc, #280]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 80054a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0ed      	beq.n	8005490 <HAL_RCC_OscConfig+0x388>
 80054b4:	e015      	b.n	80054e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b6:	f7fc fa73 	bl	80019a0 <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054bc:	e00a      	b.n	80054d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054be:	f7fc fa6f 	bl	80019a0 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e129      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054d4:	4b3a      	ldr	r3, [pc, #232]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 80054d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1ed      	bne.n	80054be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054e2:	7ffb      	ldrb	r3, [r7, #31]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d105      	bne.n	80054f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054e8:	4b35      	ldr	r3, [pc, #212]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 80054ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ec:	4a34      	ldr	r2, [pc, #208]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 80054ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0320 	and.w	r3, r3, #32
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d03c      	beq.n	800557a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01c      	beq.n	8005542 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005508:	4b2d      	ldr	r3, [pc, #180]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 800550a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800550e:	4a2c      	ldr	r2, [pc, #176]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 8005510:	f043 0301 	orr.w	r3, r3, #1
 8005514:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fc fa42 	bl	80019a0 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005520:	f7fc fa3e 	bl	80019a0 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e0fa      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005532:	4b23      	ldr	r3, [pc, #140]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 8005534:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0ef      	beq.n	8005520 <HAL_RCC_OscConfig+0x418>
 8005540:	e01b      	b.n	800557a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005542:	4b1f      	ldr	r3, [pc, #124]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 8005544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005548:	4a1d      	ldr	r2, [pc, #116]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 800554a:	f023 0301 	bic.w	r3, r3, #1
 800554e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005552:	f7fc fa25 	bl	80019a0 <HAL_GetTick>
 8005556:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005558:	e008      	b.n	800556c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800555a:	f7fc fa21 	bl	80019a0 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e0dd      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800556c:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 800556e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1ef      	bne.n	800555a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 80d1 	beq.w	8005726 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005584:	4b0e      	ldr	r3, [pc, #56]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f003 030c 	and.w	r3, r3, #12
 800558c:	2b0c      	cmp	r3, #12
 800558e:	f000 808b 	beq.w	80056a8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	2b02      	cmp	r3, #2
 8005598:	d15e      	bne.n	8005658 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800559a:	4b09      	ldr	r3, [pc, #36]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a08      	ldr	r2, [pc, #32]	; (80055c0 <HAL_RCC_OscConfig+0x4b8>)
 80055a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a6:	f7fc f9fb 	bl	80019a0 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055ac:	e00c      	b.n	80055c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ae:	f7fc f9f7 	bl	80019a0 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d905      	bls.n	80055c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e0b3      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
 80055c0:	40021000 	.word	0x40021000
 80055c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055c8:	4b59      	ldr	r3, [pc, #356]	; (8005730 <HAL_RCC_OscConfig+0x628>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1ec      	bne.n	80055ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055d4:	4b56      	ldr	r3, [pc, #344]	; (8005730 <HAL_RCC_OscConfig+0x628>)
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	4b56      	ldr	r3, [pc, #344]	; (8005734 <HAL_RCC_OscConfig+0x62c>)
 80055da:	4013      	ands	r3, r2
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6a11      	ldr	r1, [r2, #32]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055e4:	3a01      	subs	r2, #1
 80055e6:	0112      	lsls	r2, r2, #4
 80055e8:	4311      	orrs	r1, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80055ee:	0212      	lsls	r2, r2, #8
 80055f0:	4311      	orrs	r1, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055f6:	0852      	lsrs	r2, r2, #1
 80055f8:	3a01      	subs	r2, #1
 80055fa:	0552      	lsls	r2, r2, #21
 80055fc:	4311      	orrs	r1, r2
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005602:	0852      	lsrs	r2, r2, #1
 8005604:	3a01      	subs	r2, #1
 8005606:	0652      	lsls	r2, r2, #25
 8005608:	4311      	orrs	r1, r2
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800560e:	06d2      	lsls	r2, r2, #27
 8005610:	430a      	orrs	r2, r1
 8005612:	4947      	ldr	r1, [pc, #284]	; (8005730 <HAL_RCC_OscConfig+0x628>)
 8005614:	4313      	orrs	r3, r2
 8005616:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005618:	4b45      	ldr	r3, [pc, #276]	; (8005730 <HAL_RCC_OscConfig+0x628>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a44      	ldr	r2, [pc, #272]	; (8005730 <HAL_RCC_OscConfig+0x628>)
 800561e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005622:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005624:	4b42      	ldr	r3, [pc, #264]	; (8005730 <HAL_RCC_OscConfig+0x628>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	4a41      	ldr	r2, [pc, #260]	; (8005730 <HAL_RCC_OscConfig+0x628>)
 800562a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800562e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005630:	f7fc f9b6 	bl	80019a0 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005638:	f7fc f9b2 	bl	80019a0 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e06e      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800564a:	4b39      	ldr	r3, [pc, #228]	; (8005730 <HAL_RCC_OscConfig+0x628>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0f0      	beq.n	8005638 <HAL_RCC_OscConfig+0x530>
 8005656:	e066      	b.n	8005726 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005658:	4b35      	ldr	r3, [pc, #212]	; (8005730 <HAL_RCC_OscConfig+0x628>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a34      	ldr	r2, [pc, #208]	; (8005730 <HAL_RCC_OscConfig+0x628>)
 800565e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005662:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005664:	4b32      	ldr	r3, [pc, #200]	; (8005730 <HAL_RCC_OscConfig+0x628>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4a31      	ldr	r2, [pc, #196]	; (8005730 <HAL_RCC_OscConfig+0x628>)
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005670:	4b2f      	ldr	r3, [pc, #188]	; (8005730 <HAL_RCC_OscConfig+0x628>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	4a2e      	ldr	r2, [pc, #184]	; (8005730 <HAL_RCC_OscConfig+0x628>)
 8005676:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800567a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800567e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005680:	f7fc f98e 	bl	80019a0 <HAL_GetTick>
 8005684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005686:	e008      	b.n	800569a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005688:	f7fc f98a 	bl	80019a0 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	2b02      	cmp	r3, #2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e046      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800569a:	4b25      	ldr	r3, [pc, #148]	; (8005730 <HAL_RCC_OscConfig+0x628>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_OscConfig+0x580>
 80056a6:	e03e      	b.n	8005726 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	69db      	ldr	r3, [r3, #28]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e039      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80056b4:	4b1e      	ldr	r3, [pc, #120]	; (8005730 <HAL_RCC_OscConfig+0x628>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f003 0203 	and.w	r2, r3, #3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d12c      	bne.n	8005722 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	3b01      	subs	r3, #1
 80056d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d123      	bne.n	8005722 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d11b      	bne.n	8005722 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d113      	bne.n	8005722 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	085b      	lsrs	r3, r3, #1
 8005706:	3b01      	subs	r3, #1
 8005708:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800570a:	429a      	cmp	r2, r3
 800570c:	d109      	bne.n	8005722 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005718:	085b      	lsrs	r3, r3, #1
 800571a:	3b01      	subs	r3, #1
 800571c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800571e:	429a      	cmp	r2, r3
 8005720:	d001      	beq.n	8005726 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e000      	b.n	8005728 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3720      	adds	r7, #32
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40021000 	.word	0x40021000
 8005734:	019f800c 	.word	0x019f800c

08005738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e11e      	b.n	800598e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005750:	4b91      	ldr	r3, [pc, #580]	; (8005998 <HAL_RCC_ClockConfig+0x260>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	429a      	cmp	r2, r3
 800575c:	d910      	bls.n	8005780 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800575e:	4b8e      	ldr	r3, [pc, #568]	; (8005998 <HAL_RCC_ClockConfig+0x260>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f023 020f 	bic.w	r2, r3, #15
 8005766:	498c      	ldr	r1, [pc, #560]	; (8005998 <HAL_RCC_ClockConfig+0x260>)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	4313      	orrs	r3, r2
 800576c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800576e:	4b8a      	ldr	r3, [pc, #552]	; (8005998 <HAL_RCC_ClockConfig+0x260>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 030f 	and.w	r3, r3, #15
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	429a      	cmp	r2, r3
 800577a:	d001      	beq.n	8005780 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e106      	b.n	800598e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b00      	cmp	r3, #0
 800578a:	d073      	beq.n	8005874 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2b03      	cmp	r3, #3
 8005792:	d129      	bne.n	80057e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005794:	4b81      	ldr	r3, [pc, #516]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e0f4      	b.n	800598e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80057a4:	f000 f99e 	bl	8005ae4 <RCC_GetSysClockFreqFromPLLSource>
 80057a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	4a7c      	ldr	r2, [pc, #496]	; (80059a0 <HAL_RCC_ClockConfig+0x268>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d93f      	bls.n	8005832 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057b2:	4b7a      	ldr	r3, [pc, #488]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d009      	beq.n	80057d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d033      	beq.n	8005832 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d12f      	bne.n	8005832 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057d2:	4b72      	ldr	r3, [pc, #456]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057da:	4a70      	ldr	r2, [pc, #448]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 80057dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057e2:	2380      	movs	r3, #128	; 0x80
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	e024      	b.n	8005832 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d107      	bne.n	8005800 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057f0:	4b6a      	ldr	r3, [pc, #424]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d109      	bne.n	8005810 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0c6      	b.n	800598e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005800:	4b66      	ldr	r3, [pc, #408]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e0be      	b.n	800598e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005810:	f000 f8ce 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 8005814:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	4a61      	ldr	r2, [pc, #388]	; (80059a0 <HAL_RCC_ClockConfig+0x268>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d909      	bls.n	8005832 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800581e:	4b5f      	ldr	r3, [pc, #380]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005826:	4a5d      	ldr	r2, [pc, #372]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 8005828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005832:	4b5a      	ldr	r3, [pc, #360]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f023 0203 	bic.w	r2, r3, #3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	4957      	ldr	r1, [pc, #348]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 8005840:	4313      	orrs	r3, r2
 8005842:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005844:	f7fc f8ac 	bl	80019a0 <HAL_GetTick>
 8005848:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800584a:	e00a      	b.n	8005862 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800584c:	f7fc f8a8 	bl	80019a0 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	f241 3288 	movw	r2, #5000	; 0x1388
 800585a:	4293      	cmp	r3, r2
 800585c:	d901      	bls.n	8005862 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e095      	b.n	800598e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005862:	4b4e      	ldr	r3, [pc, #312]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 020c 	and.w	r2, r3, #12
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	429a      	cmp	r2, r3
 8005872:	d1eb      	bne.n	800584c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d023      	beq.n	80058c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800588c:	4b43      	ldr	r3, [pc, #268]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	4a42      	ldr	r2, [pc, #264]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 8005892:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005896:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d007      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80058a4:	4b3d      	ldr	r3, [pc, #244]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80058ac:	4a3b      	ldr	r2, [pc, #236]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 80058ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058b4:	4b39      	ldr	r3, [pc, #228]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	4936      	ldr	r1, [pc, #216]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	608b      	str	r3, [r1, #8]
 80058c6:	e008      	b.n	80058da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	2b80      	cmp	r3, #128	; 0x80
 80058cc:	d105      	bne.n	80058da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80058ce:	4b33      	ldr	r3, [pc, #204]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	4a32      	ldr	r2, [pc, #200]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 80058d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058da:	4b2f      	ldr	r3, [pc, #188]	; (8005998 <HAL_RCC_ClockConfig+0x260>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 030f 	and.w	r3, r3, #15
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d21d      	bcs.n	8005924 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e8:	4b2b      	ldr	r3, [pc, #172]	; (8005998 <HAL_RCC_ClockConfig+0x260>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f023 020f 	bic.w	r2, r3, #15
 80058f0:	4929      	ldr	r1, [pc, #164]	; (8005998 <HAL_RCC_ClockConfig+0x260>)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058f8:	f7fc f852 	bl	80019a0 <HAL_GetTick>
 80058fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058fe:	e00a      	b.n	8005916 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005900:	f7fc f84e 	bl	80019a0 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	f241 3288 	movw	r2, #5000	; 0x1388
 800590e:	4293      	cmp	r3, r2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e03b      	b.n	800598e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005916:	4b20      	ldr	r3, [pc, #128]	; (8005998 <HAL_RCC_ClockConfig+0x260>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d1ed      	bne.n	8005900 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b00      	cmp	r3, #0
 800592e:	d008      	beq.n	8005942 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005930:	4b1a      	ldr	r3, [pc, #104]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	4917      	ldr	r1, [pc, #92]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 800593e:	4313      	orrs	r3, r2
 8005940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0308 	and.w	r3, r3, #8
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800594e:	4b13      	ldr	r3, [pc, #76]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	490f      	ldr	r1, [pc, #60]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 800595e:	4313      	orrs	r3, r2
 8005960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005962:	f000 f825 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 8005966:	4602      	mov	r2, r0
 8005968:	4b0c      	ldr	r3, [pc, #48]	; (800599c <HAL_RCC_ClockConfig+0x264>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	091b      	lsrs	r3, r3, #4
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	490c      	ldr	r1, [pc, #48]	; (80059a4 <HAL_RCC_ClockConfig+0x26c>)
 8005974:	5ccb      	ldrb	r3, [r1, r3]
 8005976:	f003 031f 	and.w	r3, r3, #31
 800597a:	fa22 f303 	lsr.w	r3, r2, r3
 800597e:	4a0a      	ldr	r2, [pc, #40]	; (80059a8 <HAL_RCC_ClockConfig+0x270>)
 8005980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005982:	4b0a      	ldr	r3, [pc, #40]	; (80059ac <HAL_RCC_ClockConfig+0x274>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f7fb ffbe 	bl	8001908 <HAL_InitTick>
 800598c:	4603      	mov	r3, r0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	40022000 	.word	0x40022000
 800599c:	40021000 	.word	0x40021000
 80059a0:	04c4b400 	.word	0x04c4b400
 80059a4:	0800922c 	.word	0x0800922c
 80059a8:	20000000 	.word	0x20000000
 80059ac:	20000004 	.word	0x20000004

080059b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80059b6:	4b2c      	ldr	r3, [pc, #176]	; (8005a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 030c 	and.w	r3, r3, #12
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d102      	bne.n	80059c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059c2:	4b2a      	ldr	r3, [pc, #168]	; (8005a6c <HAL_RCC_GetSysClockFreq+0xbc>)
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	e047      	b.n	8005a58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80059c8:	4b27      	ldr	r3, [pc, #156]	; (8005a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 030c 	and.w	r3, r3, #12
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d102      	bne.n	80059da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059d4:	4b26      	ldr	r3, [pc, #152]	; (8005a70 <HAL_RCC_GetSysClockFreq+0xc0>)
 80059d6:	613b      	str	r3, [r7, #16]
 80059d8:	e03e      	b.n	8005a58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80059da:	4b23      	ldr	r3, [pc, #140]	; (8005a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f003 030c 	and.w	r3, r3, #12
 80059e2:	2b0c      	cmp	r3, #12
 80059e4:	d136      	bne.n	8005a54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80059e6:	4b20      	ldr	r3, [pc, #128]	; (8005a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80059f0:	4b1d      	ldr	r3, [pc, #116]	; (8005a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	091b      	lsrs	r3, r3, #4
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	3301      	adds	r3, #1
 80059fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	d10c      	bne.n	8005a1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a04:	4a1a      	ldr	r2, [pc, #104]	; (8005a70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0c:	4a16      	ldr	r2, [pc, #88]	; (8005a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a0e:	68d2      	ldr	r2, [r2, #12]
 8005a10:	0a12      	lsrs	r2, r2, #8
 8005a12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a16:	fb02 f303 	mul.w	r3, r2, r3
 8005a1a:	617b      	str	r3, [r7, #20]
      break;
 8005a1c:	e00c      	b.n	8005a38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a1e:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a26:	4a10      	ldr	r2, [pc, #64]	; (8005a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a28:	68d2      	ldr	r2, [r2, #12]
 8005a2a:	0a12      	lsrs	r2, r2, #8
 8005a2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a30:	fb02 f303 	mul.w	r3, r2, r3
 8005a34:	617b      	str	r3, [r7, #20]
      break;
 8005a36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005a38:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	0e5b      	lsrs	r3, r3, #25
 8005a3e:	f003 0303 	and.w	r3, r3, #3
 8005a42:	3301      	adds	r3, #1
 8005a44:	005b      	lsls	r3, r3, #1
 8005a46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	e001      	b.n	8005a58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005a58:	693b      	ldr	r3, [r7, #16]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	00f42400 	.word	0x00f42400
 8005a70:	016e3600 	.word	0x016e3600

08005a74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a78:	4b03      	ldr	r3, [pc, #12]	; (8005a88 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	20000000 	.word	0x20000000

08005a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005a90:	f7ff fff0 	bl	8005a74 <HAL_RCC_GetHCLKFreq>
 8005a94:	4602      	mov	r2, r0
 8005a96:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	0a1b      	lsrs	r3, r3, #8
 8005a9c:	f003 0307 	and.w	r3, r3, #7
 8005aa0:	4904      	ldr	r1, [pc, #16]	; (8005ab4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aa2:	5ccb      	ldrb	r3, [r1, r3]
 8005aa4:	f003 031f 	and.w	r3, r3, #31
 8005aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	0800923c 	.word	0x0800923c

08005ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005abc:	f7ff ffda 	bl	8005a74 <HAL_RCC_GetHCLKFreq>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	4b06      	ldr	r3, [pc, #24]	; (8005adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	0adb      	lsrs	r3, r3, #11
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	4904      	ldr	r1, [pc, #16]	; (8005ae0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ace:	5ccb      	ldrb	r3, [r1, r3]
 8005ad0:	f003 031f 	and.w	r3, r3, #31
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	0800923c 	.word	0x0800923c

08005ae4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005aea:	4b1e      	ldr	r3, [pc, #120]	; (8005b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	f003 0303 	and.w	r3, r3, #3
 8005af2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005af4:	4b1b      	ldr	r3, [pc, #108]	; (8005b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	091b      	lsrs	r3, r3, #4
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	3301      	adds	r3, #1
 8005b00:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d10c      	bne.n	8005b22 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b08:	4a17      	ldr	r2, [pc, #92]	; (8005b68 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b10:	4a14      	ldr	r2, [pc, #80]	; (8005b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b12:	68d2      	ldr	r2, [r2, #12]
 8005b14:	0a12      	lsrs	r2, r2, #8
 8005b16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b1a:	fb02 f303 	mul.w	r3, r2, r3
 8005b1e:	617b      	str	r3, [r7, #20]
    break;
 8005b20:	e00c      	b.n	8005b3c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b22:	4a12      	ldr	r2, [pc, #72]	; (8005b6c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2a:	4a0e      	ldr	r2, [pc, #56]	; (8005b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b2c:	68d2      	ldr	r2, [r2, #12]
 8005b2e:	0a12      	lsrs	r2, r2, #8
 8005b30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005b34:	fb02 f303 	mul.w	r3, r2, r3
 8005b38:	617b      	str	r3, [r7, #20]
    break;
 8005b3a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b3c:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	0e5b      	lsrs	r3, r3, #25
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	3301      	adds	r3, #1
 8005b48:	005b      	lsls	r3, r3, #1
 8005b4a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b54:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005b56:	687b      	ldr	r3, [r7, #4]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	40021000 	.word	0x40021000
 8005b68:	016e3600 	.word	0x016e3600
 8005b6c:	00f42400 	.word	0x00f42400

08005b70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b78:	2300      	movs	r3, #0
 8005b7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 8098 	beq.w	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b92:	4b43      	ldr	r3, [pc, #268]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10d      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b9e:	4b40      	ldr	r3, [pc, #256]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba2:	4a3f      	ldr	r2, [pc, #252]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ba8:	6593      	str	r3, [r2, #88]	; 0x58
 8005baa:	4b3d      	ldr	r3, [pc, #244]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	60bb      	str	r3, [r7, #8]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005bba:	4b3a      	ldr	r3, [pc, #232]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a39      	ldr	r2, [pc, #228]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bc6:	f7fb feeb 	bl	80019a0 <HAL_GetTick>
 8005bca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bcc:	e009      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bce:	f7fb fee7 	bl	80019a0 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d902      	bls.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	74fb      	strb	r3, [r7, #19]
        break;
 8005be0:	e005      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005be2:	4b30      	ldr	r3, [pc, #192]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0ef      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005bee:	7cfb      	ldrb	r3, [r7, #19]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d159      	bne.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bf4:	4b2a      	ldr	r3, [pc, #168]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bfe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d01e      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d019      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c10:	4b23      	ldr	r3, [pc, #140]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c1c:	4b20      	ldr	r3, [pc, #128]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c22:	4a1f      	ldr	r2, [pc, #124]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c2c:	4b1c      	ldr	r3, [pc, #112]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c32:	4a1b      	ldr	r2, [pc, #108]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c3c:	4a18      	ldr	r2, [pc, #96]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d016      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4e:	f7fb fea7 	bl	80019a0 <HAL_GetTick>
 8005c52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c54:	e00b      	b.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c56:	f7fb fea3 	bl	80019a0 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d902      	bls.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005c68:	2303      	movs	r3, #3
 8005c6a:	74fb      	strb	r3, [r7, #19]
            break;
 8005c6c:	e006      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d0ec      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005c7c:	7cfb      	ldrb	r3, [r7, #19]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10b      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c82:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c90:	4903      	ldr	r1, [pc, #12]	; (8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c98:	e008      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c9a:	7cfb      	ldrb	r3, [r7, #19]
 8005c9c:	74bb      	strb	r3, [r7, #18]
 8005c9e:	e005      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca8:	7cfb      	ldrb	r3, [r7, #19]
 8005caa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005cac:	7c7b      	ldrb	r3, [r7, #17]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d105      	bne.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cb2:	4ba7      	ldr	r3, [pc, #668]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb6:	4aa6      	ldr	r2, [pc, #664]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005cca:	4ba1      	ldr	r3, [pc, #644]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd0:	f023 0203 	bic.w	r2, r3, #3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	499d      	ldr	r1, [pc, #628]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00a      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cec:	4b98      	ldr	r3, [pc, #608]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf2:	f023 020c 	bic.w	r2, r3, #12
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	4995      	ldr	r1, [pc, #596]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0304 	and.w	r3, r3, #4
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00a      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d0e:	4b90      	ldr	r3, [pc, #576]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	498c      	ldr	r1, [pc, #560]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0308 	and.w	r3, r3, #8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00a      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d30:	4b87      	ldr	r3, [pc, #540]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	4984      	ldr	r1, [pc, #528]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d40:	4313      	orrs	r3, r2
 8005d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0310 	and.w	r3, r3, #16
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d52:	4b7f      	ldr	r3, [pc, #508]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	497b      	ldr	r1, [pc, #492]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0320 	and.w	r3, r3, #32
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00a      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d74:	4b76      	ldr	r3, [pc, #472]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	4973      	ldr	r1, [pc, #460]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00a      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d96:	4b6e      	ldr	r3, [pc, #440]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	496a      	ldr	r1, [pc, #424]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d00a      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005db8:	4b65      	ldr	r3, [pc, #404]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	4962      	ldr	r1, [pc, #392]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dda:	4b5d      	ldr	r3, [pc, #372]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	4959      	ldr	r1, [pc, #356]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005dfc:	4b54      	ldr	r3, [pc, #336]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e02:	f023 0203 	bic.w	r2, r3, #3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0a:	4951      	ldr	r1, [pc, #324]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e1e:	4b4c      	ldr	r3, [pc, #304]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2c:	4948      	ldr	r1, [pc, #288]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d015      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e40:	4b43      	ldr	r3, [pc, #268]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	4940      	ldr	r1, [pc, #256]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e5e:	d105      	bne.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e60:	4b3b      	ldr	r3, [pc, #236]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4a3a      	ldr	r2, [pc, #232]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d015      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e78:	4b35      	ldr	r3, [pc, #212]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e86:	4932      	ldr	r1, [pc, #200]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e96:	d105      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e98:	4b2d      	ldr	r3, [pc, #180]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	4a2c      	ldr	r2, [pc, #176]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ea2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d015      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005eb0:	4b27      	ldr	r3, [pc, #156]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	4924      	ldr	r1, [pc, #144]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ece:	d105      	bne.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ed0:	4b1f      	ldr	r3, [pc, #124]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	4a1e      	ldr	r2, [pc, #120]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eda:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d015      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ee8:	4b19      	ldr	r3, [pc, #100]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef6:	4916      	ldr	r1, [pc, #88]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f06:	d105      	bne.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f08:	4b11      	ldr	r3, [pc, #68]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	4a10      	ldr	r2, [pc, #64]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f12:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d019      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f20:	4b0b      	ldr	r3, [pc, #44]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	4908      	ldr	r1, [pc, #32]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f3e:	d109      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f40:	4b03      	ldr	r3, [pc, #12]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	4a02      	ldr	r2, [pc, #8]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f4a:	60d3      	str	r3, [r2, #12]
 8005f4c:	e002      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005f4e:	bf00      	nop
 8005f50:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d015      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005f60:	4b29      	ldr	r3, [pc, #164]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6e:	4926      	ldr	r1, [pc, #152]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f7e:	d105      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f80:	4b21      	ldr	r3, [pc, #132]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	4a20      	ldr	r2, [pc, #128]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f8a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d015      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005f98:	4b1b      	ldr	r3, [pc, #108]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa6:	4918      	ldr	r1, [pc, #96]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb6:	d105      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005fb8:	4b13      	ldr	r3, [pc, #76]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	4a12      	ldr	r2, [pc, #72]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d015      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005fd0:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fde:	490a      	ldr	r1, [pc, #40]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fee:	d105      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ff0:	4b05      	ldr	r3, [pc, #20]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	4a04      	ldr	r2, [pc, #16]	; (8006008 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ffa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005ffc:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	40021000 	.word	0x40021000

0800600c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	d001      	beq.n	8006024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e054      	b.n	80060ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a26      	ldr	r2, [pc, #152]	; (80060dc <HAL_TIM_Base_Start_IT+0xd0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d022      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604e:	d01d      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a22      	ldr	r2, [pc, #136]	; (80060e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d018      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a21      	ldr	r2, [pc, #132]	; (80060e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d013      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a1f      	ldr	r2, [pc, #124]	; (80060e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00e      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a1e      	ldr	r2, [pc, #120]	; (80060ec <HAL_TIM_Base_Start_IT+0xe0>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d009      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1c      	ldr	r2, [pc, #112]	; (80060f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_TIM_Base_Start_IT+0x80>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a1b      	ldr	r2, [pc, #108]	; (80060f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d115      	bne.n	80060b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	4b19      	ldr	r3, [pc, #100]	; (80060f8 <HAL_TIM_Base_Start_IT+0xec>)
 8006094:	4013      	ands	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2b06      	cmp	r3, #6
 800609c:	d015      	beq.n	80060ca <HAL_TIM_Base_Start_IT+0xbe>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a4:	d011      	beq.n	80060ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0201 	orr.w	r2, r2, #1
 80060b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b6:	e008      	b.n	80060ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f042 0201 	orr.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	e000      	b.n	80060cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40000400 	.word	0x40000400
 80060e4:	40000800 	.word	0x40000800
 80060e8:	40000c00 	.word	0x40000c00
 80060ec:	40013400 	.word	0x40013400
 80060f0:	40014000 	.word	0x40014000
 80060f4:	40015000 	.word	0x40015000
 80060f8:	00010007 	.word	0x00010007

080060fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e049      	b.n	80061a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fb f9ec 	bl	8001500 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3304      	adds	r3, #4
 8006138:	4619      	mov	r1, r3
 800613a:	4610      	mov	r0, r2
 800613c:	f000 fca0 	bl	8006a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <HAL_TIM_PWM_Start+0x24>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	bf14      	ite	ne
 80061c8:	2301      	movne	r3, #1
 80061ca:	2300      	moveq	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	e03c      	b.n	800624a <HAL_TIM_PWM_Start+0x9e>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d109      	bne.n	80061ea <HAL_TIM_PWM_Start+0x3e>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b01      	cmp	r3, #1
 80061e0:	bf14      	ite	ne
 80061e2:	2301      	movne	r3, #1
 80061e4:	2300      	moveq	r3, #0
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	e02f      	b.n	800624a <HAL_TIM_PWM_Start+0x9e>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d109      	bne.n	8006204 <HAL_TIM_PWM_Start+0x58>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	e022      	b.n	800624a <HAL_TIM_PWM_Start+0x9e>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b0c      	cmp	r3, #12
 8006208:	d109      	bne.n	800621e <HAL_TIM_PWM_Start+0x72>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b01      	cmp	r3, #1
 8006214:	bf14      	ite	ne
 8006216:	2301      	movne	r3, #1
 8006218:	2300      	moveq	r3, #0
 800621a:	b2db      	uxtb	r3, r3
 800621c:	e015      	b.n	800624a <HAL_TIM_PWM_Start+0x9e>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b10      	cmp	r3, #16
 8006222:	d109      	bne.n	8006238 <HAL_TIM_PWM_Start+0x8c>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b01      	cmp	r3, #1
 800622e:	bf14      	ite	ne
 8006230:	2301      	movne	r3, #1
 8006232:	2300      	moveq	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	e008      	b.n	800624a <HAL_TIM_PWM_Start+0x9e>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	bf14      	ite	ne
 8006244:	2301      	movne	r3, #1
 8006246:	2300      	moveq	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e0a6      	b.n	80063a0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d104      	bne.n	8006262 <HAL_TIM_PWM_Start+0xb6>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006260:	e023      	b.n	80062aa <HAL_TIM_PWM_Start+0xfe>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b04      	cmp	r3, #4
 8006266:	d104      	bne.n	8006272 <HAL_TIM_PWM_Start+0xc6>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006270:	e01b      	b.n	80062aa <HAL_TIM_PWM_Start+0xfe>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b08      	cmp	r3, #8
 8006276:	d104      	bne.n	8006282 <HAL_TIM_PWM_Start+0xd6>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006280:	e013      	b.n	80062aa <HAL_TIM_PWM_Start+0xfe>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b0c      	cmp	r3, #12
 8006286:	d104      	bne.n	8006292 <HAL_TIM_PWM_Start+0xe6>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006290:	e00b      	b.n	80062aa <HAL_TIM_PWM_Start+0xfe>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b10      	cmp	r3, #16
 8006296:	d104      	bne.n	80062a2 <HAL_TIM_PWM_Start+0xf6>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062a0:	e003      	b.n	80062aa <HAL_TIM_PWM_Start+0xfe>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2202      	movs	r2, #2
 80062a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2201      	movs	r2, #1
 80062b0:	6839      	ldr	r1, [r7, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f001 f8e0 	bl	8007478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a3a      	ldr	r2, [pc, #232]	; (80063a8 <HAL_TIM_PWM_Start+0x1fc>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d018      	beq.n	80062f4 <HAL_TIM_PWM_Start+0x148>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a39      	ldr	r2, [pc, #228]	; (80063ac <HAL_TIM_PWM_Start+0x200>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d013      	beq.n	80062f4 <HAL_TIM_PWM_Start+0x148>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a37      	ldr	r2, [pc, #220]	; (80063b0 <HAL_TIM_PWM_Start+0x204>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00e      	beq.n	80062f4 <HAL_TIM_PWM_Start+0x148>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a36      	ldr	r2, [pc, #216]	; (80063b4 <HAL_TIM_PWM_Start+0x208>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d009      	beq.n	80062f4 <HAL_TIM_PWM_Start+0x148>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a34      	ldr	r2, [pc, #208]	; (80063b8 <HAL_TIM_PWM_Start+0x20c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d004      	beq.n	80062f4 <HAL_TIM_PWM_Start+0x148>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a33      	ldr	r2, [pc, #204]	; (80063bc <HAL_TIM_PWM_Start+0x210>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d101      	bne.n	80062f8 <HAL_TIM_PWM_Start+0x14c>
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <HAL_TIM_PWM_Start+0x14e>
 80062f8:	2300      	movs	r3, #0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d007      	beq.n	800630e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800630c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a25      	ldr	r2, [pc, #148]	; (80063a8 <HAL_TIM_PWM_Start+0x1fc>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d022      	beq.n	800635e <HAL_TIM_PWM_Start+0x1b2>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006320:	d01d      	beq.n	800635e <HAL_TIM_PWM_Start+0x1b2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a26      	ldr	r2, [pc, #152]	; (80063c0 <HAL_TIM_PWM_Start+0x214>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d018      	beq.n	800635e <HAL_TIM_PWM_Start+0x1b2>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a24      	ldr	r2, [pc, #144]	; (80063c4 <HAL_TIM_PWM_Start+0x218>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d013      	beq.n	800635e <HAL_TIM_PWM_Start+0x1b2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a23      	ldr	r2, [pc, #140]	; (80063c8 <HAL_TIM_PWM_Start+0x21c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d00e      	beq.n	800635e <HAL_TIM_PWM_Start+0x1b2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a19      	ldr	r2, [pc, #100]	; (80063ac <HAL_TIM_PWM_Start+0x200>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d009      	beq.n	800635e <HAL_TIM_PWM_Start+0x1b2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a18      	ldr	r2, [pc, #96]	; (80063b0 <HAL_TIM_PWM_Start+0x204>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d004      	beq.n	800635e <HAL_TIM_PWM_Start+0x1b2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a18      	ldr	r2, [pc, #96]	; (80063bc <HAL_TIM_PWM_Start+0x210>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d115      	bne.n	800638a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	4b19      	ldr	r3, [pc, #100]	; (80063cc <HAL_TIM_PWM_Start+0x220>)
 8006366:	4013      	ands	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b06      	cmp	r3, #6
 800636e:	d015      	beq.n	800639c <HAL_TIM_PWM_Start+0x1f0>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006376:	d011      	beq.n	800639c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0201 	orr.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006388:	e008      	b.n	800639c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0201 	orr.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	e000      	b.n	800639e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40013400 	.word	0x40013400
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40014400 	.word	0x40014400
 80063b8:	40014800 	.word	0x40014800
 80063bc:	40015000 	.word	0x40015000
 80063c0:	40000400 	.word	0x40000400
 80063c4:	40000800 	.word	0x40000800
 80063c8:	40000c00 	.word	0x40000c00
 80063cc:	00010007 	.word	0x00010007

080063d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d101      	bne.n	80063e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e049      	b.n	8006476 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d106      	bne.n	80063fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7fb f8a2 	bl	8001540 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	3304      	adds	r3, #4
 800640c:	4619      	mov	r1, r3
 800640e:	4610      	mov	r0, r2
 8006410:	f000 fb36 	bl	8006a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d104      	bne.n	800649e <HAL_TIM_IC_Start_IT+0x1e>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800649a:	b2db      	uxtb	r3, r3
 800649c:	e023      	b.n	80064e6 <HAL_TIM_IC_Start_IT+0x66>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d104      	bne.n	80064ae <HAL_TIM_IC_Start_IT+0x2e>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	e01b      	b.n	80064e6 <HAL_TIM_IC_Start_IT+0x66>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d104      	bne.n	80064be <HAL_TIM_IC_Start_IT+0x3e>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	e013      	b.n	80064e6 <HAL_TIM_IC_Start_IT+0x66>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b0c      	cmp	r3, #12
 80064c2:	d104      	bne.n	80064ce <HAL_TIM_IC_Start_IT+0x4e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	e00b      	b.n	80064e6 <HAL_TIM_IC_Start_IT+0x66>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b10      	cmp	r3, #16
 80064d2:	d104      	bne.n	80064de <HAL_TIM_IC_Start_IT+0x5e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	e003      	b.n	80064e6 <HAL_TIM_IC_Start_IT+0x66>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d104      	bne.n	80064f8 <HAL_TIM_IC_Start_IT+0x78>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	e013      	b.n	8006520 <HAL_TIM_IC_Start_IT+0xa0>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d104      	bne.n	8006508 <HAL_TIM_IC_Start_IT+0x88>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006504:	b2db      	uxtb	r3, r3
 8006506:	e00b      	b.n	8006520 <HAL_TIM_IC_Start_IT+0xa0>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b08      	cmp	r3, #8
 800650c:	d104      	bne.n	8006518 <HAL_TIM_IC_Start_IT+0x98>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006514:	b2db      	uxtb	r3, r3
 8006516:	e003      	b.n	8006520 <HAL_TIM_IC_Start_IT+0xa0>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800651e:	b2db      	uxtb	r3, r3
 8006520:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006522:	7bbb      	ldrb	r3, [r7, #14]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d102      	bne.n	800652e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006528:	7b7b      	ldrb	r3, [r7, #13]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d001      	beq.n	8006532 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e0e2      	b.n	80066f8 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d104      	bne.n	8006542 <HAL_TIM_IC_Start_IT+0xc2>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006540:	e023      	b.n	800658a <HAL_TIM_IC_Start_IT+0x10a>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b04      	cmp	r3, #4
 8006546:	d104      	bne.n	8006552 <HAL_TIM_IC_Start_IT+0xd2>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006550:	e01b      	b.n	800658a <HAL_TIM_IC_Start_IT+0x10a>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b08      	cmp	r3, #8
 8006556:	d104      	bne.n	8006562 <HAL_TIM_IC_Start_IT+0xe2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2202      	movs	r2, #2
 800655c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006560:	e013      	b.n	800658a <HAL_TIM_IC_Start_IT+0x10a>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b0c      	cmp	r3, #12
 8006566:	d104      	bne.n	8006572 <HAL_TIM_IC_Start_IT+0xf2>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006570:	e00b      	b.n	800658a <HAL_TIM_IC_Start_IT+0x10a>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b10      	cmp	r3, #16
 8006576:	d104      	bne.n	8006582 <HAL_TIM_IC_Start_IT+0x102>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2202      	movs	r2, #2
 800657c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006580:	e003      	b.n	800658a <HAL_TIM_IC_Start_IT+0x10a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2202      	movs	r2, #2
 8006586:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d104      	bne.n	800659a <HAL_TIM_IC_Start_IT+0x11a>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006598:	e013      	b.n	80065c2 <HAL_TIM_IC_Start_IT+0x142>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b04      	cmp	r3, #4
 800659e:	d104      	bne.n	80065aa <HAL_TIM_IC_Start_IT+0x12a>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065a8:	e00b      	b.n	80065c2 <HAL_TIM_IC_Start_IT+0x142>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b08      	cmp	r3, #8
 80065ae:	d104      	bne.n	80065ba <HAL_TIM_IC_Start_IT+0x13a>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065b8:	e003      	b.n	80065c2 <HAL_TIM_IC_Start_IT+0x142>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2202      	movs	r2, #2
 80065be:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b0c      	cmp	r3, #12
 80065c6:	d841      	bhi.n	800664c <HAL_TIM_IC_Start_IT+0x1cc>
 80065c8:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <HAL_TIM_IC_Start_IT+0x150>)
 80065ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ce:	bf00      	nop
 80065d0:	08006605 	.word	0x08006605
 80065d4:	0800664d 	.word	0x0800664d
 80065d8:	0800664d 	.word	0x0800664d
 80065dc:	0800664d 	.word	0x0800664d
 80065e0:	08006617 	.word	0x08006617
 80065e4:	0800664d 	.word	0x0800664d
 80065e8:	0800664d 	.word	0x0800664d
 80065ec:	0800664d 	.word	0x0800664d
 80065f0:	08006629 	.word	0x08006629
 80065f4:	0800664d 	.word	0x0800664d
 80065f8:	0800664d 	.word	0x0800664d
 80065fc:	0800664d 	.word	0x0800664d
 8006600:	0800663b 	.word	0x0800663b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f042 0202 	orr.w	r2, r2, #2
 8006612:	60da      	str	r2, [r3, #12]
      break;
 8006614:	e01d      	b.n	8006652 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68da      	ldr	r2, [r3, #12]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f042 0204 	orr.w	r2, r2, #4
 8006624:	60da      	str	r2, [r3, #12]
      break;
 8006626:	e014      	b.n	8006652 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	68da      	ldr	r2, [r3, #12]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f042 0208 	orr.w	r2, r2, #8
 8006636:	60da      	str	r2, [r3, #12]
      break;
 8006638:	e00b      	b.n	8006652 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68da      	ldr	r2, [r3, #12]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f042 0210 	orr.w	r2, r2, #16
 8006648:	60da      	str	r2, [r3, #12]
      break;
 800664a:	e002      	b.n	8006652 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	73fb      	strb	r3, [r7, #15]
      break;
 8006650:	bf00      	nop
  }

  if (status == HAL_OK)
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d14e      	bne.n	80066f6 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2201      	movs	r2, #1
 800665e:	6839      	ldr	r1, [r7, #0]
 8006660:	4618      	mov	r0, r3
 8006662:	f000 ff09 	bl	8007478 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a25      	ldr	r2, [pc, #148]	; (8006700 <HAL_TIM_IC_Start_IT+0x280>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d022      	beq.n	80066b6 <HAL_TIM_IC_Start_IT+0x236>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006678:	d01d      	beq.n	80066b6 <HAL_TIM_IC_Start_IT+0x236>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a21      	ldr	r2, [pc, #132]	; (8006704 <HAL_TIM_IC_Start_IT+0x284>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d018      	beq.n	80066b6 <HAL_TIM_IC_Start_IT+0x236>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a1f      	ldr	r2, [pc, #124]	; (8006708 <HAL_TIM_IC_Start_IT+0x288>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d013      	beq.n	80066b6 <HAL_TIM_IC_Start_IT+0x236>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a1e      	ldr	r2, [pc, #120]	; (800670c <HAL_TIM_IC_Start_IT+0x28c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00e      	beq.n	80066b6 <HAL_TIM_IC_Start_IT+0x236>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a1c      	ldr	r2, [pc, #112]	; (8006710 <HAL_TIM_IC_Start_IT+0x290>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d009      	beq.n	80066b6 <HAL_TIM_IC_Start_IT+0x236>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a1b      	ldr	r2, [pc, #108]	; (8006714 <HAL_TIM_IC_Start_IT+0x294>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d004      	beq.n	80066b6 <HAL_TIM_IC_Start_IT+0x236>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a19      	ldr	r2, [pc, #100]	; (8006718 <HAL_TIM_IC_Start_IT+0x298>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d115      	bne.n	80066e2 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	689a      	ldr	r2, [r3, #8]
 80066bc:	4b17      	ldr	r3, [pc, #92]	; (800671c <HAL_TIM_IC_Start_IT+0x29c>)
 80066be:	4013      	ands	r3, r2
 80066c0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b06      	cmp	r3, #6
 80066c6:	d015      	beq.n	80066f4 <HAL_TIM_IC_Start_IT+0x274>
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066ce:	d011      	beq.n	80066f4 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e0:	e008      	b.n	80066f4 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f042 0201 	orr.w	r2, r2, #1
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	e000      	b.n	80066f6 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	40012c00 	.word	0x40012c00
 8006704:	40000400 	.word	0x40000400
 8006708:	40000800 	.word	0x40000800
 800670c:	40000c00 	.word	0x40000c00
 8006710:	40013400 	.word	0x40013400
 8006714:	40014000 	.word	0x40014000
 8006718:	40015000 	.word	0x40015000
 800671c:	00010007 	.word	0x00010007

08006720 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006736:	2b01      	cmp	r3, #1
 8006738:	d101      	bne.n	800673e <HAL_TIM_IC_ConfigChannel+0x1e>
 800673a:	2302      	movs	r3, #2
 800673c:	e088      	b.n	8006850 <HAL_TIM_IC_ConfigChannel+0x130>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d11b      	bne.n	8006784 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6818      	ldr	r0, [r3, #0]
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	6819      	ldr	r1, [r3, #0]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f000 fd62 	bl	8007224 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 020c 	bic.w	r2, r2, #12
 800676e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6999      	ldr	r1, [r3, #24]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	619a      	str	r2, [r3, #24]
 8006782:	e060      	b.n	8006846 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b04      	cmp	r3, #4
 8006788:	d11c      	bne.n	80067c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6818      	ldr	r0, [r3, #0]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	6819      	ldr	r1, [r3, #0]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	68db      	ldr	r3, [r3, #12]
 800679a:	f000 fdb7 	bl	800730c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	699a      	ldr	r2, [r3, #24]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80067ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	6999      	ldr	r1, [r3, #24]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	021a      	lsls	r2, r3, #8
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	619a      	str	r2, [r3, #24]
 80067c2:	e040      	b.n	8006846 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b08      	cmp	r3, #8
 80067c8:	d11b      	bne.n	8006802 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6818      	ldr	r0, [r3, #0]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	6819      	ldr	r1, [r3, #0]
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f000 fdd4 	bl	8007386 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69da      	ldr	r2, [r3, #28]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 020c 	bic.w	r2, r2, #12
 80067ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69d9      	ldr	r1, [r3, #28]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	689a      	ldr	r2, [r3, #8]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	61da      	str	r2, [r3, #28]
 8006800:	e021      	b.n	8006846 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b0c      	cmp	r3, #12
 8006806:	d11c      	bne.n	8006842 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6818      	ldr	r0, [r3, #0]
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	6819      	ldr	r1, [r3, #0]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	f000 fdf1 	bl	80073fe <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	69da      	ldr	r2, [r3, #28]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800682a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	69d9      	ldr	r1, [r3, #28]
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	021a      	lsls	r2, r3, #8
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	61da      	str	r2, [r3, #28]
 8006840:	e001      	b.n	8006846 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800684e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3718      	adds	r7, #24
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006872:	2302      	movs	r3, #2
 8006874:	e0ff      	b.n	8006a76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b14      	cmp	r3, #20
 8006882:	f200 80f0 	bhi.w	8006a66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006886:	a201      	add	r2, pc, #4	; (adr r2, 800688c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688c:	080068e1 	.word	0x080068e1
 8006890:	08006a67 	.word	0x08006a67
 8006894:	08006a67 	.word	0x08006a67
 8006898:	08006a67 	.word	0x08006a67
 800689c:	08006921 	.word	0x08006921
 80068a0:	08006a67 	.word	0x08006a67
 80068a4:	08006a67 	.word	0x08006a67
 80068a8:	08006a67 	.word	0x08006a67
 80068ac:	08006963 	.word	0x08006963
 80068b0:	08006a67 	.word	0x08006a67
 80068b4:	08006a67 	.word	0x08006a67
 80068b8:	08006a67 	.word	0x08006a67
 80068bc:	080069a3 	.word	0x080069a3
 80068c0:	08006a67 	.word	0x08006a67
 80068c4:	08006a67 	.word	0x08006a67
 80068c8:	08006a67 	.word	0x08006a67
 80068cc:	080069e5 	.word	0x080069e5
 80068d0:	08006a67 	.word	0x08006a67
 80068d4:	08006a67 	.word	0x08006a67
 80068d8:	08006a67 	.word	0x08006a67
 80068dc:	08006a25 	.word	0x08006a25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68b9      	ldr	r1, [r7, #8]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 f972 	bl	8006bd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0208 	orr.w	r2, r2, #8
 80068fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0204 	bic.w	r2, r2, #4
 800690a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6999      	ldr	r1, [r3, #24]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	619a      	str	r2, [r3, #24]
      break;
 800691e:	e0a5      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68b9      	ldr	r1, [r7, #8]
 8006926:	4618      	mov	r0, r3
 8006928:	f000 f9ec 	bl	8006d04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800693a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	699a      	ldr	r2, [r3, #24]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800694a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6999      	ldr	r1, [r3, #24]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	021a      	lsls	r2, r3, #8
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	619a      	str	r2, [r3, #24]
      break;
 8006960:	e084      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fa5f 	bl	8006e2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69da      	ldr	r2, [r3, #28]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f042 0208 	orr.w	r2, r2, #8
 800697c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69da      	ldr	r2, [r3, #28]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 0204 	bic.w	r2, r2, #4
 800698c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69d9      	ldr	r1, [r3, #28]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	61da      	str	r2, [r3, #28]
      break;
 80069a0:	e064      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68b9      	ldr	r1, [r7, #8]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fad1 	bl	8006f50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69da      	ldr	r2, [r3, #28]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69da      	ldr	r2, [r3, #28]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69d9      	ldr	r1, [r3, #28]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	021a      	lsls	r2, r3, #8
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	61da      	str	r2, [r3, #28]
      break;
 80069e2:	e043      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68b9      	ldr	r1, [r7, #8]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fb44 	bl	8007078 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0208 	orr.w	r2, r2, #8
 80069fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0204 	bic.w	r2, r2, #4
 8006a0e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	691a      	ldr	r2, [r3, #16]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006a22:	e023      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68b9      	ldr	r1, [r7, #8]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fb8e 	bl	800714c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a3e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a4e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	021a      	lsls	r2, r3, #8
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006a64:	e002      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	75fb      	strb	r3, [r7, #23]
      break;
 8006a6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop

08006a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a46      	ldr	r2, [pc, #280]	; (8006bac <TIM_Base_SetConfig+0x12c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d017      	beq.n	8006ac8 <TIM_Base_SetConfig+0x48>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9e:	d013      	beq.n	8006ac8 <TIM_Base_SetConfig+0x48>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a43      	ldr	r2, [pc, #268]	; (8006bb0 <TIM_Base_SetConfig+0x130>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d00f      	beq.n	8006ac8 <TIM_Base_SetConfig+0x48>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a42      	ldr	r2, [pc, #264]	; (8006bb4 <TIM_Base_SetConfig+0x134>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d00b      	beq.n	8006ac8 <TIM_Base_SetConfig+0x48>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a41      	ldr	r2, [pc, #260]	; (8006bb8 <TIM_Base_SetConfig+0x138>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d007      	beq.n	8006ac8 <TIM_Base_SetConfig+0x48>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a40      	ldr	r2, [pc, #256]	; (8006bbc <TIM_Base_SetConfig+0x13c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d003      	beq.n	8006ac8 <TIM_Base_SetConfig+0x48>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a3f      	ldr	r2, [pc, #252]	; (8006bc0 <TIM_Base_SetConfig+0x140>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d108      	bne.n	8006ada <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a33      	ldr	r2, [pc, #204]	; (8006bac <TIM_Base_SetConfig+0x12c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d023      	beq.n	8006b2a <TIM_Base_SetConfig+0xaa>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae8:	d01f      	beq.n	8006b2a <TIM_Base_SetConfig+0xaa>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a30      	ldr	r2, [pc, #192]	; (8006bb0 <TIM_Base_SetConfig+0x130>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d01b      	beq.n	8006b2a <TIM_Base_SetConfig+0xaa>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a2f      	ldr	r2, [pc, #188]	; (8006bb4 <TIM_Base_SetConfig+0x134>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d017      	beq.n	8006b2a <TIM_Base_SetConfig+0xaa>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a2e      	ldr	r2, [pc, #184]	; (8006bb8 <TIM_Base_SetConfig+0x138>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d013      	beq.n	8006b2a <TIM_Base_SetConfig+0xaa>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a2d      	ldr	r2, [pc, #180]	; (8006bbc <TIM_Base_SetConfig+0x13c>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d00f      	beq.n	8006b2a <TIM_Base_SetConfig+0xaa>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a2d      	ldr	r2, [pc, #180]	; (8006bc4 <TIM_Base_SetConfig+0x144>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00b      	beq.n	8006b2a <TIM_Base_SetConfig+0xaa>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a2c      	ldr	r2, [pc, #176]	; (8006bc8 <TIM_Base_SetConfig+0x148>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d007      	beq.n	8006b2a <TIM_Base_SetConfig+0xaa>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a2b      	ldr	r2, [pc, #172]	; (8006bcc <TIM_Base_SetConfig+0x14c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d003      	beq.n	8006b2a <TIM_Base_SetConfig+0xaa>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a26      	ldr	r2, [pc, #152]	; (8006bc0 <TIM_Base_SetConfig+0x140>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d108      	bne.n	8006b3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4a12      	ldr	r2, [pc, #72]	; (8006bac <TIM_Base_SetConfig+0x12c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d013      	beq.n	8006b90 <TIM_Base_SetConfig+0x110>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a14      	ldr	r2, [pc, #80]	; (8006bbc <TIM_Base_SetConfig+0x13c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d00f      	beq.n	8006b90 <TIM_Base_SetConfig+0x110>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a14      	ldr	r2, [pc, #80]	; (8006bc4 <TIM_Base_SetConfig+0x144>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00b      	beq.n	8006b90 <TIM_Base_SetConfig+0x110>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a13      	ldr	r2, [pc, #76]	; (8006bc8 <TIM_Base_SetConfig+0x148>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d007      	beq.n	8006b90 <TIM_Base_SetConfig+0x110>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a12      	ldr	r2, [pc, #72]	; (8006bcc <TIM_Base_SetConfig+0x14c>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d003      	beq.n	8006b90 <TIM_Base_SetConfig+0x110>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a0d      	ldr	r2, [pc, #52]	; (8006bc0 <TIM_Base_SetConfig+0x140>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d103      	bne.n	8006b98 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	691a      	ldr	r2, [r3, #16]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	615a      	str	r2, [r3, #20]
}
 8006b9e:	bf00      	nop
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	40012c00 	.word	0x40012c00
 8006bb0:	40000400 	.word	0x40000400
 8006bb4:	40000800 	.word	0x40000800
 8006bb8:	40000c00 	.word	0x40000c00
 8006bbc:	40013400 	.word	0x40013400
 8006bc0:	40015000 	.word	0x40015000
 8006bc4:	40014000 	.word	0x40014000
 8006bc8:	40014400 	.word	0x40014400
 8006bcc:	40014800 	.word	0x40014800

08006bd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	f023 0201 	bic.w	r2, r3, #1
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 0303 	bic.w	r3, r3, #3
 8006c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f023 0302 	bic.w	r3, r3, #2
 8006c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	4313      	orrs	r3, r2
 8006c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a30      	ldr	r2, [pc, #192]	; (8006cec <TIM_OC1_SetConfig+0x11c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d013      	beq.n	8006c58 <TIM_OC1_SetConfig+0x88>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	4a2f      	ldr	r2, [pc, #188]	; (8006cf0 <TIM_OC1_SetConfig+0x120>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00f      	beq.n	8006c58 <TIM_OC1_SetConfig+0x88>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a2e      	ldr	r2, [pc, #184]	; (8006cf4 <TIM_OC1_SetConfig+0x124>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d00b      	beq.n	8006c58 <TIM_OC1_SetConfig+0x88>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a2d      	ldr	r2, [pc, #180]	; (8006cf8 <TIM_OC1_SetConfig+0x128>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d007      	beq.n	8006c58 <TIM_OC1_SetConfig+0x88>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	4a2c      	ldr	r2, [pc, #176]	; (8006cfc <TIM_OC1_SetConfig+0x12c>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d003      	beq.n	8006c58 <TIM_OC1_SetConfig+0x88>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a2b      	ldr	r2, [pc, #172]	; (8006d00 <TIM_OC1_SetConfig+0x130>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d10c      	bne.n	8006c72 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	f023 0308 	bic.w	r3, r3, #8
 8006c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f023 0304 	bic.w	r3, r3, #4
 8006c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a1d      	ldr	r2, [pc, #116]	; (8006cec <TIM_OC1_SetConfig+0x11c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d013      	beq.n	8006ca2 <TIM_OC1_SetConfig+0xd2>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a1c      	ldr	r2, [pc, #112]	; (8006cf0 <TIM_OC1_SetConfig+0x120>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00f      	beq.n	8006ca2 <TIM_OC1_SetConfig+0xd2>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a1b      	ldr	r2, [pc, #108]	; (8006cf4 <TIM_OC1_SetConfig+0x124>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d00b      	beq.n	8006ca2 <TIM_OC1_SetConfig+0xd2>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a1a      	ldr	r2, [pc, #104]	; (8006cf8 <TIM_OC1_SetConfig+0x128>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d007      	beq.n	8006ca2 <TIM_OC1_SetConfig+0xd2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a19      	ldr	r2, [pc, #100]	; (8006cfc <TIM_OC1_SetConfig+0x12c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d003      	beq.n	8006ca2 <TIM_OC1_SetConfig+0xd2>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a18      	ldr	r2, [pc, #96]	; (8006d00 <TIM_OC1_SetConfig+0x130>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d111      	bne.n	8006cc6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685a      	ldr	r2, [r3, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	621a      	str	r2, [r3, #32]
}
 8006ce0:	bf00      	nop
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr
 8006cec:	40012c00 	.word	0x40012c00
 8006cf0:	40013400 	.word	0x40013400
 8006cf4:	40014000 	.word	0x40014000
 8006cf8:	40014400 	.word	0x40014400
 8006cfc:	40014800 	.word	0x40014800
 8006d00:	40015000 	.word	0x40015000

08006d04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	f023 0210 	bic.w	r2, r3, #16
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	699b      	ldr	r3, [r3, #24]
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	021b      	lsls	r3, r3, #8
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0320 	bic.w	r3, r3, #32
 8006d52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a2c      	ldr	r2, [pc, #176]	; (8006e14 <TIM_OC2_SetConfig+0x110>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d007      	beq.n	8006d78 <TIM_OC2_SetConfig+0x74>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a2b      	ldr	r2, [pc, #172]	; (8006e18 <TIM_OC2_SetConfig+0x114>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <TIM_OC2_SetConfig+0x74>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a2a      	ldr	r2, [pc, #168]	; (8006e1c <TIM_OC2_SetConfig+0x118>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d10d      	bne.n	8006d94 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	011b      	lsls	r3, r3, #4
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a1f      	ldr	r2, [pc, #124]	; (8006e14 <TIM_OC2_SetConfig+0x110>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d013      	beq.n	8006dc4 <TIM_OC2_SetConfig+0xc0>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a1e      	ldr	r2, [pc, #120]	; (8006e18 <TIM_OC2_SetConfig+0x114>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d00f      	beq.n	8006dc4 <TIM_OC2_SetConfig+0xc0>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a1e      	ldr	r2, [pc, #120]	; (8006e20 <TIM_OC2_SetConfig+0x11c>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00b      	beq.n	8006dc4 <TIM_OC2_SetConfig+0xc0>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a1d      	ldr	r2, [pc, #116]	; (8006e24 <TIM_OC2_SetConfig+0x120>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d007      	beq.n	8006dc4 <TIM_OC2_SetConfig+0xc0>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a1c      	ldr	r2, [pc, #112]	; (8006e28 <TIM_OC2_SetConfig+0x124>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d003      	beq.n	8006dc4 <TIM_OC2_SetConfig+0xc0>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a17      	ldr	r2, [pc, #92]	; (8006e1c <TIM_OC2_SetConfig+0x118>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d113      	bne.n	8006dec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	621a      	str	r2, [r3, #32]
}
 8006e06:	bf00      	nop
 8006e08:	371c      	adds	r7, #28
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	40012c00 	.word	0x40012c00
 8006e18:	40013400 	.word	0x40013400
 8006e1c:	40015000 	.word	0x40015000
 8006e20:	40014000 	.word	0x40014000
 8006e24:	40014400 	.word	0x40014400
 8006e28:	40014800 	.word	0x40014800

08006e2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a1b      	ldr	r3, [r3, #32]
 8006e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	69db      	ldr	r3, [r3, #28]
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 0303 	bic.w	r3, r3, #3
 8006e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	021b      	lsls	r3, r3, #8
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a2b      	ldr	r2, [pc, #172]	; (8006f38 <TIM_OC3_SetConfig+0x10c>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d007      	beq.n	8006e9e <TIM_OC3_SetConfig+0x72>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a2a      	ldr	r2, [pc, #168]	; (8006f3c <TIM_OC3_SetConfig+0x110>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d003      	beq.n	8006e9e <TIM_OC3_SetConfig+0x72>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a29      	ldr	r2, [pc, #164]	; (8006f40 <TIM_OC3_SetConfig+0x114>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d10d      	bne.n	8006eba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	021b      	lsls	r3, r3, #8
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a1e      	ldr	r2, [pc, #120]	; (8006f38 <TIM_OC3_SetConfig+0x10c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d013      	beq.n	8006eea <TIM_OC3_SetConfig+0xbe>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a1d      	ldr	r2, [pc, #116]	; (8006f3c <TIM_OC3_SetConfig+0x110>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d00f      	beq.n	8006eea <TIM_OC3_SetConfig+0xbe>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a1d      	ldr	r2, [pc, #116]	; (8006f44 <TIM_OC3_SetConfig+0x118>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00b      	beq.n	8006eea <TIM_OC3_SetConfig+0xbe>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a1c      	ldr	r2, [pc, #112]	; (8006f48 <TIM_OC3_SetConfig+0x11c>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d007      	beq.n	8006eea <TIM_OC3_SetConfig+0xbe>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a1b      	ldr	r2, [pc, #108]	; (8006f4c <TIM_OC3_SetConfig+0x120>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d003      	beq.n	8006eea <TIM_OC3_SetConfig+0xbe>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a16      	ldr	r2, [pc, #88]	; (8006f40 <TIM_OC3_SetConfig+0x114>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d113      	bne.n	8006f12 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	011b      	lsls	r3, r3, #4
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	621a      	str	r2, [r3, #32]
}
 8006f2c:	bf00      	nop
 8006f2e:	371c      	adds	r7, #28
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	40012c00 	.word	0x40012c00
 8006f3c:	40013400 	.word	0x40013400
 8006f40:	40015000 	.word	0x40015000
 8006f44:	40014000 	.word	0x40014000
 8006f48:	40014400 	.word	0x40014400
 8006f4c:	40014800 	.word	0x40014800

08006f50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a1b      	ldr	r3, [r3, #32]
 8006f6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	021b      	lsls	r3, r3, #8
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	031b      	lsls	r3, r3, #12
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a2c      	ldr	r2, [pc, #176]	; (8007060 <TIM_OC4_SetConfig+0x110>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d007      	beq.n	8006fc4 <TIM_OC4_SetConfig+0x74>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a2b      	ldr	r2, [pc, #172]	; (8007064 <TIM_OC4_SetConfig+0x114>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d003      	beq.n	8006fc4 <TIM_OC4_SetConfig+0x74>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a2a      	ldr	r2, [pc, #168]	; (8007068 <TIM_OC4_SetConfig+0x118>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d10d      	bne.n	8006fe0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	031b      	lsls	r3, r3, #12
 8006fd2:	697a      	ldr	r2, [r7, #20]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a1f      	ldr	r2, [pc, #124]	; (8007060 <TIM_OC4_SetConfig+0x110>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d013      	beq.n	8007010 <TIM_OC4_SetConfig+0xc0>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a1e      	ldr	r2, [pc, #120]	; (8007064 <TIM_OC4_SetConfig+0x114>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d00f      	beq.n	8007010 <TIM_OC4_SetConfig+0xc0>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a1e      	ldr	r2, [pc, #120]	; (800706c <TIM_OC4_SetConfig+0x11c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d00b      	beq.n	8007010 <TIM_OC4_SetConfig+0xc0>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a1d      	ldr	r2, [pc, #116]	; (8007070 <TIM_OC4_SetConfig+0x120>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d007      	beq.n	8007010 <TIM_OC4_SetConfig+0xc0>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a1c      	ldr	r2, [pc, #112]	; (8007074 <TIM_OC4_SetConfig+0x124>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d003      	beq.n	8007010 <TIM_OC4_SetConfig+0xc0>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a17      	ldr	r2, [pc, #92]	; (8007068 <TIM_OC4_SetConfig+0x118>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d113      	bne.n	8007038 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007016:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800701e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	019b      	lsls	r3, r3, #6
 8007026:	693a      	ldr	r2, [r7, #16]
 8007028:	4313      	orrs	r3, r2
 800702a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	019b      	lsls	r3, r3, #6
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68fa      	ldr	r2, [r7, #12]
 8007042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	621a      	str	r2, [r3, #32]
}
 8007052:	bf00      	nop
 8007054:	371c      	adds	r7, #28
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40012c00 	.word	0x40012c00
 8007064:	40013400 	.word	0x40013400
 8007068:	40015000 	.word	0x40015000
 800706c:	40014000 	.word	0x40014000
 8007070:	40014400 	.word	0x40014400
 8007074:	40014800 	.word	0x40014800

08007078 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800709e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	041b      	lsls	r3, r3, #16
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a19      	ldr	r2, [pc, #100]	; (8007134 <TIM_OC5_SetConfig+0xbc>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d013      	beq.n	80070fa <TIM_OC5_SetConfig+0x82>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a18      	ldr	r2, [pc, #96]	; (8007138 <TIM_OC5_SetConfig+0xc0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d00f      	beq.n	80070fa <TIM_OC5_SetConfig+0x82>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a17      	ldr	r2, [pc, #92]	; (800713c <TIM_OC5_SetConfig+0xc4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d00b      	beq.n	80070fa <TIM_OC5_SetConfig+0x82>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a16      	ldr	r2, [pc, #88]	; (8007140 <TIM_OC5_SetConfig+0xc8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d007      	beq.n	80070fa <TIM_OC5_SetConfig+0x82>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a15      	ldr	r2, [pc, #84]	; (8007144 <TIM_OC5_SetConfig+0xcc>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d003      	beq.n	80070fa <TIM_OC5_SetConfig+0x82>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a14      	ldr	r2, [pc, #80]	; (8007148 <TIM_OC5_SetConfig+0xd0>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d109      	bne.n	800710e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007100:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	021b      	lsls	r3, r3, #8
 8007108:	697a      	ldr	r2, [r7, #20]
 800710a:	4313      	orrs	r3, r2
 800710c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	697a      	ldr	r2, [r7, #20]
 8007112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	621a      	str	r2, [r3, #32]
}
 8007128:	bf00      	nop
 800712a:	371c      	adds	r7, #28
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	40012c00 	.word	0x40012c00
 8007138:	40013400 	.word	0x40013400
 800713c:	40014000 	.word	0x40014000
 8007140:	40014400 	.word	0x40014400
 8007144:	40014800 	.word	0x40014800
 8007148:	40015000 	.word	0x40015000

0800714c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800714c:	b480      	push	{r7}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800717a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800717e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	051b      	lsls	r3, r3, #20
 800719a:	693a      	ldr	r2, [r7, #16]
 800719c:	4313      	orrs	r3, r2
 800719e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a1a      	ldr	r2, [pc, #104]	; (800720c <TIM_OC6_SetConfig+0xc0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d013      	beq.n	80071d0 <TIM_OC6_SetConfig+0x84>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a19      	ldr	r2, [pc, #100]	; (8007210 <TIM_OC6_SetConfig+0xc4>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d00f      	beq.n	80071d0 <TIM_OC6_SetConfig+0x84>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a18      	ldr	r2, [pc, #96]	; (8007214 <TIM_OC6_SetConfig+0xc8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d00b      	beq.n	80071d0 <TIM_OC6_SetConfig+0x84>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a17      	ldr	r2, [pc, #92]	; (8007218 <TIM_OC6_SetConfig+0xcc>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d007      	beq.n	80071d0 <TIM_OC6_SetConfig+0x84>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a16      	ldr	r2, [pc, #88]	; (800721c <TIM_OC6_SetConfig+0xd0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d003      	beq.n	80071d0 <TIM_OC6_SetConfig+0x84>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a15      	ldr	r2, [pc, #84]	; (8007220 <TIM_OC6_SetConfig+0xd4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d109      	bne.n	80071e4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	695b      	ldr	r3, [r3, #20]
 80071dc:	029b      	lsls	r3, r3, #10
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	685a      	ldr	r2, [r3, #4]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	621a      	str	r2, [r3, #32]
}
 80071fe:	bf00      	nop
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	40012c00 	.word	0x40012c00
 8007210:	40013400 	.word	0x40013400
 8007214:	40014000 	.word	0x40014000
 8007218:	40014400 	.word	0x40014400
 800721c:	40014800 	.word	0x40014800
 8007220:	40015000 	.word	0x40015000

08007224 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	f023 0201 	bic.w	r2, r3, #1
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4a28      	ldr	r2, [pc, #160]	; (80072f0 <TIM_TI1_SetConfig+0xcc>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d01b      	beq.n	800728a <TIM_TI1_SetConfig+0x66>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007258:	d017      	beq.n	800728a <TIM_TI1_SetConfig+0x66>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4a25      	ldr	r2, [pc, #148]	; (80072f4 <TIM_TI1_SetConfig+0xd0>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d013      	beq.n	800728a <TIM_TI1_SetConfig+0x66>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	4a24      	ldr	r2, [pc, #144]	; (80072f8 <TIM_TI1_SetConfig+0xd4>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00f      	beq.n	800728a <TIM_TI1_SetConfig+0x66>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4a23      	ldr	r2, [pc, #140]	; (80072fc <TIM_TI1_SetConfig+0xd8>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d00b      	beq.n	800728a <TIM_TI1_SetConfig+0x66>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	4a22      	ldr	r2, [pc, #136]	; (8007300 <TIM_TI1_SetConfig+0xdc>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d007      	beq.n	800728a <TIM_TI1_SetConfig+0x66>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4a21      	ldr	r2, [pc, #132]	; (8007304 <TIM_TI1_SetConfig+0xe0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d003      	beq.n	800728a <TIM_TI1_SetConfig+0x66>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	4a20      	ldr	r2, [pc, #128]	; (8007308 <TIM_TI1_SetConfig+0xe4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d101      	bne.n	800728e <TIM_TI1_SetConfig+0x6a>
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <TIM_TI1_SetConfig+0x6c>
 800728e:	2300      	movs	r3, #0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d008      	beq.n	80072a6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f023 0303 	bic.w	r3, r3, #3
 800729a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	e003      	b.n	80072ae <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f043 0301 	orr.w	r3, r3, #1
 80072ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	011b      	lsls	r3, r3, #4
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	4313      	orrs	r3, r2
 80072c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f023 030a 	bic.w	r3, r3, #10
 80072c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	f003 030a 	and.w	r3, r3, #10
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	697a      	ldr	r2, [r7, #20]
 80072da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	621a      	str	r2, [r3, #32]
}
 80072e2:	bf00      	nop
 80072e4:	371c      	adds	r7, #28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	40012c00 	.word	0x40012c00
 80072f4:	40000400 	.word	0x40000400
 80072f8:	40000800 	.word	0x40000800
 80072fc:	40000c00 	.word	0x40000c00
 8007300:	40013400 	.word	0x40013400
 8007304:	40014000 	.word	0x40014000
 8007308:	40015000 	.word	0x40015000

0800730c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	f023 0210 	bic.w	r2, r3, #16
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6a1b      	ldr	r3, [r3, #32]
 8007330:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007338:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	021b      	lsls	r3, r3, #8
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	4313      	orrs	r3, r2
 8007342:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800734a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	031b      	lsls	r3, r3, #12
 8007350:	b29b      	uxth	r3, r3
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800735e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	011b      	lsls	r3, r3, #4
 8007364:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007368:	693a      	ldr	r2, [r7, #16]
 800736a:	4313      	orrs	r3, r2
 800736c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	621a      	str	r2, [r3, #32]
}
 800737a:	bf00      	nop
 800737c:	371c      	adds	r7, #28
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007386:	b480      	push	{r7}
 8007388:	b087      	sub	sp, #28
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	607a      	str	r2, [r7, #4]
 8007392:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	69db      	ldr	r3, [r3, #28]
 80073a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f023 0303 	bic.w	r3, r3, #3
 80073b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80073d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	021b      	lsls	r3, r3, #8
 80073dc:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	621a      	str	r2, [r3, #32]
}
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80073fe:	b480      	push	{r7}
 8007400:	b087      	sub	sp, #28
 8007402:	af00      	add	r7, sp, #0
 8007404:	60f8      	str	r0, [r7, #12]
 8007406:	60b9      	str	r1, [r7, #8]
 8007408:	607a      	str	r2, [r7, #4]
 800740a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6a1b      	ldr	r3, [r3, #32]
 8007422:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800742a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	021b      	lsls	r3, r3, #8
 8007430:	697a      	ldr	r2, [r7, #20]
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800743c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	031b      	lsls	r3, r3, #12
 8007442:	b29b      	uxth	r3, r3
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007450:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	031b      	lsls	r3, r3, #12
 8007456:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	4313      	orrs	r3, r2
 800745e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	621a      	str	r2, [r3, #32]
}
 800746c:	bf00      	nop
 800746e:	371c      	adds	r7, #28
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f003 031f 	and.w	r3, r3, #31
 800748a:	2201      	movs	r2, #1
 800748c:	fa02 f303 	lsl.w	r3, r2, r3
 8007490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a1a      	ldr	r2, [r3, #32]
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	43db      	mvns	r3, r3
 800749a:	401a      	ands	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6a1a      	ldr	r2, [r3, #32]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f003 031f 	and.w	r3, r3, #31
 80074aa:	6879      	ldr	r1, [r7, #4]
 80074ac:	fa01 f303 	lsl.w	r3, r1, r3
 80074b0:	431a      	orrs	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	621a      	str	r2, [r3, #32]
}
 80074b6:	bf00      	nop
 80074b8:	371c      	adds	r7, #28
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
	...

080074c4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d109      	bne.n	80074e8 <HAL_TIMEx_PWMN_Start+0x24>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b01      	cmp	r3, #1
 80074de:	bf14      	ite	ne
 80074e0:	2301      	movne	r3, #1
 80074e2:	2300      	moveq	r3, #0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	e022      	b.n	800752e <HAL_TIMEx_PWMN_Start+0x6a>
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2b04      	cmp	r3, #4
 80074ec:	d109      	bne.n	8007502 <HAL_TIMEx_PWMN_Start+0x3e>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	bf14      	ite	ne
 80074fa:	2301      	movne	r3, #1
 80074fc:	2300      	moveq	r3, #0
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	e015      	b.n	800752e <HAL_TIMEx_PWMN_Start+0x6a>
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b08      	cmp	r3, #8
 8007506:	d109      	bne.n	800751c <HAL_TIMEx_PWMN_Start+0x58>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b01      	cmp	r3, #1
 8007512:	bf14      	ite	ne
 8007514:	2301      	movne	r3, #1
 8007516:	2300      	moveq	r3, #0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	e008      	b.n	800752e <HAL_TIMEx_PWMN_Start+0x6a>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b01      	cmp	r3, #1
 8007526:	bf14      	ite	ne
 8007528:	2301      	movne	r3, #1
 800752a:	2300      	moveq	r3, #0
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e073      	b.n	800761e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d104      	bne.n	8007546 <HAL_TIMEx_PWMN_Start+0x82>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007544:	e013      	b.n	800756e <HAL_TIMEx_PWMN_Start+0xaa>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b04      	cmp	r3, #4
 800754a:	d104      	bne.n	8007556 <HAL_TIMEx_PWMN_Start+0x92>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007554:	e00b      	b.n	800756e <HAL_TIMEx_PWMN_Start+0xaa>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b08      	cmp	r3, #8
 800755a:	d104      	bne.n	8007566 <HAL_TIMEx_PWMN_Start+0xa2>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007564:	e003      	b.n	800756e <HAL_TIMEx_PWMN_Start+0xaa>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2202      	movs	r2, #2
 800756a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2204      	movs	r2, #4
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	4618      	mov	r0, r3
 8007578:	f000 f9ae 	bl	80078d8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800758a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a25      	ldr	r2, [pc, #148]	; (8007628 <HAL_TIMEx_PWMN_Start+0x164>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d022      	beq.n	80075dc <HAL_TIMEx_PWMN_Start+0x118>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800759e:	d01d      	beq.n	80075dc <HAL_TIMEx_PWMN_Start+0x118>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a21      	ldr	r2, [pc, #132]	; (800762c <HAL_TIMEx_PWMN_Start+0x168>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d018      	beq.n	80075dc <HAL_TIMEx_PWMN_Start+0x118>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a20      	ldr	r2, [pc, #128]	; (8007630 <HAL_TIMEx_PWMN_Start+0x16c>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d013      	beq.n	80075dc <HAL_TIMEx_PWMN_Start+0x118>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a1e      	ldr	r2, [pc, #120]	; (8007634 <HAL_TIMEx_PWMN_Start+0x170>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d00e      	beq.n	80075dc <HAL_TIMEx_PWMN_Start+0x118>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a1d      	ldr	r2, [pc, #116]	; (8007638 <HAL_TIMEx_PWMN_Start+0x174>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d009      	beq.n	80075dc <HAL_TIMEx_PWMN_Start+0x118>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a1b      	ldr	r2, [pc, #108]	; (800763c <HAL_TIMEx_PWMN_Start+0x178>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d004      	beq.n	80075dc <HAL_TIMEx_PWMN_Start+0x118>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a1a      	ldr	r2, [pc, #104]	; (8007640 <HAL_TIMEx_PWMN_Start+0x17c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d115      	bne.n	8007608 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	4b18      	ldr	r3, [pc, #96]	; (8007644 <HAL_TIMEx_PWMN_Start+0x180>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b06      	cmp	r3, #6
 80075ec:	d015      	beq.n	800761a <HAL_TIMEx_PWMN_Start+0x156>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075f4:	d011      	beq.n	800761a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f042 0201 	orr.w	r2, r2, #1
 8007604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007606:	e008      	b.n	800761a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f042 0201 	orr.w	r2, r2, #1
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	e000      	b.n	800761c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800761a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	40012c00 	.word	0x40012c00
 800762c:	40000400 	.word	0x40000400
 8007630:	40000800 	.word	0x40000800
 8007634:	40000c00 	.word	0x40000c00
 8007638:	40013400 	.word	0x40013400
 800763c:	40014000 	.word	0x40014000
 8007640:	40015000 	.word	0x40015000
 8007644:	00010007 	.word	0x00010007

08007648 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007658:	2b01      	cmp	r3, #1
 800765a:	d101      	bne.n	8007660 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800765c:	2302      	movs	r3, #2
 800765e:	e074      	b.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2202      	movs	r2, #2
 800766c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a34      	ldr	r2, [pc, #208]	; (8007758 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d009      	beq.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a33      	ldr	r2, [pc, #204]	; (800775c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d004      	beq.n	800769e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a31      	ldr	r2, [pc, #196]	; (8007760 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d108      	bne.n	80076b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80076a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80076b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a21      	ldr	r2, [pc, #132]	; (8007758 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d022      	beq.n	800771e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e0:	d01d      	beq.n	800771e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a1f      	ldr	r2, [pc, #124]	; (8007764 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d018      	beq.n	800771e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a1d      	ldr	r2, [pc, #116]	; (8007768 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d013      	beq.n	800771e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a1c      	ldr	r2, [pc, #112]	; (800776c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d00e      	beq.n	800771e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a15      	ldr	r2, [pc, #84]	; (800775c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d009      	beq.n	800771e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a18      	ldr	r2, [pc, #96]	; (8007770 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d004      	beq.n	800771e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a11      	ldr	r2, [pc, #68]	; (8007760 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d10c      	bne.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007724:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	4313      	orrs	r3, r2
 800772e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	40012c00 	.word	0x40012c00
 800775c:	40013400 	.word	0x40013400
 8007760:	40015000 	.word	0x40015000
 8007764:	40000400 	.word	0x40000400
 8007768:	40000800 	.word	0x40000800
 800776c:	40000c00 	.word	0x40000c00
 8007770:	40014000 	.word	0x40014000

08007774 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007788:	2b01      	cmp	r3, #1
 800778a:	d101      	bne.n	8007790 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800778c:	2302      	movs	r3, #2
 800778e:	e096      	b.n	80078be <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	041b      	lsls	r3, r3, #16
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a2f      	ldr	r2, [pc, #188]	; (80078cc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d009      	beq.n	8007828 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a2d      	ldr	r2, [pc, #180]	; (80078d0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d004      	beq.n	8007828 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a2c      	ldr	r2, [pc, #176]	; (80078d4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d106      	bne.n	8007836 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	4313      	orrs	r3, r2
 8007834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a24      	ldr	r2, [pc, #144]	; (80078cc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d009      	beq.n	8007854 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a22      	ldr	r2, [pc, #136]	; (80078d0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d004      	beq.n	8007854 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a21      	ldr	r2, [pc, #132]	; (80078d4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d12b      	bne.n	80078ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785e:	051b      	lsls	r3, r3, #20
 8007860:	4313      	orrs	r3, r2
 8007862:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	4313      	orrs	r3, r2
 8007870:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	4313      	orrs	r3, r2
 800787e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a11      	ldr	r2, [pc, #68]	; (80078cc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d009      	beq.n	800789e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a10      	ldr	r2, [pc, #64]	; (80078d0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d004      	beq.n	800789e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a0e      	ldr	r2, [pc, #56]	; (80078d4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d106      	bne.n	80078ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a8:	4313      	orrs	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	40012c00 	.word	0x40012c00
 80078d0:	40013400 	.word	0x40013400
 80078d4:	40015000 	.word	0x40015000

080078d8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f003 031f 	and.w	r3, r3, #31
 80078ea:	2204      	movs	r2, #4
 80078ec:	fa02 f303 	lsl.w	r3, r2, r3
 80078f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6a1a      	ldr	r2, [r3, #32]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	43db      	mvns	r3, r3
 80078fa:	401a      	ands	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6a1a      	ldr	r2, [r3, #32]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f003 031f 	and.w	r3, r3, #31
 800790a:	6879      	ldr	r1, [r7, #4]
 800790c:	fa01 f303 	lsl.w	r3, r1, r3
 8007910:	431a      	orrs	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	621a      	str	r2, [r3, #32]
}
 8007916:	bf00      	nop
 8007918:	371c      	adds	r7, #28
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b082      	sub	sp, #8
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d101      	bne.n	8007934 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e042      	b.n	80079ba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800793a:	2b00      	cmp	r3, #0
 800793c:	d106      	bne.n	800794c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f7f9 fd82 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2224      	movs	r2, #36	; 0x24
 8007950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f022 0201 	bic.w	r2, r2, #1
 8007962:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f82d 	bl	80079c4 <UART_SetConfig>
 800796a:	4603      	mov	r3, r0
 800796c:	2b01      	cmp	r3, #1
 800796e:	d101      	bne.n	8007974 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e022      	b.n	80079ba <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fb1d 	bl	8007fbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007990:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689a      	ldr	r2, [r3, #8]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f042 0201 	orr.w	r2, r2, #1
 80079b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fba4 	bl	8008100 <UART_CheckIdleState>
 80079b8:	4603      	mov	r3, r0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
	...

080079c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079c8:	b08c      	sub	sp, #48	; 0x30
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079ce:	2300      	movs	r3, #0
 80079d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	431a      	orrs	r2, r3
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	695b      	ldr	r3, [r3, #20]
 80079e2:	431a      	orrs	r2, r3
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	4baa      	ldr	r3, [pc, #680]	; (8007c9c <UART_SetConfig+0x2d8>)
 80079f4:	4013      	ands	r3, r2
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	6812      	ldr	r2, [r2, #0]
 80079fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079fc:	430b      	orrs	r3, r1
 80079fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a9f      	ldr	r2, [pc, #636]	; (8007ca0 <UART_SetConfig+0x2dc>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d004      	beq.n	8007a30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007a3a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	6812      	ldr	r2, [r2, #0]
 8007a42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a44:	430b      	orrs	r3, r1
 8007a46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4e:	f023 010f 	bic.w	r1, r3, #15
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a90      	ldr	r2, [pc, #576]	; (8007ca4 <UART_SetConfig+0x2e0>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d125      	bne.n	8007ab4 <UART_SetConfig+0xf0>
 8007a68:	4b8f      	ldr	r3, [pc, #572]	; (8007ca8 <UART_SetConfig+0x2e4>)
 8007a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a6e:	f003 0303 	and.w	r3, r3, #3
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d81a      	bhi.n	8007aac <UART_SetConfig+0xe8>
 8007a76:	a201      	add	r2, pc, #4	; (adr r2, 8007a7c <UART_SetConfig+0xb8>)
 8007a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7c:	08007a8d 	.word	0x08007a8d
 8007a80:	08007a9d 	.word	0x08007a9d
 8007a84:	08007a95 	.word	0x08007a95
 8007a88:	08007aa5 	.word	0x08007aa5
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a92:	e116      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007a94:	2302      	movs	r3, #2
 8007a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a9a:	e112      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007a9c:	2304      	movs	r3, #4
 8007a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aa2:	e10e      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007aa4:	2308      	movs	r3, #8
 8007aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aaa:	e10a      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007aac:	2310      	movs	r3, #16
 8007aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ab2:	e106      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a7c      	ldr	r2, [pc, #496]	; (8007cac <UART_SetConfig+0x2e8>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d138      	bne.n	8007b30 <UART_SetConfig+0x16c>
 8007abe:	4b7a      	ldr	r3, [pc, #488]	; (8007ca8 <UART_SetConfig+0x2e4>)
 8007ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac4:	f003 030c 	and.w	r3, r3, #12
 8007ac8:	2b0c      	cmp	r3, #12
 8007aca:	d82d      	bhi.n	8007b28 <UART_SetConfig+0x164>
 8007acc:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <UART_SetConfig+0x110>)
 8007ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad2:	bf00      	nop
 8007ad4:	08007b09 	.word	0x08007b09
 8007ad8:	08007b29 	.word	0x08007b29
 8007adc:	08007b29 	.word	0x08007b29
 8007ae0:	08007b29 	.word	0x08007b29
 8007ae4:	08007b19 	.word	0x08007b19
 8007ae8:	08007b29 	.word	0x08007b29
 8007aec:	08007b29 	.word	0x08007b29
 8007af0:	08007b29 	.word	0x08007b29
 8007af4:	08007b11 	.word	0x08007b11
 8007af8:	08007b29 	.word	0x08007b29
 8007afc:	08007b29 	.word	0x08007b29
 8007b00:	08007b29 	.word	0x08007b29
 8007b04:	08007b21 	.word	0x08007b21
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b0e:	e0d8      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007b10:	2302      	movs	r3, #2
 8007b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b16:	e0d4      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007b18:	2304      	movs	r3, #4
 8007b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b1e:	e0d0      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007b20:	2308      	movs	r3, #8
 8007b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b26:	e0cc      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007b28:	2310      	movs	r3, #16
 8007b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b2e:	e0c8      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a5e      	ldr	r2, [pc, #376]	; (8007cb0 <UART_SetConfig+0x2ec>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d125      	bne.n	8007b86 <UART_SetConfig+0x1c2>
 8007b3a:	4b5b      	ldr	r3, [pc, #364]	; (8007ca8 <UART_SetConfig+0x2e4>)
 8007b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b44:	2b30      	cmp	r3, #48	; 0x30
 8007b46:	d016      	beq.n	8007b76 <UART_SetConfig+0x1b2>
 8007b48:	2b30      	cmp	r3, #48	; 0x30
 8007b4a:	d818      	bhi.n	8007b7e <UART_SetConfig+0x1ba>
 8007b4c:	2b20      	cmp	r3, #32
 8007b4e:	d00a      	beq.n	8007b66 <UART_SetConfig+0x1a2>
 8007b50:	2b20      	cmp	r3, #32
 8007b52:	d814      	bhi.n	8007b7e <UART_SetConfig+0x1ba>
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d002      	beq.n	8007b5e <UART_SetConfig+0x19a>
 8007b58:	2b10      	cmp	r3, #16
 8007b5a:	d008      	beq.n	8007b6e <UART_SetConfig+0x1aa>
 8007b5c:	e00f      	b.n	8007b7e <UART_SetConfig+0x1ba>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b64:	e0ad      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007b66:	2302      	movs	r3, #2
 8007b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b6c:	e0a9      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007b6e:	2304      	movs	r3, #4
 8007b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b74:	e0a5      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007b76:	2308      	movs	r3, #8
 8007b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b7c:	e0a1      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007b7e:	2310      	movs	r3, #16
 8007b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b84:	e09d      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a4a      	ldr	r2, [pc, #296]	; (8007cb4 <UART_SetConfig+0x2f0>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d125      	bne.n	8007bdc <UART_SetConfig+0x218>
 8007b90:	4b45      	ldr	r3, [pc, #276]	; (8007ca8 <UART_SetConfig+0x2e4>)
 8007b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b9a:	2bc0      	cmp	r3, #192	; 0xc0
 8007b9c:	d016      	beq.n	8007bcc <UART_SetConfig+0x208>
 8007b9e:	2bc0      	cmp	r3, #192	; 0xc0
 8007ba0:	d818      	bhi.n	8007bd4 <UART_SetConfig+0x210>
 8007ba2:	2b80      	cmp	r3, #128	; 0x80
 8007ba4:	d00a      	beq.n	8007bbc <UART_SetConfig+0x1f8>
 8007ba6:	2b80      	cmp	r3, #128	; 0x80
 8007ba8:	d814      	bhi.n	8007bd4 <UART_SetConfig+0x210>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <UART_SetConfig+0x1f0>
 8007bae:	2b40      	cmp	r3, #64	; 0x40
 8007bb0:	d008      	beq.n	8007bc4 <UART_SetConfig+0x200>
 8007bb2:	e00f      	b.n	8007bd4 <UART_SetConfig+0x210>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bba:	e082      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007bbc:	2302      	movs	r3, #2
 8007bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bc2:	e07e      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007bc4:	2304      	movs	r3, #4
 8007bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bca:	e07a      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007bcc:	2308      	movs	r3, #8
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd2:	e076      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007bd4:	2310      	movs	r3, #16
 8007bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bda:	e072      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a35      	ldr	r2, [pc, #212]	; (8007cb8 <UART_SetConfig+0x2f4>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d12a      	bne.n	8007c3c <UART_SetConfig+0x278>
 8007be6:	4b30      	ldr	r3, [pc, #192]	; (8007ca8 <UART_SetConfig+0x2e4>)
 8007be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bf4:	d01a      	beq.n	8007c2c <UART_SetConfig+0x268>
 8007bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bfa:	d81b      	bhi.n	8007c34 <UART_SetConfig+0x270>
 8007bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c00:	d00c      	beq.n	8007c1c <UART_SetConfig+0x258>
 8007c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c06:	d815      	bhi.n	8007c34 <UART_SetConfig+0x270>
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <UART_SetConfig+0x250>
 8007c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c10:	d008      	beq.n	8007c24 <UART_SetConfig+0x260>
 8007c12:	e00f      	b.n	8007c34 <UART_SetConfig+0x270>
 8007c14:	2300      	movs	r3, #0
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c1a:	e052      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c22:	e04e      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007c24:	2304      	movs	r3, #4
 8007c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c2a:	e04a      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007c2c:	2308      	movs	r3, #8
 8007c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c32:	e046      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007c34:	2310      	movs	r3, #16
 8007c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c3a:	e042      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a17      	ldr	r2, [pc, #92]	; (8007ca0 <UART_SetConfig+0x2dc>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d13a      	bne.n	8007cbc <UART_SetConfig+0x2f8>
 8007c46:	4b18      	ldr	r3, [pc, #96]	; (8007ca8 <UART_SetConfig+0x2e4>)
 8007c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c54:	d01a      	beq.n	8007c8c <UART_SetConfig+0x2c8>
 8007c56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c5a:	d81b      	bhi.n	8007c94 <UART_SetConfig+0x2d0>
 8007c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c60:	d00c      	beq.n	8007c7c <UART_SetConfig+0x2b8>
 8007c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c66:	d815      	bhi.n	8007c94 <UART_SetConfig+0x2d0>
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <UART_SetConfig+0x2b0>
 8007c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c70:	d008      	beq.n	8007c84 <UART_SetConfig+0x2c0>
 8007c72:	e00f      	b.n	8007c94 <UART_SetConfig+0x2d0>
 8007c74:	2300      	movs	r3, #0
 8007c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c7a:	e022      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c82:	e01e      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007c84:	2304      	movs	r3, #4
 8007c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c8a:	e01a      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007c8c:	2308      	movs	r3, #8
 8007c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c92:	e016      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007c94:	2310      	movs	r3, #16
 8007c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c9a:	e012      	b.n	8007cc2 <UART_SetConfig+0x2fe>
 8007c9c:	cfff69f3 	.word	0xcfff69f3
 8007ca0:	40008000 	.word	0x40008000
 8007ca4:	40013800 	.word	0x40013800
 8007ca8:	40021000 	.word	0x40021000
 8007cac:	40004400 	.word	0x40004400
 8007cb0:	40004800 	.word	0x40004800
 8007cb4:	40004c00 	.word	0x40004c00
 8007cb8:	40005000 	.word	0x40005000
 8007cbc:	2310      	movs	r3, #16
 8007cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4aae      	ldr	r2, [pc, #696]	; (8007f80 <UART_SetConfig+0x5bc>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	f040 8097 	bne.w	8007dfc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cd2:	2b08      	cmp	r3, #8
 8007cd4:	d823      	bhi.n	8007d1e <UART_SetConfig+0x35a>
 8007cd6:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <UART_SetConfig+0x318>)
 8007cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cdc:	08007d01 	.word	0x08007d01
 8007ce0:	08007d1f 	.word	0x08007d1f
 8007ce4:	08007d09 	.word	0x08007d09
 8007ce8:	08007d1f 	.word	0x08007d1f
 8007cec:	08007d0f 	.word	0x08007d0f
 8007cf0:	08007d1f 	.word	0x08007d1f
 8007cf4:	08007d1f 	.word	0x08007d1f
 8007cf8:	08007d1f 	.word	0x08007d1f
 8007cfc:	08007d17 	.word	0x08007d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d00:	f7fd fec4 	bl	8005a8c <HAL_RCC_GetPCLK1Freq>
 8007d04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d06:	e010      	b.n	8007d2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d08:	4b9e      	ldr	r3, [pc, #632]	; (8007f84 <UART_SetConfig+0x5c0>)
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d0c:	e00d      	b.n	8007d2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d0e:	f7fd fe4f 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 8007d12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d14:	e009      	b.n	8007d2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d1c:	e005      	b.n	8007d2a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 8130 	beq.w	8007f92 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d36:	4a94      	ldr	r2, [pc, #592]	; (8007f88 <UART_SetConfig+0x5c4>)
 8007d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	685a      	ldr	r2, [r3, #4]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	005b      	lsls	r3, r3, #1
 8007d4e:	4413      	add	r3, r2
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d305      	bcc.n	8007d62 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d5c:	69ba      	ldr	r2, [r7, #24]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d903      	bls.n	8007d6a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d68:	e113      	b.n	8007f92 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	60bb      	str	r3, [r7, #8]
 8007d70:	60fa      	str	r2, [r7, #12]
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d76:	4a84      	ldr	r2, [pc, #528]	; (8007f88 <UART_SetConfig+0x5c4>)
 8007d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	2200      	movs	r2, #0
 8007d80:	603b      	str	r3, [r7, #0]
 8007d82:	607a      	str	r2, [r7, #4]
 8007d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d8c:	f7f8 fa44 	bl	8000218 <__aeabi_uldivmod>
 8007d90:	4602      	mov	r2, r0
 8007d92:	460b      	mov	r3, r1
 8007d94:	4610      	mov	r0, r2
 8007d96:	4619      	mov	r1, r3
 8007d98:	f04f 0200 	mov.w	r2, #0
 8007d9c:	f04f 0300 	mov.w	r3, #0
 8007da0:	020b      	lsls	r3, r1, #8
 8007da2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007da6:	0202      	lsls	r2, r0, #8
 8007da8:	6979      	ldr	r1, [r7, #20]
 8007daa:	6849      	ldr	r1, [r1, #4]
 8007dac:	0849      	lsrs	r1, r1, #1
 8007dae:	2000      	movs	r0, #0
 8007db0:	460c      	mov	r4, r1
 8007db2:	4605      	mov	r5, r0
 8007db4:	eb12 0804 	adds.w	r8, r2, r4
 8007db8:	eb43 0905 	adc.w	r9, r3, r5
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	469a      	mov	sl, r3
 8007dc4:	4693      	mov	fp, r2
 8007dc6:	4652      	mov	r2, sl
 8007dc8:	465b      	mov	r3, fp
 8007dca:	4640      	mov	r0, r8
 8007dcc:	4649      	mov	r1, r9
 8007dce:	f7f8 fa23 	bl	8000218 <__aeabi_uldivmod>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007de0:	d308      	bcc.n	8007df4 <UART_SetConfig+0x430>
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007de8:	d204      	bcs.n	8007df4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6a3a      	ldr	r2, [r7, #32]
 8007df0:	60da      	str	r2, [r3, #12]
 8007df2:	e0ce      	b.n	8007f92 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007dfa:	e0ca      	b.n	8007f92 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e04:	d166      	bne.n	8007ed4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007e06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e0a:	2b08      	cmp	r3, #8
 8007e0c:	d827      	bhi.n	8007e5e <UART_SetConfig+0x49a>
 8007e0e:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <UART_SetConfig+0x450>)
 8007e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e14:	08007e39 	.word	0x08007e39
 8007e18:	08007e41 	.word	0x08007e41
 8007e1c:	08007e49 	.word	0x08007e49
 8007e20:	08007e5f 	.word	0x08007e5f
 8007e24:	08007e4f 	.word	0x08007e4f
 8007e28:	08007e5f 	.word	0x08007e5f
 8007e2c:	08007e5f 	.word	0x08007e5f
 8007e30:	08007e5f 	.word	0x08007e5f
 8007e34:	08007e57 	.word	0x08007e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e38:	f7fd fe28 	bl	8005a8c <HAL_RCC_GetPCLK1Freq>
 8007e3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e3e:	e014      	b.n	8007e6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e40:	f7fd fe3a 	bl	8005ab8 <HAL_RCC_GetPCLK2Freq>
 8007e44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e46:	e010      	b.n	8007e6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e48:	4b4e      	ldr	r3, [pc, #312]	; (8007f84 <UART_SetConfig+0x5c0>)
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e4c:	e00d      	b.n	8007e6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e4e:	f7fd fdaf 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 8007e52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e54:	e009      	b.n	8007e6a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e5c:	e005      	b.n	8007e6a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 8090 	beq.w	8007f92 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	4a44      	ldr	r2, [pc, #272]	; (8007f88 <UART_SetConfig+0x5c4>)
 8007e78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e80:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e84:	005a      	lsls	r2, r3, #1
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	085b      	lsrs	r3, r3, #1
 8007e8c:	441a      	add	r2, r3
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	2b0f      	cmp	r3, #15
 8007e9c:	d916      	bls.n	8007ecc <UART_SetConfig+0x508>
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ea4:	d212      	bcs.n	8007ecc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	f023 030f 	bic.w	r3, r3, #15
 8007eae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	085b      	lsrs	r3, r3, #1
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	f003 0307 	and.w	r3, r3, #7
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	8bfb      	ldrh	r3, [r7, #30]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	8bfa      	ldrh	r2, [r7, #30]
 8007ec8:	60da      	str	r2, [r3, #12]
 8007eca:	e062      	b.n	8007f92 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ed2:	e05e      	b.n	8007f92 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ed4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ed8:	2b08      	cmp	r3, #8
 8007eda:	d828      	bhi.n	8007f2e <UART_SetConfig+0x56a>
 8007edc:	a201      	add	r2, pc, #4	; (adr r2, 8007ee4 <UART_SetConfig+0x520>)
 8007ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee2:	bf00      	nop
 8007ee4:	08007f09 	.word	0x08007f09
 8007ee8:	08007f11 	.word	0x08007f11
 8007eec:	08007f19 	.word	0x08007f19
 8007ef0:	08007f2f 	.word	0x08007f2f
 8007ef4:	08007f1f 	.word	0x08007f1f
 8007ef8:	08007f2f 	.word	0x08007f2f
 8007efc:	08007f2f 	.word	0x08007f2f
 8007f00:	08007f2f 	.word	0x08007f2f
 8007f04:	08007f27 	.word	0x08007f27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f08:	f7fd fdc0 	bl	8005a8c <HAL_RCC_GetPCLK1Freq>
 8007f0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f0e:	e014      	b.n	8007f3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f10:	f7fd fdd2 	bl	8005ab8 <HAL_RCC_GetPCLK2Freq>
 8007f14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f16:	e010      	b.n	8007f3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f18:	4b1a      	ldr	r3, [pc, #104]	; (8007f84 <UART_SetConfig+0x5c0>)
 8007f1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f1c:	e00d      	b.n	8007f3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f1e:	f7fd fd47 	bl	80059b0 <HAL_RCC_GetSysClockFreq>
 8007f22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f24:	e009      	b.n	8007f3a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f2c:	e005      	b.n	8007f3a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f38:	bf00      	nop
    }

    if (pclk != 0U)
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d028      	beq.n	8007f92 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	4a10      	ldr	r2, [pc, #64]	; (8007f88 <UART_SetConfig+0x5c4>)
 8007f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	085b      	lsrs	r3, r3, #1
 8007f58:	441a      	add	r2, r3
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	2b0f      	cmp	r3, #15
 8007f68:	d910      	bls.n	8007f8c <UART_SetConfig+0x5c8>
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f70:	d20c      	bcs.n	8007f8c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	60da      	str	r2, [r3, #12]
 8007f7c:	e009      	b.n	8007f92 <UART_SetConfig+0x5ce>
 8007f7e:	bf00      	nop
 8007f80:	40008000 	.word	0x40008000
 8007f84:	00f42400 	.word	0x00f42400
 8007f88:	08009244 	.word	0x08009244
      }
      else
      {
        ret = HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	2200      	movs	r2, #0
 8007fac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007fae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3730      	adds	r7, #48	; 0x30
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007fbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d00a      	beq.n	8007fe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00a      	beq.n	8008008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00a      	beq.n	800802a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	430a      	orrs	r2, r1
 8008028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802e:	f003 0308 	and.w	r3, r3, #8
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00a      	beq.n	800804c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008050:	f003 0310 	and.w	r3, r3, #16
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00a      	beq.n	800806e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	430a      	orrs	r2, r1
 800806c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008072:	f003 0320 	and.w	r3, r3, #32
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00a      	beq.n	8008090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	430a      	orrs	r2, r1
 800808e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008098:	2b00      	cmp	r3, #0
 800809a:	d01a      	beq.n	80080d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080ba:	d10a      	bne.n	80080d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	430a      	orrs	r2, r1
 80080d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	605a      	str	r2, [r3, #4]
  }
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af02      	add	r7, sp, #8
 8008106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008110:	f7f9 fc46 	bl	80019a0 <HAL_GetTick>
 8008114:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0308 	and.w	r3, r3, #8
 8008120:	2b08      	cmp	r3, #8
 8008122:	d10e      	bne.n	8008142 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008124:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	2200      	movs	r2, #0
 800812e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f82f 	bl	8008196 <UART_WaitOnFlagUntilTimeout>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e025      	b.n	800818e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 0304 	and.w	r3, r3, #4
 800814c:	2b04      	cmp	r3, #4
 800814e:	d10e      	bne.n	800816e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008150:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2200      	movs	r2, #0
 800815a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f819 	bl	8008196 <UART_WaitOnFlagUntilTimeout>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e00f      	b.n	800818e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2220      	movs	r2, #32
 800817a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b09c      	sub	sp, #112	; 0x70
 800819a:	af00      	add	r7, sp, #0
 800819c:	60f8      	str	r0, [r7, #12]
 800819e:	60b9      	str	r1, [r7, #8]
 80081a0:	603b      	str	r3, [r7, #0]
 80081a2:	4613      	mov	r3, r2
 80081a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081a6:	e0a9      	b.n	80082fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ae:	f000 80a5 	beq.w	80082fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081b2:	f7f9 fbf5 	bl	80019a0 <HAL_GetTick>
 80081b6:	4602      	mov	r2, r0
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80081be:	429a      	cmp	r2, r3
 80081c0:	d302      	bcc.n	80081c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80081c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d140      	bne.n	800824a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081dc:	667b      	str	r3, [r7, #100]	; 0x64
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80081ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80081ee:	e841 2300 	strex	r3, r2, [r1]
 80081f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80081f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1e6      	bne.n	80081c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	3308      	adds	r3, #8
 8008200:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008204:	e853 3f00 	ldrex	r3, [r3]
 8008208:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800820a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800820c:	f023 0301 	bic.w	r3, r3, #1
 8008210:	663b      	str	r3, [r7, #96]	; 0x60
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3308      	adds	r3, #8
 8008218:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800821a:	64ba      	str	r2, [r7, #72]	; 0x48
 800821c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e5      	bne.n	80081fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2220      	movs	r2, #32
 8008232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2220      	movs	r2, #32
 800823a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e069      	b.n	800831e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b00      	cmp	r3, #0
 8008256:	d051      	beq.n	80082fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	69db      	ldr	r3, [r3, #28]
 800825e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008266:	d149      	bne.n	80082fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008270:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827a:	e853 3f00 	ldrex	r3, [r3]
 800827e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008286:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	461a      	mov	r2, r3
 800828e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008290:	637b      	str	r3, [r7, #52]	; 0x34
 8008292:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008294:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008298:	e841 2300 	strex	r3, r2, [r1]
 800829c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800829e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1e6      	bne.n	8008272 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3308      	adds	r3, #8
 80082aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	e853 3f00 	ldrex	r3, [r3]
 80082b2:	613b      	str	r3, [r7, #16]
   return(result);
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	f023 0301 	bic.w	r3, r3, #1
 80082ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	3308      	adds	r3, #8
 80082c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80082c4:	623a      	str	r2, [r7, #32]
 80082c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c8:	69f9      	ldr	r1, [r7, #28]
 80082ca:	6a3a      	ldr	r2, [r7, #32]
 80082cc:	e841 2300 	strex	r3, r2, [r1]
 80082d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1e5      	bne.n	80082a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2220      	movs	r2, #32
 80082dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2220      	movs	r2, #32
 80082ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e010      	b.n	800831e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	69da      	ldr	r2, [r3, #28]
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	4013      	ands	r3, r2
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	429a      	cmp	r2, r3
 800830a:	bf0c      	ite	eq
 800830c:	2301      	moveq	r3, #1
 800830e:	2300      	movne	r3, #0
 8008310:	b2db      	uxtb	r3, r3
 8008312:	461a      	mov	r2, r3
 8008314:	79fb      	ldrb	r3, [r7, #7]
 8008316:	429a      	cmp	r2, r3
 8008318:	f43f af46 	beq.w	80081a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3770      	adds	r7, #112	; 0x70
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008326:	b480      	push	{r7}
 8008328:	b085      	sub	sp, #20
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008334:	2b01      	cmp	r3, #1
 8008336:	d101      	bne.n	800833c <HAL_UARTEx_DisableFifoMode+0x16>
 8008338:	2302      	movs	r3, #2
 800833a:	e027      	b.n	800838c <HAL_UARTEx_DisableFifoMode+0x66>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2224      	movs	r2, #36	; 0x24
 8008348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f022 0201 	bic.w	r2, r2, #1
 8008362:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800836a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2220      	movs	r2, #32
 800837e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80083ac:	2302      	movs	r3, #2
 80083ae:	e02d      	b.n	800840c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2224      	movs	r2, #36	; 0x24
 80083bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f022 0201 	bic.w	r2, r2, #1
 80083d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	683a      	ldr	r2, [r7, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f84f 	bl	8008490 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2220      	movs	r2, #32
 80083fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008424:	2b01      	cmp	r3, #1
 8008426:	d101      	bne.n	800842c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008428:	2302      	movs	r3, #2
 800842a:	e02d      	b.n	8008488 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2224      	movs	r2, #36	; 0x24
 8008438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f022 0201 	bic.w	r2, r2, #1
 8008452:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	430a      	orrs	r2, r1
 8008466:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f000 f811 	bl	8008490 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2220      	movs	r2, #32
 800847a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800849c:	2b00      	cmp	r3, #0
 800849e:	d108      	bne.n	80084b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80084b0:	e031      	b.n	8008516 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80084b2:	2308      	movs	r3, #8
 80084b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80084b6:	2308      	movs	r3, #8
 80084b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	0e5b      	lsrs	r3, r3, #25
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	f003 0307 	and.w	r3, r3, #7
 80084c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	0f5b      	lsrs	r3, r3, #29
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	f003 0307 	and.w	r3, r3, #7
 80084d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084da:	7bbb      	ldrb	r3, [r7, #14]
 80084dc:	7b3a      	ldrb	r2, [r7, #12]
 80084de:	4911      	ldr	r1, [pc, #68]	; (8008524 <UARTEx_SetNbDataToProcess+0x94>)
 80084e0:	5c8a      	ldrb	r2, [r1, r2]
 80084e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80084e6:	7b3a      	ldrb	r2, [r7, #12]
 80084e8:	490f      	ldr	r1, [pc, #60]	; (8008528 <UARTEx_SetNbDataToProcess+0x98>)
 80084ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084f8:	7bfb      	ldrb	r3, [r7, #15]
 80084fa:	7b7a      	ldrb	r2, [r7, #13]
 80084fc:	4909      	ldr	r1, [pc, #36]	; (8008524 <UARTEx_SetNbDataToProcess+0x94>)
 80084fe:	5c8a      	ldrb	r2, [r1, r2]
 8008500:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008504:	7b7a      	ldrb	r2, [r7, #13]
 8008506:	4908      	ldr	r1, [pc, #32]	; (8008528 <UARTEx_SetNbDataToProcess+0x98>)
 8008508:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800850a:	fb93 f3f2 	sdiv	r3, r3, r2
 800850e:	b29a      	uxth	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008516:	bf00      	nop
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	0800925c 	.word	0x0800925c
 8008528:	08009264 	.word	0x08009264

0800852c <__errno>:
 800852c:	4b01      	ldr	r3, [pc, #4]	; (8008534 <__errno+0x8>)
 800852e:	6818      	ldr	r0, [r3, #0]
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	2000000c 	.word	0x2000000c

08008538 <__libc_init_array>:
 8008538:	b570      	push	{r4, r5, r6, lr}
 800853a:	4d0d      	ldr	r5, [pc, #52]	; (8008570 <__libc_init_array+0x38>)
 800853c:	4c0d      	ldr	r4, [pc, #52]	; (8008574 <__libc_init_array+0x3c>)
 800853e:	1b64      	subs	r4, r4, r5
 8008540:	10a4      	asrs	r4, r4, #2
 8008542:	2600      	movs	r6, #0
 8008544:	42a6      	cmp	r6, r4
 8008546:	d109      	bne.n	800855c <__libc_init_array+0x24>
 8008548:	4d0b      	ldr	r5, [pc, #44]	; (8008578 <__libc_init_array+0x40>)
 800854a:	4c0c      	ldr	r4, [pc, #48]	; (800857c <__libc_init_array+0x44>)
 800854c:	f000 fe62 	bl	8009214 <_init>
 8008550:	1b64      	subs	r4, r4, r5
 8008552:	10a4      	asrs	r4, r4, #2
 8008554:	2600      	movs	r6, #0
 8008556:	42a6      	cmp	r6, r4
 8008558:	d105      	bne.n	8008566 <__libc_init_array+0x2e>
 800855a:	bd70      	pop	{r4, r5, r6, pc}
 800855c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008560:	4798      	blx	r3
 8008562:	3601      	adds	r6, #1
 8008564:	e7ee      	b.n	8008544 <__libc_init_array+0xc>
 8008566:	f855 3b04 	ldr.w	r3, [r5], #4
 800856a:	4798      	blx	r3
 800856c:	3601      	adds	r6, #1
 800856e:	e7f2      	b.n	8008556 <__libc_init_array+0x1e>
 8008570:	0800964c 	.word	0x0800964c
 8008574:	0800964c 	.word	0x0800964c
 8008578:	0800964c 	.word	0x0800964c
 800857c:	08009650 	.word	0x08009650

08008580 <memset>:
 8008580:	4402      	add	r2, r0
 8008582:	4603      	mov	r3, r0
 8008584:	4293      	cmp	r3, r2
 8008586:	d100      	bne.n	800858a <memset+0xa>
 8008588:	4770      	bx	lr
 800858a:	f803 1b01 	strb.w	r1, [r3], #1
 800858e:	e7f9      	b.n	8008584 <memset+0x4>

08008590 <cosf>:
 8008590:	ee10 3a10 	vmov	r3, s0
 8008594:	b507      	push	{r0, r1, r2, lr}
 8008596:	4a1e      	ldr	r2, [pc, #120]	; (8008610 <cosf+0x80>)
 8008598:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800859c:	4293      	cmp	r3, r2
 800859e:	dc06      	bgt.n	80085ae <cosf+0x1e>
 80085a0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8008614 <cosf+0x84>
 80085a4:	b003      	add	sp, #12
 80085a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80085aa:	f000 ba59 	b.w	8008a60 <__kernel_cosf>
 80085ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80085b2:	db04      	blt.n	80085be <cosf+0x2e>
 80085b4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80085b8:	b003      	add	sp, #12
 80085ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80085be:	4668      	mov	r0, sp
 80085c0:	f000 f912 	bl	80087e8 <__ieee754_rem_pio2f>
 80085c4:	f000 0003 	and.w	r0, r0, #3
 80085c8:	2801      	cmp	r0, #1
 80085ca:	d009      	beq.n	80085e0 <cosf+0x50>
 80085cc:	2802      	cmp	r0, #2
 80085ce:	d010      	beq.n	80085f2 <cosf+0x62>
 80085d0:	b9b0      	cbnz	r0, 8008600 <cosf+0x70>
 80085d2:	eddd 0a01 	vldr	s1, [sp, #4]
 80085d6:	ed9d 0a00 	vldr	s0, [sp]
 80085da:	f000 fa41 	bl	8008a60 <__kernel_cosf>
 80085de:	e7eb      	b.n	80085b8 <cosf+0x28>
 80085e0:	eddd 0a01 	vldr	s1, [sp, #4]
 80085e4:	ed9d 0a00 	vldr	s0, [sp]
 80085e8:	f000 fd10 	bl	800900c <__kernel_sinf>
 80085ec:	eeb1 0a40 	vneg.f32	s0, s0
 80085f0:	e7e2      	b.n	80085b8 <cosf+0x28>
 80085f2:	eddd 0a01 	vldr	s1, [sp, #4]
 80085f6:	ed9d 0a00 	vldr	s0, [sp]
 80085fa:	f000 fa31 	bl	8008a60 <__kernel_cosf>
 80085fe:	e7f5      	b.n	80085ec <cosf+0x5c>
 8008600:	eddd 0a01 	vldr	s1, [sp, #4]
 8008604:	ed9d 0a00 	vldr	s0, [sp]
 8008608:	2001      	movs	r0, #1
 800860a:	f000 fcff 	bl	800900c <__kernel_sinf>
 800860e:	e7d3      	b.n	80085b8 <cosf+0x28>
 8008610:	3f490fd8 	.word	0x3f490fd8
 8008614:	00000000 	.word	0x00000000

08008618 <sinf>:
 8008618:	ee10 3a10 	vmov	r3, s0
 800861c:	b507      	push	{r0, r1, r2, lr}
 800861e:	4a1f      	ldr	r2, [pc, #124]	; (800869c <sinf+0x84>)
 8008620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008624:	4293      	cmp	r3, r2
 8008626:	dc07      	bgt.n	8008638 <sinf+0x20>
 8008628:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80086a0 <sinf+0x88>
 800862c:	2000      	movs	r0, #0
 800862e:	b003      	add	sp, #12
 8008630:	f85d eb04 	ldr.w	lr, [sp], #4
 8008634:	f000 bcea 	b.w	800900c <__kernel_sinf>
 8008638:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800863c:	db04      	blt.n	8008648 <sinf+0x30>
 800863e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008642:	b003      	add	sp, #12
 8008644:	f85d fb04 	ldr.w	pc, [sp], #4
 8008648:	4668      	mov	r0, sp
 800864a:	f000 f8cd 	bl	80087e8 <__ieee754_rem_pio2f>
 800864e:	f000 0003 	and.w	r0, r0, #3
 8008652:	2801      	cmp	r0, #1
 8008654:	d00a      	beq.n	800866c <sinf+0x54>
 8008656:	2802      	cmp	r0, #2
 8008658:	d00f      	beq.n	800867a <sinf+0x62>
 800865a:	b9c0      	cbnz	r0, 800868e <sinf+0x76>
 800865c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008660:	ed9d 0a00 	vldr	s0, [sp]
 8008664:	2001      	movs	r0, #1
 8008666:	f000 fcd1 	bl	800900c <__kernel_sinf>
 800866a:	e7ea      	b.n	8008642 <sinf+0x2a>
 800866c:	eddd 0a01 	vldr	s1, [sp, #4]
 8008670:	ed9d 0a00 	vldr	s0, [sp]
 8008674:	f000 f9f4 	bl	8008a60 <__kernel_cosf>
 8008678:	e7e3      	b.n	8008642 <sinf+0x2a>
 800867a:	eddd 0a01 	vldr	s1, [sp, #4]
 800867e:	ed9d 0a00 	vldr	s0, [sp]
 8008682:	2001      	movs	r0, #1
 8008684:	f000 fcc2 	bl	800900c <__kernel_sinf>
 8008688:	eeb1 0a40 	vneg.f32	s0, s0
 800868c:	e7d9      	b.n	8008642 <sinf+0x2a>
 800868e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008692:	ed9d 0a00 	vldr	s0, [sp]
 8008696:	f000 f9e3 	bl	8008a60 <__kernel_cosf>
 800869a:	e7f5      	b.n	8008688 <sinf+0x70>
 800869c:	3f490fd8 	.word	0x3f490fd8
 80086a0:	00000000 	.word	0x00000000

080086a4 <fmodf>:
 80086a4:	b508      	push	{r3, lr}
 80086a6:	ed2d 8b02 	vpush	{d8}
 80086aa:	eef0 8a40 	vmov.f32	s17, s0
 80086ae:	eeb0 8a60 	vmov.f32	s16, s1
 80086b2:	f000 f817 	bl	80086e4 <__ieee754_fmodf>
 80086b6:	eef4 8a48 	vcmp.f32	s17, s16
 80086ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086be:	d60c      	bvs.n	80086da <fmodf+0x36>
 80086c0:	eddf 8a07 	vldr	s17, [pc, #28]	; 80086e0 <fmodf+0x3c>
 80086c4:	eeb4 8a68 	vcmp.f32	s16, s17
 80086c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086cc:	d105      	bne.n	80086da <fmodf+0x36>
 80086ce:	f7ff ff2d 	bl	800852c <__errno>
 80086d2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80086d6:	2321      	movs	r3, #33	; 0x21
 80086d8:	6003      	str	r3, [r0, #0]
 80086da:	ecbd 8b02 	vpop	{d8}
 80086de:	bd08      	pop	{r3, pc}
 80086e0:	00000000 	.word	0x00000000

080086e4 <__ieee754_fmodf>:
 80086e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e6:	ee10 5a90 	vmov	r5, s1
 80086ea:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 80086ee:	d009      	beq.n	8008704 <__ieee754_fmodf+0x20>
 80086f0:	ee10 2a10 	vmov	r2, s0
 80086f4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80086f8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80086fc:	da02      	bge.n	8008704 <__ieee754_fmodf+0x20>
 80086fe:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8008702:	dd04      	ble.n	800870e <__ieee754_fmodf+0x2a>
 8008704:	ee60 0a20 	vmul.f32	s1, s0, s1
 8008708:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800870c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800870e:	42a3      	cmp	r3, r4
 8008710:	dbfc      	blt.n	800870c <__ieee754_fmodf+0x28>
 8008712:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8008716:	d105      	bne.n	8008724 <__ieee754_fmodf+0x40>
 8008718:	4b32      	ldr	r3, [pc, #200]	; (80087e4 <__ieee754_fmodf+0x100>)
 800871a:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800871e:	ed93 0a00 	vldr	s0, [r3]
 8008722:	e7f3      	b.n	800870c <__ieee754_fmodf+0x28>
 8008724:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8008728:	d13f      	bne.n	80087aa <__ieee754_fmodf+0xc6>
 800872a:	0219      	lsls	r1, r3, #8
 800872c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8008730:	2900      	cmp	r1, #0
 8008732:	dc37      	bgt.n	80087a4 <__ieee754_fmodf+0xc0>
 8008734:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8008738:	d13d      	bne.n	80087b6 <__ieee754_fmodf+0xd2>
 800873a:	0227      	lsls	r7, r4, #8
 800873c:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8008740:	2f00      	cmp	r7, #0
 8008742:	da35      	bge.n	80087b0 <__ieee754_fmodf+0xcc>
 8008744:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8008748:	bfbb      	ittet	lt
 800874a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800874e:	1a12      	sublt	r2, r2, r0
 8008750:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8008754:	4093      	lsllt	r3, r2
 8008756:	bfa8      	it	ge
 8008758:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800875c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008760:	bfb5      	itete	lt
 8008762:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8008766:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800876a:	1a52      	sublt	r2, r2, r1
 800876c:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8008770:	bfb8      	it	lt
 8008772:	4094      	lsllt	r4, r2
 8008774:	1a40      	subs	r0, r0, r1
 8008776:	1b1a      	subs	r2, r3, r4
 8008778:	bb00      	cbnz	r0, 80087bc <__ieee754_fmodf+0xd8>
 800877a:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800877e:	bf38      	it	cc
 8008780:	4613      	movcc	r3, r2
 8008782:	2b00      	cmp	r3, #0
 8008784:	d0c8      	beq.n	8008718 <__ieee754_fmodf+0x34>
 8008786:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800878a:	db1f      	blt.n	80087cc <__ieee754_fmodf+0xe8>
 800878c:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8008790:	db1f      	blt.n	80087d2 <__ieee754_fmodf+0xee>
 8008792:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8008796:	317f      	adds	r1, #127	; 0x7f
 8008798:	4333      	orrs	r3, r6
 800879a:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800879e:	ee00 3a10 	vmov	s0, r3
 80087a2:	e7b3      	b.n	800870c <__ieee754_fmodf+0x28>
 80087a4:	3801      	subs	r0, #1
 80087a6:	0049      	lsls	r1, r1, #1
 80087a8:	e7c2      	b.n	8008730 <__ieee754_fmodf+0x4c>
 80087aa:	15d8      	asrs	r0, r3, #23
 80087ac:	387f      	subs	r0, #127	; 0x7f
 80087ae:	e7c1      	b.n	8008734 <__ieee754_fmodf+0x50>
 80087b0:	3901      	subs	r1, #1
 80087b2:	007f      	lsls	r7, r7, #1
 80087b4:	e7c4      	b.n	8008740 <__ieee754_fmodf+0x5c>
 80087b6:	15e1      	asrs	r1, r4, #23
 80087b8:	397f      	subs	r1, #127	; 0x7f
 80087ba:	e7c3      	b.n	8008744 <__ieee754_fmodf+0x60>
 80087bc:	2a00      	cmp	r2, #0
 80087be:	da02      	bge.n	80087c6 <__ieee754_fmodf+0xe2>
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	3801      	subs	r0, #1
 80087c4:	e7d7      	b.n	8008776 <__ieee754_fmodf+0x92>
 80087c6:	d0a7      	beq.n	8008718 <__ieee754_fmodf+0x34>
 80087c8:	0053      	lsls	r3, r2, #1
 80087ca:	e7fa      	b.n	80087c2 <__ieee754_fmodf+0xde>
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	3901      	subs	r1, #1
 80087d0:	e7d9      	b.n	8008786 <__ieee754_fmodf+0xa2>
 80087d2:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 80087d6:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80087da:	3182      	adds	r1, #130	; 0x82
 80087dc:	410b      	asrs	r3, r1
 80087de:	4333      	orrs	r3, r6
 80087e0:	e7dd      	b.n	800879e <__ieee754_fmodf+0xba>
 80087e2:	bf00      	nop
 80087e4:	0800926c 	.word	0x0800926c

080087e8 <__ieee754_rem_pio2f>:
 80087e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ea:	ee10 6a10 	vmov	r6, s0
 80087ee:	4b8e      	ldr	r3, [pc, #568]	; (8008a28 <__ieee754_rem_pio2f+0x240>)
 80087f0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80087f4:	429d      	cmp	r5, r3
 80087f6:	b087      	sub	sp, #28
 80087f8:	eef0 7a40 	vmov.f32	s15, s0
 80087fc:	4604      	mov	r4, r0
 80087fe:	dc05      	bgt.n	800880c <__ieee754_rem_pio2f+0x24>
 8008800:	2300      	movs	r3, #0
 8008802:	ed80 0a00 	vstr	s0, [r0]
 8008806:	6043      	str	r3, [r0, #4]
 8008808:	2000      	movs	r0, #0
 800880a:	e01a      	b.n	8008842 <__ieee754_rem_pio2f+0x5a>
 800880c:	4b87      	ldr	r3, [pc, #540]	; (8008a2c <__ieee754_rem_pio2f+0x244>)
 800880e:	429d      	cmp	r5, r3
 8008810:	dc46      	bgt.n	80088a0 <__ieee754_rem_pio2f+0xb8>
 8008812:	2e00      	cmp	r6, #0
 8008814:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8008a30 <__ieee754_rem_pio2f+0x248>
 8008818:	4b86      	ldr	r3, [pc, #536]	; (8008a34 <__ieee754_rem_pio2f+0x24c>)
 800881a:	f025 050f 	bic.w	r5, r5, #15
 800881e:	dd1f      	ble.n	8008860 <__ieee754_rem_pio2f+0x78>
 8008820:	429d      	cmp	r5, r3
 8008822:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008826:	d00e      	beq.n	8008846 <__ieee754_rem_pio2f+0x5e>
 8008828:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8008a38 <__ieee754_rem_pio2f+0x250>
 800882c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8008830:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008834:	ed80 0a00 	vstr	s0, [r0]
 8008838:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800883c:	2001      	movs	r0, #1
 800883e:	edc4 7a01 	vstr	s15, [r4, #4]
 8008842:	b007      	add	sp, #28
 8008844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008846:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8008a3c <__ieee754_rem_pio2f+0x254>
 800884a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8008a40 <__ieee754_rem_pio2f+0x258>
 800884e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008852:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8008856:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800885a:	edc0 6a00 	vstr	s13, [r0]
 800885e:	e7eb      	b.n	8008838 <__ieee754_rem_pio2f+0x50>
 8008860:	429d      	cmp	r5, r3
 8008862:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008866:	d00e      	beq.n	8008886 <__ieee754_rem_pio2f+0x9e>
 8008868:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8008a38 <__ieee754_rem_pio2f+0x250>
 800886c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8008870:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008874:	ed80 0a00 	vstr	s0, [r0]
 8008878:	ee77 7a87 	vadd.f32	s15, s15, s14
 800887c:	f04f 30ff 	mov.w	r0, #4294967295
 8008880:	edc4 7a01 	vstr	s15, [r4, #4]
 8008884:	e7dd      	b.n	8008842 <__ieee754_rem_pio2f+0x5a>
 8008886:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8008a3c <__ieee754_rem_pio2f+0x254>
 800888a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8008a40 <__ieee754_rem_pio2f+0x258>
 800888e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008892:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008896:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800889a:	edc0 6a00 	vstr	s13, [r0]
 800889e:	e7eb      	b.n	8008878 <__ieee754_rem_pio2f+0x90>
 80088a0:	4b68      	ldr	r3, [pc, #416]	; (8008a44 <__ieee754_rem_pio2f+0x25c>)
 80088a2:	429d      	cmp	r5, r3
 80088a4:	dc72      	bgt.n	800898c <__ieee754_rem_pio2f+0x1a4>
 80088a6:	f000 fbf9 	bl	800909c <fabsf>
 80088aa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8008a48 <__ieee754_rem_pio2f+0x260>
 80088ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80088b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80088b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80088be:	ee17 0a90 	vmov	r0, s15
 80088c2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8008a30 <__ieee754_rem_pio2f+0x248>
 80088c6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80088ca:	281f      	cmp	r0, #31
 80088cc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8008a38 <__ieee754_rem_pio2f+0x250>
 80088d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d4:	eeb1 6a47 	vneg.f32	s12, s14
 80088d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80088dc:	ee16 2a90 	vmov	r2, s13
 80088e0:	dc1c      	bgt.n	800891c <__ieee754_rem_pio2f+0x134>
 80088e2:	495a      	ldr	r1, [pc, #360]	; (8008a4c <__ieee754_rem_pio2f+0x264>)
 80088e4:	1e47      	subs	r7, r0, #1
 80088e6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80088ea:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80088ee:	428b      	cmp	r3, r1
 80088f0:	d014      	beq.n	800891c <__ieee754_rem_pio2f+0x134>
 80088f2:	6022      	str	r2, [r4, #0]
 80088f4:	ed94 7a00 	vldr	s14, [r4]
 80088f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80088fc:	2e00      	cmp	r6, #0
 80088fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008902:	ed84 0a01 	vstr	s0, [r4, #4]
 8008906:	da9c      	bge.n	8008842 <__ieee754_rem_pio2f+0x5a>
 8008908:	eeb1 7a47 	vneg.f32	s14, s14
 800890c:	eeb1 0a40 	vneg.f32	s0, s0
 8008910:	ed84 7a00 	vstr	s14, [r4]
 8008914:	ed84 0a01 	vstr	s0, [r4, #4]
 8008918:	4240      	negs	r0, r0
 800891a:	e792      	b.n	8008842 <__ieee754_rem_pio2f+0x5a>
 800891c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008920:	15eb      	asrs	r3, r5, #23
 8008922:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8008926:	2d08      	cmp	r5, #8
 8008928:	dde3      	ble.n	80088f2 <__ieee754_rem_pio2f+0x10a>
 800892a:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008a3c <__ieee754_rem_pio2f+0x254>
 800892e:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008a40 <__ieee754_rem_pio2f+0x258>
 8008932:	eef0 6a40 	vmov.f32	s13, s0
 8008936:	eee6 6a27 	vfma.f32	s13, s12, s15
 800893a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800893e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8008942:	eef0 7a40 	vmov.f32	s15, s0
 8008946:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800894a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800894e:	ee15 2a90 	vmov	r2, s11
 8008952:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008956:	1a5b      	subs	r3, r3, r1
 8008958:	2b19      	cmp	r3, #25
 800895a:	dc04      	bgt.n	8008966 <__ieee754_rem_pio2f+0x17e>
 800895c:	edc4 5a00 	vstr	s11, [r4]
 8008960:	eeb0 0a66 	vmov.f32	s0, s13
 8008964:	e7c6      	b.n	80088f4 <__ieee754_rem_pio2f+0x10c>
 8008966:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8008a50 <__ieee754_rem_pio2f+0x268>
 800896a:	eeb0 0a66 	vmov.f32	s0, s13
 800896e:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008972:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008976:	eddf 6a37 	vldr	s13, [pc, #220]	; 8008a54 <__ieee754_rem_pio2f+0x26c>
 800897a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800897e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008982:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008986:	ed84 7a00 	vstr	s14, [r4]
 800898a:	e7b3      	b.n	80088f4 <__ieee754_rem_pio2f+0x10c>
 800898c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8008990:	db06      	blt.n	80089a0 <__ieee754_rem_pio2f+0x1b8>
 8008992:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008996:	edc0 7a01 	vstr	s15, [r0, #4]
 800899a:	edc0 7a00 	vstr	s15, [r0]
 800899e:	e733      	b.n	8008808 <__ieee754_rem_pio2f+0x20>
 80089a0:	15ea      	asrs	r2, r5, #23
 80089a2:	3a86      	subs	r2, #134	; 0x86
 80089a4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80089a8:	ee07 3a90 	vmov	s15, r3
 80089ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80089b0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008a58 <__ieee754_rem_pio2f+0x270>
 80089b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80089b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089bc:	ed8d 7a03 	vstr	s14, [sp, #12]
 80089c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80089c4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80089c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80089cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089d0:	ed8d 7a04 	vstr	s14, [sp, #16]
 80089d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80089d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80089dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e0:	edcd 7a05 	vstr	s15, [sp, #20]
 80089e4:	d11e      	bne.n	8008a24 <__ieee754_rem_pio2f+0x23c>
 80089e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80089ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089ee:	bf14      	ite	ne
 80089f0:	2302      	movne	r3, #2
 80089f2:	2301      	moveq	r3, #1
 80089f4:	4919      	ldr	r1, [pc, #100]	; (8008a5c <__ieee754_rem_pio2f+0x274>)
 80089f6:	9101      	str	r1, [sp, #4]
 80089f8:	2102      	movs	r1, #2
 80089fa:	9100      	str	r1, [sp, #0]
 80089fc:	a803      	add	r0, sp, #12
 80089fe:	4621      	mov	r1, r4
 8008a00:	f000 f88e 	bl	8008b20 <__kernel_rem_pio2f>
 8008a04:	2e00      	cmp	r6, #0
 8008a06:	f6bf af1c 	bge.w	8008842 <__ieee754_rem_pio2f+0x5a>
 8008a0a:	edd4 7a00 	vldr	s15, [r4]
 8008a0e:	eef1 7a67 	vneg.f32	s15, s15
 8008a12:	edc4 7a00 	vstr	s15, [r4]
 8008a16:	edd4 7a01 	vldr	s15, [r4, #4]
 8008a1a:	eef1 7a67 	vneg.f32	s15, s15
 8008a1e:	edc4 7a01 	vstr	s15, [r4, #4]
 8008a22:	e779      	b.n	8008918 <__ieee754_rem_pio2f+0x130>
 8008a24:	2303      	movs	r3, #3
 8008a26:	e7e5      	b.n	80089f4 <__ieee754_rem_pio2f+0x20c>
 8008a28:	3f490fd8 	.word	0x3f490fd8
 8008a2c:	4016cbe3 	.word	0x4016cbe3
 8008a30:	3fc90f80 	.word	0x3fc90f80
 8008a34:	3fc90fd0 	.word	0x3fc90fd0
 8008a38:	37354443 	.word	0x37354443
 8008a3c:	37354400 	.word	0x37354400
 8008a40:	2e85a308 	.word	0x2e85a308
 8008a44:	43490f80 	.word	0x43490f80
 8008a48:	3f22f984 	.word	0x3f22f984
 8008a4c:	08009274 	.word	0x08009274
 8008a50:	2e85a300 	.word	0x2e85a300
 8008a54:	248d3132 	.word	0x248d3132
 8008a58:	43800000 	.word	0x43800000
 8008a5c:	080092f4 	.word	0x080092f4

08008a60 <__kernel_cosf>:
 8008a60:	ee10 3a10 	vmov	r3, s0
 8008a64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a68:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8008a6c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008a70:	da05      	bge.n	8008a7e <__kernel_cosf+0x1e>
 8008a72:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008a76:	ee17 2a90 	vmov	r2, s15
 8008a7a:	2a00      	cmp	r2, #0
 8008a7c:	d03d      	beq.n	8008afa <__kernel_cosf+0x9a>
 8008a7e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8008a82:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8008b00 <__kernel_cosf+0xa0>
 8008a86:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008b04 <__kernel_cosf+0xa4>
 8008a8a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8008b08 <__kernel_cosf+0xa8>
 8008a8e:	4a1f      	ldr	r2, [pc, #124]	; (8008b0c <__kernel_cosf+0xac>)
 8008a90:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8008a94:	4293      	cmp	r3, r2
 8008a96:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8008b10 <__kernel_cosf+0xb0>
 8008a9a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008a9e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8008b14 <__kernel_cosf+0xb4>
 8008aa2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008aa6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8008b18 <__kernel_cosf+0xb8>
 8008aaa:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008aae:	eeb0 7a66 	vmov.f32	s14, s13
 8008ab2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8008ab6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008aba:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8008abe:	ee67 6a25 	vmul.f32	s13, s14, s11
 8008ac2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8008ac6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008aca:	dc04      	bgt.n	8008ad6 <__kernel_cosf+0x76>
 8008acc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008ad0:	ee36 0a47 	vsub.f32	s0, s12, s14
 8008ad4:	4770      	bx	lr
 8008ad6:	4a11      	ldr	r2, [pc, #68]	; (8008b1c <__kernel_cosf+0xbc>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	bfda      	itte	le
 8008adc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8008ae0:	ee06 3a90 	vmovle	s13, r3
 8008ae4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8008ae8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008aec:	ee36 0a66 	vsub.f32	s0, s12, s13
 8008af0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008af4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008af8:	4770      	bx	lr
 8008afa:	eeb0 0a46 	vmov.f32	s0, s12
 8008afe:	4770      	bx	lr
 8008b00:	ad47d74e 	.word	0xad47d74e
 8008b04:	310f74f6 	.word	0x310f74f6
 8008b08:	3d2aaaab 	.word	0x3d2aaaab
 8008b0c:	3e999999 	.word	0x3e999999
 8008b10:	b493f27c 	.word	0xb493f27c
 8008b14:	37d00d01 	.word	0x37d00d01
 8008b18:	bab60b61 	.word	0xbab60b61
 8008b1c:	3f480000 	.word	0x3f480000

08008b20 <__kernel_rem_pio2f>:
 8008b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b24:	ed2d 8b04 	vpush	{d8-d9}
 8008b28:	b0d9      	sub	sp, #356	; 0x164
 8008b2a:	4688      	mov	r8, r1
 8008b2c:	9002      	str	r0, [sp, #8]
 8008b2e:	49bb      	ldr	r1, [pc, #748]	; (8008e1c <__kernel_rem_pio2f+0x2fc>)
 8008b30:	9866      	ldr	r0, [sp, #408]	; 0x198
 8008b32:	9301      	str	r3, [sp, #4]
 8008b34:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8008b38:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8008b3c:	1e59      	subs	r1, r3, #1
 8008b3e:	1d13      	adds	r3, r2, #4
 8008b40:	db27      	blt.n	8008b92 <__kernel_rem_pio2f+0x72>
 8008b42:	f1b2 0b03 	subs.w	fp, r2, #3
 8008b46:	bf48      	it	mi
 8008b48:	f102 0b04 	addmi.w	fp, r2, #4
 8008b4c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8008b50:	1c45      	adds	r5, r0, #1
 8008b52:	00ec      	lsls	r4, r5, #3
 8008b54:	1a47      	subs	r7, r0, r1
 8008b56:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8008e2c <__kernel_rem_pio2f+0x30c>
 8008b5a:	9403      	str	r4, [sp, #12]
 8008b5c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8008b60:	eb0a 0c01 	add.w	ip, sl, r1
 8008b64:	ae1c      	add	r6, sp, #112	; 0x70
 8008b66:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8008b6a:	2400      	movs	r4, #0
 8008b6c:	4564      	cmp	r4, ip
 8008b6e:	dd12      	ble.n	8008b96 <__kernel_rem_pio2f+0x76>
 8008b70:	9b01      	ldr	r3, [sp, #4]
 8008b72:	ac1c      	add	r4, sp, #112	; 0x70
 8008b74:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8008b78:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8008b7c:	f04f 0c00 	mov.w	ip, #0
 8008b80:	45d4      	cmp	ip, sl
 8008b82:	dc27      	bgt.n	8008bd4 <__kernel_rem_pio2f+0xb4>
 8008b84:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008b88:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8008e2c <__kernel_rem_pio2f+0x30c>
 8008b8c:	4627      	mov	r7, r4
 8008b8e:	2600      	movs	r6, #0
 8008b90:	e016      	b.n	8008bc0 <__kernel_rem_pio2f+0xa0>
 8008b92:	2000      	movs	r0, #0
 8008b94:	e7dc      	b.n	8008b50 <__kernel_rem_pio2f+0x30>
 8008b96:	42e7      	cmn	r7, r4
 8008b98:	bf5d      	ittte	pl
 8008b9a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8008b9e:	ee07 3a90 	vmovpl	s15, r3
 8008ba2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008ba6:	eef0 7a47 	vmovmi.f32	s15, s14
 8008baa:	ece6 7a01 	vstmia	r6!, {s15}
 8008bae:	3401      	adds	r4, #1
 8008bb0:	e7dc      	b.n	8008b6c <__kernel_rem_pio2f+0x4c>
 8008bb2:	ecf9 6a01 	vldmia	r9!, {s13}
 8008bb6:	ed97 7a00 	vldr	s14, [r7]
 8008bba:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008bbe:	3601      	adds	r6, #1
 8008bc0:	428e      	cmp	r6, r1
 8008bc2:	f1a7 0704 	sub.w	r7, r7, #4
 8008bc6:	ddf4      	ble.n	8008bb2 <__kernel_rem_pio2f+0x92>
 8008bc8:	eceb 7a01 	vstmia	fp!, {s15}
 8008bcc:	f10c 0c01 	add.w	ip, ip, #1
 8008bd0:	3404      	adds	r4, #4
 8008bd2:	e7d5      	b.n	8008b80 <__kernel_rem_pio2f+0x60>
 8008bd4:	ab08      	add	r3, sp, #32
 8008bd6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8008bda:	eddf 8a93 	vldr	s17, [pc, #588]	; 8008e28 <__kernel_rem_pio2f+0x308>
 8008bde:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8008e24 <__kernel_rem_pio2f+0x304>
 8008be2:	9304      	str	r3, [sp, #16]
 8008be4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8008be8:	4656      	mov	r6, sl
 8008bea:	00b3      	lsls	r3, r6, #2
 8008bec:	9305      	str	r3, [sp, #20]
 8008bee:	ab58      	add	r3, sp, #352	; 0x160
 8008bf0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008bf4:	ac08      	add	r4, sp, #32
 8008bf6:	ab44      	add	r3, sp, #272	; 0x110
 8008bf8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8008bfc:	46a4      	mov	ip, r4
 8008bfe:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8008c02:	4637      	mov	r7, r6
 8008c04:	2f00      	cmp	r7, #0
 8008c06:	f1a0 0004 	sub.w	r0, r0, #4
 8008c0a:	dc4f      	bgt.n	8008cac <__kernel_rem_pio2f+0x18c>
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008c12:	f000 fa8d 	bl	8009130 <scalbnf>
 8008c16:	eeb0 8a40 	vmov.f32	s16, s0
 8008c1a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8008c1e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008c22:	f000 fa43 	bl	80090ac <floorf>
 8008c26:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8008c2a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008c2e:	2d00      	cmp	r5, #0
 8008c30:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008c34:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008c38:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8008c3c:	ee17 9a90 	vmov	r9, s15
 8008c40:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008c44:	dd44      	ble.n	8008cd0 <__kernel_rem_pio2f+0x1b0>
 8008c46:	f106 3cff 	add.w	ip, r6, #4294967295
 8008c4a:	ab08      	add	r3, sp, #32
 8008c4c:	f1c5 0e08 	rsb	lr, r5, #8
 8008c50:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8008c54:	fa47 f00e 	asr.w	r0, r7, lr
 8008c58:	4481      	add	r9, r0
 8008c5a:	fa00 f00e 	lsl.w	r0, r0, lr
 8008c5e:	1a3f      	subs	r7, r7, r0
 8008c60:	f1c5 0007 	rsb	r0, r5, #7
 8008c64:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8008c68:	4107      	asrs	r7, r0
 8008c6a:	2f00      	cmp	r7, #0
 8008c6c:	dd3f      	ble.n	8008cee <__kernel_rem_pio2f+0x1ce>
 8008c6e:	f04f 0e00 	mov.w	lr, #0
 8008c72:	f109 0901 	add.w	r9, r9, #1
 8008c76:	4673      	mov	r3, lr
 8008c78:	4576      	cmp	r6, lr
 8008c7a:	dc6b      	bgt.n	8008d54 <__kernel_rem_pio2f+0x234>
 8008c7c:	2d00      	cmp	r5, #0
 8008c7e:	dd04      	ble.n	8008c8a <__kernel_rem_pio2f+0x16a>
 8008c80:	2d01      	cmp	r5, #1
 8008c82:	d078      	beq.n	8008d76 <__kernel_rem_pio2f+0x256>
 8008c84:	2d02      	cmp	r5, #2
 8008c86:	f000 8081 	beq.w	8008d8c <__kernel_rem_pio2f+0x26c>
 8008c8a:	2f02      	cmp	r7, #2
 8008c8c:	d12f      	bne.n	8008cee <__kernel_rem_pio2f+0x1ce>
 8008c8e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008c92:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008c96:	b353      	cbz	r3, 8008cee <__kernel_rem_pio2f+0x1ce>
 8008c98:	4628      	mov	r0, r5
 8008c9a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008c9e:	f000 fa47 	bl	8009130 <scalbnf>
 8008ca2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8008ca6:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008caa:	e020      	b.n	8008cee <__kernel_rem_pio2f+0x1ce>
 8008cac:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008cb0:	3f01      	subs	r7, #1
 8008cb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cba:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008cbe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008cc2:	ecac 0a01 	vstmia	ip!, {s0}
 8008cc6:	ed90 0a00 	vldr	s0, [r0]
 8008cca:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008cce:	e799      	b.n	8008c04 <__kernel_rem_pio2f+0xe4>
 8008cd0:	d105      	bne.n	8008cde <__kernel_rem_pio2f+0x1be>
 8008cd2:	1e70      	subs	r0, r6, #1
 8008cd4:	ab08      	add	r3, sp, #32
 8008cd6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8008cda:	11ff      	asrs	r7, r7, #7
 8008cdc:	e7c5      	b.n	8008c6a <__kernel_rem_pio2f+0x14a>
 8008cde:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008ce2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cea:	da31      	bge.n	8008d50 <__kernel_rem_pio2f+0x230>
 8008cec:	2700      	movs	r7, #0
 8008cee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cf6:	f040 809b 	bne.w	8008e30 <__kernel_rem_pio2f+0x310>
 8008cfa:	1e74      	subs	r4, r6, #1
 8008cfc:	46a4      	mov	ip, r4
 8008cfe:	2000      	movs	r0, #0
 8008d00:	45d4      	cmp	ip, sl
 8008d02:	da4a      	bge.n	8008d9a <__kernel_rem_pio2f+0x27a>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d07a      	beq.n	8008dfe <__kernel_rem_pio2f+0x2de>
 8008d08:	ab08      	add	r3, sp, #32
 8008d0a:	3d08      	subs	r5, #8
 8008d0c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 8081 	beq.w	8008e18 <__kernel_rem_pio2f+0x2f8>
 8008d16:	4628      	mov	r0, r5
 8008d18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008d1c:	00a5      	lsls	r5, r4, #2
 8008d1e:	f000 fa07 	bl	8009130 <scalbnf>
 8008d22:	aa44      	add	r2, sp, #272	; 0x110
 8008d24:	1d2b      	adds	r3, r5, #4
 8008d26:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008e28 <__kernel_rem_pio2f+0x308>
 8008d2a:	18d1      	adds	r1, r2, r3
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	2a00      	cmp	r2, #0
 8008d30:	f280 80ae 	bge.w	8008e90 <__kernel_rem_pio2f+0x370>
 8008d34:	4622      	mov	r2, r4
 8008d36:	2a00      	cmp	r2, #0
 8008d38:	f2c0 80cc 	blt.w	8008ed4 <__kernel_rem_pio2f+0x3b4>
 8008d3c:	a944      	add	r1, sp, #272	; 0x110
 8008d3e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8008d42:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8008e20 <__kernel_rem_pio2f+0x300>
 8008d46:	eddf 7a39 	vldr	s15, [pc, #228]	; 8008e2c <__kernel_rem_pio2f+0x30c>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	1aa1      	subs	r1, r4, r2
 8008d4e:	e0b6      	b.n	8008ebe <__kernel_rem_pio2f+0x39e>
 8008d50:	2702      	movs	r7, #2
 8008d52:	e78c      	b.n	8008c6e <__kernel_rem_pio2f+0x14e>
 8008d54:	6820      	ldr	r0, [r4, #0]
 8008d56:	b94b      	cbnz	r3, 8008d6c <__kernel_rem_pio2f+0x24c>
 8008d58:	b118      	cbz	r0, 8008d62 <__kernel_rem_pio2f+0x242>
 8008d5a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8008d5e:	6020      	str	r0, [r4, #0]
 8008d60:	2001      	movs	r0, #1
 8008d62:	f10e 0e01 	add.w	lr, lr, #1
 8008d66:	3404      	adds	r4, #4
 8008d68:	4603      	mov	r3, r0
 8008d6a:	e785      	b.n	8008c78 <__kernel_rem_pio2f+0x158>
 8008d6c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8008d70:	6020      	str	r0, [r4, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	e7f5      	b.n	8008d62 <__kernel_rem_pio2f+0x242>
 8008d76:	1e74      	subs	r4, r6, #1
 8008d78:	a808      	add	r0, sp, #32
 8008d7a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008d7e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008d82:	f10d 0c20 	add.w	ip, sp, #32
 8008d86:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8008d8a:	e77e      	b.n	8008c8a <__kernel_rem_pio2f+0x16a>
 8008d8c:	1e74      	subs	r4, r6, #1
 8008d8e:	a808      	add	r0, sp, #32
 8008d90:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8008d94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8008d98:	e7f3      	b.n	8008d82 <__kernel_rem_pio2f+0x262>
 8008d9a:	ab08      	add	r3, sp, #32
 8008d9c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8008da0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008da4:	4318      	orrs	r0, r3
 8008da6:	e7ab      	b.n	8008d00 <__kernel_rem_pio2f+0x1e0>
 8008da8:	f10c 0c01 	add.w	ip, ip, #1
 8008dac:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8008db0:	2c00      	cmp	r4, #0
 8008db2:	d0f9      	beq.n	8008da8 <__kernel_rem_pio2f+0x288>
 8008db4:	9b05      	ldr	r3, [sp, #20]
 8008db6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8008dba:	eb0d 0003 	add.w	r0, sp, r3
 8008dbe:	9b01      	ldr	r3, [sp, #4]
 8008dc0:	18f4      	adds	r4, r6, r3
 8008dc2:	ab1c      	add	r3, sp, #112	; 0x70
 8008dc4:	1c77      	adds	r7, r6, #1
 8008dc6:	384c      	subs	r0, #76	; 0x4c
 8008dc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008dcc:	4466      	add	r6, ip
 8008dce:	42be      	cmp	r6, r7
 8008dd0:	f6ff af0b 	blt.w	8008bea <__kernel_rem_pio2f+0xca>
 8008dd4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8008dd8:	f8dd e008 	ldr.w	lr, [sp, #8]
 8008ddc:	ee07 3a90 	vmov	s15, r3
 8008de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008de4:	f04f 0c00 	mov.w	ip, #0
 8008de8:	ece4 7a01 	vstmia	r4!, {s15}
 8008dec:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008e2c <__kernel_rem_pio2f+0x30c>
 8008df0:	46a1      	mov	r9, r4
 8008df2:	458c      	cmp	ip, r1
 8008df4:	dd07      	ble.n	8008e06 <__kernel_rem_pio2f+0x2e6>
 8008df6:	ece0 7a01 	vstmia	r0!, {s15}
 8008dfa:	3701      	adds	r7, #1
 8008dfc:	e7e7      	b.n	8008dce <__kernel_rem_pio2f+0x2ae>
 8008dfe:	9804      	ldr	r0, [sp, #16]
 8008e00:	f04f 0c01 	mov.w	ip, #1
 8008e04:	e7d2      	b.n	8008dac <__kernel_rem_pio2f+0x28c>
 8008e06:	ecfe 6a01 	vldmia	lr!, {s13}
 8008e0a:	ed39 7a01 	vldmdb	r9!, {s14}
 8008e0e:	f10c 0c01 	add.w	ip, ip, #1
 8008e12:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008e16:	e7ec      	b.n	8008df2 <__kernel_rem_pio2f+0x2d2>
 8008e18:	3c01      	subs	r4, #1
 8008e1a:	e775      	b.n	8008d08 <__kernel_rem_pio2f+0x1e8>
 8008e1c:	08009638 	.word	0x08009638
 8008e20:	0800960c 	.word	0x0800960c
 8008e24:	43800000 	.word	0x43800000
 8008e28:	3b800000 	.word	0x3b800000
 8008e2c:	00000000 	.word	0x00000000
 8008e30:	9b03      	ldr	r3, [sp, #12]
 8008e32:	eeb0 0a48 	vmov.f32	s0, s16
 8008e36:	1a98      	subs	r0, r3, r2
 8008e38:	f000 f97a 	bl	8009130 <scalbnf>
 8008e3c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8008e24 <__kernel_rem_pio2f+0x304>
 8008e40:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e48:	db19      	blt.n	8008e7e <__kernel_rem_pio2f+0x35e>
 8008e4a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8008e28 <__kernel_rem_pio2f+0x308>
 8008e4e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008e52:	aa08      	add	r2, sp, #32
 8008e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e58:	1c74      	adds	r4, r6, #1
 8008e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e5e:	3508      	adds	r5, #8
 8008e60:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008e64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e68:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008e6c:	ee10 3a10 	vmov	r3, s0
 8008e70:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008e74:	ee17 3a90 	vmov	r3, s15
 8008e78:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008e7c:	e74b      	b.n	8008d16 <__kernel_rem_pio2f+0x1f6>
 8008e7e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008e82:	aa08      	add	r2, sp, #32
 8008e84:	ee10 3a10 	vmov	r3, s0
 8008e88:	4634      	mov	r4, r6
 8008e8a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8008e8e:	e742      	b.n	8008d16 <__kernel_rem_pio2f+0x1f6>
 8008e90:	a808      	add	r0, sp, #32
 8008e92:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8008e96:	9001      	str	r0, [sp, #4]
 8008e98:	ee07 0a90 	vmov	s15, r0
 8008e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ea0:	3a01      	subs	r2, #1
 8008ea2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008ea6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008eaa:	ed61 7a01 	vstmdb	r1!, {s15}
 8008eae:	e73e      	b.n	8008d2e <__kernel_rem_pio2f+0x20e>
 8008eb0:	ecfc 6a01 	vldmia	ip!, {s13}
 8008eb4:	ecb6 7a01 	vldmia	r6!, {s14}
 8008eb8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	4550      	cmp	r0, sl
 8008ec0:	dc01      	bgt.n	8008ec6 <__kernel_rem_pio2f+0x3a6>
 8008ec2:	4288      	cmp	r0, r1
 8008ec4:	ddf4      	ble.n	8008eb0 <__kernel_rem_pio2f+0x390>
 8008ec6:	a858      	add	r0, sp, #352	; 0x160
 8008ec8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ecc:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8008ed0:	3a01      	subs	r2, #1
 8008ed2:	e730      	b.n	8008d36 <__kernel_rem_pio2f+0x216>
 8008ed4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8008ed6:	2a02      	cmp	r2, #2
 8008ed8:	dc09      	bgt.n	8008eee <__kernel_rem_pio2f+0x3ce>
 8008eda:	2a00      	cmp	r2, #0
 8008edc:	dc2a      	bgt.n	8008f34 <__kernel_rem_pio2f+0x414>
 8008ede:	d043      	beq.n	8008f68 <__kernel_rem_pio2f+0x448>
 8008ee0:	f009 0007 	and.w	r0, r9, #7
 8008ee4:	b059      	add	sp, #356	; 0x164
 8008ee6:	ecbd 8b04 	vpop	{d8-d9}
 8008eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eee:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8008ef0:	2b03      	cmp	r3, #3
 8008ef2:	d1f5      	bne.n	8008ee0 <__kernel_rem_pio2f+0x3c0>
 8008ef4:	ab30      	add	r3, sp, #192	; 0xc0
 8008ef6:	442b      	add	r3, r5
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4619      	mov	r1, r3
 8008efc:	4620      	mov	r0, r4
 8008efe:	2800      	cmp	r0, #0
 8008f00:	f1a1 0104 	sub.w	r1, r1, #4
 8008f04:	dc51      	bgt.n	8008faa <__kernel_rem_pio2f+0x48a>
 8008f06:	4621      	mov	r1, r4
 8008f08:	2901      	cmp	r1, #1
 8008f0a:	f1a2 0204 	sub.w	r2, r2, #4
 8008f0e:	dc5c      	bgt.n	8008fca <__kernel_rem_pio2f+0x4aa>
 8008f10:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8008e2c <__kernel_rem_pio2f+0x30c>
 8008f14:	3304      	adds	r3, #4
 8008f16:	2c01      	cmp	r4, #1
 8008f18:	dc67      	bgt.n	8008fea <__kernel_rem_pio2f+0x4ca>
 8008f1a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8008f1e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8008f22:	2f00      	cmp	r7, #0
 8008f24:	d167      	bne.n	8008ff6 <__kernel_rem_pio2f+0x4d6>
 8008f26:	edc8 6a00 	vstr	s13, [r8]
 8008f2a:	ed88 7a01 	vstr	s14, [r8, #4]
 8008f2e:	edc8 7a02 	vstr	s15, [r8, #8]
 8008f32:	e7d5      	b.n	8008ee0 <__kernel_rem_pio2f+0x3c0>
 8008f34:	aa30      	add	r2, sp, #192	; 0xc0
 8008f36:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8008e2c <__kernel_rem_pio2f+0x30c>
 8008f3a:	4413      	add	r3, r2
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	2a00      	cmp	r2, #0
 8008f40:	da24      	bge.n	8008f8c <__kernel_rem_pio2f+0x46c>
 8008f42:	b34f      	cbz	r7, 8008f98 <__kernel_rem_pio2f+0x478>
 8008f44:	eef1 7a47 	vneg.f32	s15, s14
 8008f48:	edc8 7a00 	vstr	s15, [r8]
 8008f4c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8008f50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f54:	aa31      	add	r2, sp, #196	; 0xc4
 8008f56:	2301      	movs	r3, #1
 8008f58:	429c      	cmp	r4, r3
 8008f5a:	da20      	bge.n	8008f9e <__kernel_rem_pio2f+0x47e>
 8008f5c:	b10f      	cbz	r7, 8008f62 <__kernel_rem_pio2f+0x442>
 8008f5e:	eef1 7a67 	vneg.f32	s15, s15
 8008f62:	edc8 7a01 	vstr	s15, [r8, #4]
 8008f66:	e7bb      	b.n	8008ee0 <__kernel_rem_pio2f+0x3c0>
 8008f68:	aa30      	add	r2, sp, #192	; 0xc0
 8008f6a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8008e2c <__kernel_rem_pio2f+0x30c>
 8008f6e:	4413      	add	r3, r2
 8008f70:	2c00      	cmp	r4, #0
 8008f72:	da05      	bge.n	8008f80 <__kernel_rem_pio2f+0x460>
 8008f74:	b10f      	cbz	r7, 8008f7a <__kernel_rem_pio2f+0x45a>
 8008f76:	eef1 7a67 	vneg.f32	s15, s15
 8008f7a:	edc8 7a00 	vstr	s15, [r8]
 8008f7e:	e7af      	b.n	8008ee0 <__kernel_rem_pio2f+0x3c0>
 8008f80:	ed33 7a01 	vldmdb	r3!, {s14}
 8008f84:	3c01      	subs	r4, #1
 8008f86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f8a:	e7f1      	b.n	8008f70 <__kernel_rem_pio2f+0x450>
 8008f8c:	ed73 7a01 	vldmdb	r3!, {s15}
 8008f90:	3a01      	subs	r2, #1
 8008f92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008f96:	e7d2      	b.n	8008f3e <__kernel_rem_pio2f+0x41e>
 8008f98:	eef0 7a47 	vmov.f32	s15, s14
 8008f9c:	e7d4      	b.n	8008f48 <__kernel_rem_pio2f+0x428>
 8008f9e:	ecb2 7a01 	vldmia	r2!, {s14}
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fa8:	e7d6      	b.n	8008f58 <__kernel_rem_pio2f+0x438>
 8008faa:	edd1 7a00 	vldr	s15, [r1]
 8008fae:	edd1 6a01 	vldr	s13, [r1, #4]
 8008fb2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008fb6:	3801      	subs	r0, #1
 8008fb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008fbc:	ed81 7a00 	vstr	s14, [r1]
 8008fc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fc4:	edc1 7a01 	vstr	s15, [r1, #4]
 8008fc8:	e799      	b.n	8008efe <__kernel_rem_pio2f+0x3de>
 8008fca:	edd2 7a00 	vldr	s15, [r2]
 8008fce:	edd2 6a01 	vldr	s13, [r2, #4]
 8008fd2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008fd6:	3901      	subs	r1, #1
 8008fd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008fdc:	ed82 7a00 	vstr	s14, [r2]
 8008fe0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fe4:	edc2 7a01 	vstr	s15, [r2, #4]
 8008fe8:	e78e      	b.n	8008f08 <__kernel_rem_pio2f+0x3e8>
 8008fea:	ed33 7a01 	vldmdb	r3!, {s14}
 8008fee:	3c01      	subs	r4, #1
 8008ff0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ff4:	e78f      	b.n	8008f16 <__kernel_rem_pio2f+0x3f6>
 8008ff6:	eef1 6a66 	vneg.f32	s13, s13
 8008ffa:	eeb1 7a47 	vneg.f32	s14, s14
 8008ffe:	edc8 6a00 	vstr	s13, [r8]
 8009002:	ed88 7a01 	vstr	s14, [r8, #4]
 8009006:	eef1 7a67 	vneg.f32	s15, s15
 800900a:	e790      	b.n	8008f2e <__kernel_rem_pio2f+0x40e>

0800900c <__kernel_sinf>:
 800900c:	ee10 3a10 	vmov	r3, s0
 8009010:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009014:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009018:	da04      	bge.n	8009024 <__kernel_sinf+0x18>
 800901a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800901e:	ee17 3a90 	vmov	r3, s15
 8009022:	b35b      	cbz	r3, 800907c <__kernel_sinf+0x70>
 8009024:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009028:	eddf 7a15 	vldr	s15, [pc, #84]	; 8009080 <__kernel_sinf+0x74>
 800902c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009084 <__kernel_sinf+0x78>
 8009030:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009034:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009088 <__kernel_sinf+0x7c>
 8009038:	eee6 7a07 	vfma.f32	s15, s12, s14
 800903c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800908c <__kernel_sinf+0x80>
 8009040:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009044:	eddf 7a12 	vldr	s15, [pc, #72]	; 8009090 <__kernel_sinf+0x84>
 8009048:	ee60 6a07 	vmul.f32	s13, s0, s14
 800904c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009050:	b930      	cbnz	r0, 8009060 <__kernel_sinf+0x54>
 8009052:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8009094 <__kernel_sinf+0x88>
 8009056:	eea7 6a27 	vfma.f32	s12, s14, s15
 800905a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800905e:	4770      	bx	lr
 8009060:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009064:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009068:	eee0 7a86 	vfma.f32	s15, s1, s12
 800906c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8009070:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009098 <__kernel_sinf+0x8c>
 8009074:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009078:	ee30 0a60 	vsub.f32	s0, s0, s1
 800907c:	4770      	bx	lr
 800907e:	bf00      	nop
 8009080:	2f2ec9d3 	.word	0x2f2ec9d3
 8009084:	b2d72f34 	.word	0xb2d72f34
 8009088:	3638ef1b 	.word	0x3638ef1b
 800908c:	b9500d01 	.word	0xb9500d01
 8009090:	3c088889 	.word	0x3c088889
 8009094:	be2aaaab 	.word	0xbe2aaaab
 8009098:	3e2aaaab 	.word	0x3e2aaaab

0800909c <fabsf>:
 800909c:	ee10 3a10 	vmov	r3, s0
 80090a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090a4:	ee00 3a10 	vmov	s0, r3
 80090a8:	4770      	bx	lr
	...

080090ac <floorf>:
 80090ac:	ee10 3a10 	vmov	r3, s0
 80090b0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80090b4:	3a7f      	subs	r2, #127	; 0x7f
 80090b6:	2a16      	cmp	r2, #22
 80090b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80090bc:	dc2a      	bgt.n	8009114 <floorf+0x68>
 80090be:	2a00      	cmp	r2, #0
 80090c0:	da11      	bge.n	80090e6 <floorf+0x3a>
 80090c2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009124 <floorf+0x78>
 80090c6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80090ca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80090ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090d2:	dd05      	ble.n	80090e0 <floorf+0x34>
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	da23      	bge.n	8009120 <floorf+0x74>
 80090d8:	4a13      	ldr	r2, [pc, #76]	; (8009128 <floorf+0x7c>)
 80090da:	2900      	cmp	r1, #0
 80090dc:	bf18      	it	ne
 80090de:	4613      	movne	r3, r2
 80090e0:	ee00 3a10 	vmov	s0, r3
 80090e4:	4770      	bx	lr
 80090e6:	4911      	ldr	r1, [pc, #68]	; (800912c <floorf+0x80>)
 80090e8:	4111      	asrs	r1, r2
 80090ea:	420b      	tst	r3, r1
 80090ec:	d0fa      	beq.n	80090e4 <floorf+0x38>
 80090ee:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009124 <floorf+0x78>
 80090f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80090f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80090fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fe:	ddef      	ble.n	80090e0 <floorf+0x34>
 8009100:	2b00      	cmp	r3, #0
 8009102:	bfbe      	ittt	lt
 8009104:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009108:	fa40 f202 	asrlt.w	r2, r0, r2
 800910c:	189b      	addlt	r3, r3, r2
 800910e:	ea23 0301 	bic.w	r3, r3, r1
 8009112:	e7e5      	b.n	80090e0 <floorf+0x34>
 8009114:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009118:	d3e4      	bcc.n	80090e4 <floorf+0x38>
 800911a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800911e:	4770      	bx	lr
 8009120:	2300      	movs	r3, #0
 8009122:	e7dd      	b.n	80090e0 <floorf+0x34>
 8009124:	7149f2ca 	.word	0x7149f2ca
 8009128:	bf800000 	.word	0xbf800000
 800912c:	007fffff 	.word	0x007fffff

08009130 <scalbnf>:
 8009130:	ee10 3a10 	vmov	r3, s0
 8009134:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009138:	d025      	beq.n	8009186 <scalbnf+0x56>
 800913a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800913e:	d302      	bcc.n	8009146 <scalbnf+0x16>
 8009140:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009144:	4770      	bx	lr
 8009146:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800914a:	d122      	bne.n	8009192 <scalbnf+0x62>
 800914c:	4b2a      	ldr	r3, [pc, #168]	; (80091f8 <scalbnf+0xc8>)
 800914e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80091fc <scalbnf+0xcc>
 8009152:	4298      	cmp	r0, r3
 8009154:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009158:	db16      	blt.n	8009188 <scalbnf+0x58>
 800915a:	ee10 3a10 	vmov	r3, s0
 800915e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009162:	3a19      	subs	r2, #25
 8009164:	4402      	add	r2, r0
 8009166:	2afe      	cmp	r2, #254	; 0xfe
 8009168:	dd15      	ble.n	8009196 <scalbnf+0x66>
 800916a:	ee10 3a10 	vmov	r3, s0
 800916e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009200 <scalbnf+0xd0>
 8009172:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009204 <scalbnf+0xd4>
 8009176:	2b00      	cmp	r3, #0
 8009178:	eeb0 7a67 	vmov.f32	s14, s15
 800917c:	bfb8      	it	lt
 800917e:	eef0 7a66 	vmovlt.f32	s15, s13
 8009182:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009186:	4770      	bx	lr
 8009188:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009208 <scalbnf+0xd8>
 800918c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009190:	4770      	bx	lr
 8009192:	0dd2      	lsrs	r2, r2, #23
 8009194:	e7e6      	b.n	8009164 <scalbnf+0x34>
 8009196:	2a00      	cmp	r2, #0
 8009198:	dd06      	ble.n	80091a8 <scalbnf+0x78>
 800919a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800919e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80091a2:	ee00 3a10 	vmov	s0, r3
 80091a6:	4770      	bx	lr
 80091a8:	f112 0f16 	cmn.w	r2, #22
 80091ac:	da1a      	bge.n	80091e4 <scalbnf+0xb4>
 80091ae:	f24c 3350 	movw	r3, #50000	; 0xc350
 80091b2:	4298      	cmp	r0, r3
 80091b4:	ee10 3a10 	vmov	r3, s0
 80091b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091bc:	dd0a      	ble.n	80091d4 <scalbnf+0xa4>
 80091be:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009200 <scalbnf+0xd0>
 80091c2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009204 <scalbnf+0xd4>
 80091c6:	eef0 7a40 	vmov.f32	s15, s0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	bf18      	it	ne
 80091ce:	eeb0 0a47 	vmovne.f32	s0, s14
 80091d2:	e7db      	b.n	800918c <scalbnf+0x5c>
 80091d4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009208 <scalbnf+0xd8>
 80091d8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800920c <scalbnf+0xdc>
 80091dc:	eef0 7a40 	vmov.f32	s15, s0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	e7f3      	b.n	80091cc <scalbnf+0x9c>
 80091e4:	3219      	adds	r2, #25
 80091e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80091ea:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80091ee:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009210 <scalbnf+0xe0>
 80091f2:	ee07 3a10 	vmov	s14, r3
 80091f6:	e7c4      	b.n	8009182 <scalbnf+0x52>
 80091f8:	ffff3cb0 	.word	0xffff3cb0
 80091fc:	4c000000 	.word	0x4c000000
 8009200:	7149f2ca 	.word	0x7149f2ca
 8009204:	f149f2ca 	.word	0xf149f2ca
 8009208:	0da24260 	.word	0x0da24260
 800920c:	8da24260 	.word	0x8da24260
 8009210:	33000000 	.word	0x33000000

08009214 <_init>:
 8009214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009216:	bf00      	nop
 8009218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800921a:	bc08      	pop	{r3}
 800921c:	469e      	mov	lr, r3
 800921e:	4770      	bx	lr

08009220 <_fini>:
 8009220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009222:	bf00      	nop
 8009224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009226:	bc08      	pop	{r3}
 8009228:	469e      	mov	lr, r3
 800922a:	4770      	bx	lr
